/*
* generated by Xtext
*/
grammar InternalLight;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.xtext.example.light.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.light.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.light.services.LightGrammarAccess;

}

@parser::members {

 	private LightGrammarAccess grammarAccess;
 	
    public InternalLightParser(TokenStream input, LightGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Main";	
   	}
   	
   	@Override
   	protected LightGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleMain
entryRuleMain returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMainRule()); }
	 iv_ruleMain=ruleMain 
	 { $current=$iv_ruleMain.current; } 
	 EOF 
;

// Rule Main
ruleMain returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getMainAccess().getMainAction_0(),
            $current);
    }
)	otherlv_1='Main' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMainAccess().getMainKeyword_1());
    }
	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getMainAccess().getLeftCurlyBracketKeyword_2());
    }
(	otherlv_3='BIMServer' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getMainAccess().getBIMServerKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMainAccess().getBIMServerBIMServerCredentialsParserRuleCall_3_1_0()); 
	    }
		lv_BIMServer_4_0=ruleBIMServerCredentials		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMainRule());
	        }
       		set(
       			$current, 
       			"BIMServer",
        		lv_BIMServer_4_0, 
        		"BIMServerCredentials");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_5='Lamp' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getMainAccess().getLampKeyword_4_0());
    }
	otherlv_6='{' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getMainAccess().getLeftCurlyBracketKeyword_4_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMainAccess().getLampLampParserRuleCall_4_2_0()); 
	    }
		lv_Lamp_7_0=ruleLamp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMainRule());
	        }
       		add(
       			$current, 
       			"Lamp",
        		lv_Lamp_7_0, 
        		"Lamp");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_8=',' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getMainAccess().getCommaKeyword_4_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMainAccess().getLampLampParserRuleCall_4_3_1_0()); 
	    }
		lv_Lamp_9_0=ruleLamp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMainRule());
	        }
       		add(
       			$current, 
       			"Lamp",
        		lv_Lamp_9_0, 
        		"Lamp");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_10='}' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getMainAccess().getRightCurlyBracketKeyword_4_4());
    }
)?	otherlv_11='}' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getMainAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleBIMServerCredentials
entryRuleBIMServerCredentials returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBIMServerCredentialsRule()); }
	 iv_ruleBIMServerCredentials=ruleBIMServerCredentials 
	 { $current=$iv_ruleBIMServerCredentials.current; } 
	 EOF 
;

// Rule BIMServerCredentials
ruleBIMServerCredentials returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getBIMServerCredentialsAccess().getBIMServerCredentialsAction_0(),
            $current);
    }
)	otherlv_1='BIMServerCredentials' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getBIMServerCredentialsAccess().getBIMServerCredentialsKeyword_1());
    }
	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getBIMServerCredentialsAccess().getLeftCurlyBracketKeyword_2());
    }
(	otherlv_3='address' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getBIMServerCredentialsAccess().getAddressKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBIMServerCredentialsAccess().getAddressEStringParserRuleCall_3_1_0()); 
	    }
		lv_address_4_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBIMServerCredentialsRule());
	        }
       		set(
       			$current, 
       			"address",
        		lv_address_4_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_5='port' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getBIMServerCredentialsAccess().getPortKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBIMServerCredentialsAccess().getPortEStringParserRuleCall_4_1_0()); 
	    }
		lv_port_6_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBIMServerCredentialsRule());
	        }
       		set(
       			$current, 
       			"port",
        		lv_port_6_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_7='projectName' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getBIMServerCredentialsAccess().getProjectNameKeyword_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBIMServerCredentialsAccess().getProjectNameEStringParserRuleCall_5_1_0()); 
	    }
		lv_projectName_8_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBIMServerCredentialsRule());
	        }
       		set(
       			$current, 
       			"projectName",
        		lv_projectName_8_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_9='userName' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getBIMServerCredentialsAccess().getUserNameKeyword_6_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBIMServerCredentialsAccess().getUserNameEStringParserRuleCall_6_1_0()); 
	    }
		lv_userName_10_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBIMServerCredentialsRule());
	        }
       		set(
       			$current, 
       			"userName",
        		lv_userName_10_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_11='password' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getBIMServerCredentialsAccess().getPasswordKeyword_7_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBIMServerCredentialsAccess().getPasswordEStringParserRuleCall_7_1_0()); 
	    }
		lv_password_12_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBIMServerCredentialsRule());
	        }
       		set(
       			$current, 
       			"password",
        		lv_password_12_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_13='}' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getBIMServerCredentialsAccess().getRightCurlyBracketKeyword_8());
    }
)
;





// Entry rule entryRuleLamp
entryRuleLamp returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLampRule()); }
	 iv_ruleLamp=ruleLamp 
	 { $current=$iv_ruleLamp.current; } 
	 EOF 
;

// Rule Lamp
ruleLamp returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getLampAccess().getLampAction_0(),
            $current);
    }
)	otherlv_1='Lamp' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getLampAccess().getLampKeyword_1());
    }
	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getLampAccess().getLeftCurlyBracketKeyword_2());
    }
(	otherlv_3='GlobalID' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getLampAccess().getGlobalIDKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLampAccess().getGlobalIDEStringParserRuleCall_3_1_0()); 
	    }
		lv_GlobalID_4_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLampRule());
	        }
       		set(
       			$current, 
       			"GlobalID",
        		lv_GlobalID_4_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_5='PredefinedType' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getLampAccess().getPredefinedTypeKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLampAccess().getPredefinedTypeEStringParserRuleCall_4_1_0()); 
	    }
		lv_PredefinedType_6_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLampRule());
	        }
       		set(
       			$current, 
       			"PredefinedType",
        		lv_PredefinedType_6_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_7='}' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getLampAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleEString
entryRuleEString returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEStringRule()); } 
	 iv_ruleEString=ruleEString 
	 { $current=$iv_ruleEString.current.getText(); }  
	 EOF 
;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); 
    }

    |    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); 
    }
)
    ;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


