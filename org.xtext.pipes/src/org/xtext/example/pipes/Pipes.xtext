// automatically generated by Xtext
grammar org.xtext.example.pipes.Pipes with org.eclipse.xtext.common.Terminals

import "platform:/resource/Pipes/model/Pipes.ecore" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Model returns Model:
	{Model}
	'Model'
	'{'
		('elements' '{' elements+=GUIDElement ( "," elements+=GUIDElement)* '}' )?
	'}';

GUIDElement returns GUIDElement:
	GUIDElement_Impl | Wall | Opening | WallRelation | FlowSegment | LocalPlacement | Axis2Placement3D;







GUIDElement_Impl returns GUIDElement:
	{GUIDElement}
	'GUIDElement'
	'{'
		('GUID' GUID=EString)?
		('Name' Name=EString)?
		('Description' Description=EString)?
	'}';

EString returns ecore::EString:
	STRING | ID;

Wall returns Wall:
	'Wall'
	'{'
		('GUID' GUID=EString)?
		('Name' Name=EString)?
		('Description' Description=EString)?
		'placement' placement=LocalPlacement
		('openings' '{' openings+=WallRelation ( "," openings+=WallRelation)* '}' )?
	'}';

Opening returns Opening:
	'Opening'
	'{'
		('GUID' GUID=EString)?
		('Name' Name=EString)?
		('Description' Description=EString)?
		'placement' placement=LocalPlacement
		('walls' '{' walls+=WallRelation ( "," walls+=WallRelation)* '}' )?
	'}';

WallRelation returns WallRelation:
	'WallRelation'
	'{'
		('GUID' GUID=EString)?
		('Name' Name=EString)?
		('Description' Description=EString)?
		'wall' wall=Wall
		'opening' opening=Opening
	'}';

FlowSegment returns FlowSegment:
	'FlowSegment'
	'{'
		('GUID' GUID=EString)?
		('Name' Name=EString)?
		('Description' Description=EString)?
		'placement' placement=LocalPlacement
	'}';

LocalPlacement returns LocalPlacement:
	{LocalPlacement}
	'LocalPlacement'
	'{'
		('GUID' GUID=EString)?
		('Name' Name=EString)?
		('Description' Description=EString)?
		('axis2placement3d' axis2placement3d=Axis2Placement3D)?
		('relativeTo' relativeTo=LocalPlacement)?
	'}';

Axis2Placement3D returns Axis2Placement3D:
	'Axis2Placement3D'
	'{'
		('GUID' GUID=EString)?
		('Name' Name=EString)?
		('Description' Description=EString)?
		'cartesianX' cartesianX=EDouble
		'cartesianY' cartesianY=EDouble
		'cartesianZ' cartesianZ=EDouble
		'axis' axis=Direction
		'refDirection' refDirection=Direction
	'}';

EDouble returns ecore::EDouble:
	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;

Direction returns Direction:
	'Direction'
	'{'
		'x' x=EDouble
		'y' y=EDouble
		('z' z=EDouble)?
	'}';
