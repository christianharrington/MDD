/*
* generated by Xtext
*/
package org.xtext.example.light.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.xtext.example.light.services.LightGrammarAccess;

public class LightParser extends AbstractContentAssistParser {
	
	@Inject
	private LightGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.xtext.example.light.ui.contentassist.antlr.internal.InternalLightParser createParser() {
		org.xtext.example.light.ui.contentassist.antlr.internal.InternalLightParser result = new org.xtext.example.light.ui.contentassist.antlr.internal.InternalLightParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
					put(grammarAccess.getMainAccess().getGroup(), "rule__Main__Group__0");
					put(grammarAccess.getMainAccess().getGroup_3(), "rule__Main__Group_3__0");
					put(grammarAccess.getMainAccess().getGroup_4(), "rule__Main__Group_4__0");
					put(grammarAccess.getMainAccess().getGroup_4_3(), "rule__Main__Group_4_3__0");
					put(grammarAccess.getBIMServerCredentialsAccess().getGroup(), "rule__BIMServerCredentials__Group__0");
					put(grammarAccess.getBIMServerCredentialsAccess().getGroup_3(), "rule__BIMServerCredentials__Group_3__0");
					put(grammarAccess.getBIMServerCredentialsAccess().getGroup_4(), "rule__BIMServerCredentials__Group_4__0");
					put(grammarAccess.getBIMServerCredentialsAccess().getGroup_5(), "rule__BIMServerCredentials__Group_5__0");
					put(grammarAccess.getBIMServerCredentialsAccess().getGroup_6(), "rule__BIMServerCredentials__Group_6__0");
					put(grammarAccess.getBIMServerCredentialsAccess().getGroup_7(), "rule__BIMServerCredentials__Group_7__0");
					put(grammarAccess.getLampAccess().getGroup(), "rule__Lamp__Group__0");
					put(grammarAccess.getLampAccess().getGroup_3(), "rule__Lamp__Group_3__0");
					put(grammarAccess.getLampAccess().getGroup_4(), "rule__Lamp__Group_4__0");
					put(grammarAccess.getMainAccess().getBIMServerAssignment_3_1(), "rule__Main__BIMServerAssignment_3_1");
					put(grammarAccess.getMainAccess().getLampAssignment_4_2(), "rule__Main__LampAssignment_4_2");
					put(grammarAccess.getMainAccess().getLampAssignment_4_3_1(), "rule__Main__LampAssignment_4_3_1");
					put(grammarAccess.getBIMServerCredentialsAccess().getAddressAssignment_3_1(), "rule__BIMServerCredentials__AddressAssignment_3_1");
					put(grammarAccess.getBIMServerCredentialsAccess().getPortAssignment_4_1(), "rule__BIMServerCredentials__PortAssignment_4_1");
					put(grammarAccess.getBIMServerCredentialsAccess().getProjectNameAssignment_5_1(), "rule__BIMServerCredentials__ProjectNameAssignment_5_1");
					put(grammarAccess.getBIMServerCredentialsAccess().getUserNameAssignment_6_1(), "rule__BIMServerCredentials__UserNameAssignment_6_1");
					put(grammarAccess.getBIMServerCredentialsAccess().getPasswordAssignment_7_1(), "rule__BIMServerCredentials__PasswordAssignment_7_1");
					put(grammarAccess.getLampAccess().getGlobalIDAssignment_3_1(), "rule__Lamp__GlobalIDAssignment_3_1");
					put(grammarAccess.getLampAccess().getPredefinedTypeAssignment_4_1(), "rule__Lamp__PredefinedTypeAssignment_4_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.xtext.example.light.ui.contentassist.antlr.internal.InternalLightParser typedParser = (org.xtext.example.light.ui.contentassist.antlr.internal.InternalLightParser) parser;
			typedParser.entryRuleMain();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public LightGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(LightGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
