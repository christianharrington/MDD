/**
 */
package org.tech.iai.ifc.xml.ifc._2x3.final_.util;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

import org.iso.standard._10303.part._28.version._2.xmlschema.common.Entity;

import org.tech.iai.ifc.xml.ifc._2x3.final_.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.FinalPackage
 * @generated
 */
public class FinalSwitch<T> extends Switch<T> {
	/**
	 * The cached model package
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected static FinalPackage modelPackage;

	/**
	 * Creates an instance of the switch.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public FinalSwitch() {
		if (modelPackage == null) {
			modelPackage = FinalPackage.eINSTANCE;
		}
	}

	/**
	 * Checks whether this is a switch for the given package.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @parameter ePackage the package in question.
	 * @return whether this is a switch for the given package.
	 * @generated
	 */
	@Override
	protected boolean isSwitchFor(EPackage ePackage) {
		return ePackage == modelPackage;
	}

	/**
	 * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @return the first non-null result returned by a <code>caseXXX</code> call.
	 * @generated
	 */
	@Override
	protected T doSwitch(int classifierID, EObject theEObject) {
		switch (classifierID) {
			case FinalPackage.ACTING_ROLE_TYPE: {
				ActingRoleType actingRoleType = (ActingRoleType)theEObject;
				T result = caseActingRoleType(actingRoleType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.ACTOR_TYPE: {
				ActorType actorType = (ActorType)theEObject;
				T result = caseActorType(actorType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.ACTUAL_FINISH_TYPE: {
				ActualFinishType actualFinishType = (ActualFinishType)theEObject;
				T result = caseActualFinishType(actualFinishType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.ACTUAL_START_TYPE: {
				ActualStartType actualStartType = (ActualStartType)theEObject;
				T result = caseActualStartType(actualStartType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.ADDITIONAL_CONDITIONS_TYPE: {
				AdditionalConditionsType additionalConditionsType = (AdditionalConditionsType)theEObject;
				T result = caseAdditionalConditionsType(additionalConditionsType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.ADDRESSES_TYPE: {
				AddressesType addressesType = (AddressesType)theEObject;
				T result = caseAddressesType(addressesType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.ADDRESSES_TYPE1: {
				AddressesType1 addressesType1 = (AddressesType1)theEObject;
				T result = caseAddressesType1(addressesType1);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.ADDRESS_LINES_TYPE: {
				AddressLinesType addressLinesType = (AddressLinesType)theEObject;
				T result = caseAddressLinesType(addressLinesType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.ANNOTATED_CURVE_TYPE: {
				AnnotatedCurveType annotatedCurveType = (AnnotatedCurveType)theEObject;
				T result = caseAnnotatedCurveType(annotatedCurveType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.APPLICABLE_DATES_TYPE: {
				ApplicableDatesType applicableDatesType = (ApplicableDatesType)theEObject;
				T result = caseApplicableDatesType(applicableDatesType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.APPLICABLE_DATE_TYPE: {
				ApplicableDateType applicableDateType = (ApplicableDateType)theEObject;
				T result = caseApplicableDateType(applicableDateType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.APPLICATION_DEVELOPER_TYPE: {
				ApplicationDeveloperType applicationDeveloperType = (ApplicationDeveloperType)theEObject;
				T result = caseApplicationDeveloperType(applicationDeveloperType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.APPLIED_CONDITION_TYPE: {
				AppliedConditionType appliedConditionType = (AppliedConditionType)theEObject;
				T result = caseAppliedConditionType(appliedConditionType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.APPLIED_CONDITION_TYPE1: {
				AppliedConditionType1 appliedConditionType1 = (AppliedConditionType1)theEObject;
				T result = caseAppliedConditionType1(appliedConditionType1);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.APPLIED_LOAD_TYPE: {
				AppliedLoadType appliedLoadType = (AppliedLoadType)theEObject;
				T result = caseAppliedLoadType(appliedLoadType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.APPLIED_VALUE_TYPE: {
				AppliedValueType appliedValueType = (AppliedValueType)theEObject;
				T result = caseAppliedValueType(appliedValueType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.APPROVAL_DATE_TIME_TYPE: {
				ApprovalDateTimeType approvalDateTimeType = (ApprovalDateTimeType)theEObject;
				T result = caseApprovalDateTimeType(approvalDateTimeType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.APPROVAL_TYPE: {
				ApprovalType approvalType = (ApprovalType)theEObject;
				T result = caseApprovalType(approvalType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.APPROVAL_TYPE1: {
				ApprovalType1 approvalType1 = (ApprovalType1)theEObject;
				T result = caseApprovalType1(approvalType1);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.APPROVED_PROPERTIES_TYPE: {
				ApprovedPropertiesType approvedPropertiesType = (ApprovedPropertiesType)theEObject;
				T result = caseApprovedPropertiesType(approvedPropertiesType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.ASSIGNED_ITEMS_TYPE: {
				AssignedItemsType assignedItemsType = (AssignedItemsType)theEObject;
				T result = caseAssignedItemsType(assignedItemsType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.AXIS1_TYPE: {
				Axis1Type axis1Type = (Axis1Type)theEObject;
				T result = caseAxis1Type(axis1Type);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.AXIS2_TYPE: {
				Axis2Type axis2Type = (Axis2Type)theEObject;
				T result = caseAxis2Type(axis2Type);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.AXIS3_TYPE: {
				Axis3Type axis3Type = (Axis3Type)theEObject;
				T result = caseAxis3Type(axis3Type);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.AXIS_CURVE_TYPE: {
				AxisCurveType axisCurveType = (AxisCurveType)theEObject;
				T result = caseAxisCurveType(axisCurveType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.AXIS_POSITION_TYPE: {
				AxisPositionType axisPositionType = (AxisPositionType)theEObject;
				T result = caseAxisPositionType(axisPositionType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.AXIS_TYPE: {
				AxisType axisType = (AxisType)theEObject;
				T result = caseAxisType(axisType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.AXIS_TYPE1: {
				AxisType1 axisType1 = (AxisType1)theEObject;
				T result = caseAxisType1(axisType1);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.AXIS_TYPE2: {
				AxisType2 axisType2 = (AxisType2)theEObject;
				T result = caseAxisType2(axisType2);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.BACKGROUND_COLOUR_TYPE: {
				BackgroundColourType backgroundColourType = (BackgroundColourType)theEObject;
				T result = caseBackgroundColourType(backgroundColourType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.BASE_QUANTITY_TYPE: {
				BaseQuantityType baseQuantityType = (BaseQuantityType)theEObject;
				T result = caseBaseQuantityType(baseQuantityType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.BASE_SURFACE_TYPE: {
				BaseSurfaceType baseSurfaceType = (BaseSurfaceType)theEObject;
				T result = caseBaseSurfaceType(baseSurfaceType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.BASIS_CURVE_TYPE: {
				BasisCurveType basisCurveType = (BasisCurveType)theEObject;
				T result = caseBasisCurveType(basisCurveType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.BASIS_CURVE_TYPE1: {
				BasisCurveType1 basisCurveType1 = (BasisCurveType1)theEObject;
				T result = caseBasisCurveType1(basisCurveType1);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.BASIS_CURVE_TYPE2: {
				BasisCurveType2 basisCurveType2 = (BasisCurveType2)theEObject;
				T result = caseBasisCurveType2(basisCurveType2);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.BASIS_CURVE_TYPE3: {
				BasisCurveType3 basisCurveType3 = (BasisCurveType3)theEObject;
				T result = caseBasisCurveType3(basisCurveType3);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.BASIS_SURFACE_TYPE: {
				BasisSurfaceType basisSurfaceType = (BasisSurfaceType)theEObject;
				T result = caseBasisSurfaceType(basisSurfaceType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.BASIS_SURFACE_TYPE1: {
				BasisSurfaceType1 basisSurfaceType1 = (BasisSurfaceType1)theEObject;
				T result = caseBasisSurfaceType1(basisSurfaceType1);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.BASIS_SURFACE_TYPE2: {
				BasisSurfaceType2 basisSurfaceType2 = (BasisSurfaceType2)theEObject;
				T result = caseBasisSurfaceType2(basisSurfaceType2);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.BENCHMARK_VALUES_TYPE: {
				BenchmarkValuesType benchmarkValuesType = (BenchmarkValuesType)theEObject;
				T result = caseBenchmarkValuesType(benchmarkValuesType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.BOUNDS_TYPE: {
				BoundsType boundsType = (BoundsType)theEObject;
				T result = caseBoundsType(boundsType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.BOUND_TYPE: {
				BoundType boundType = (BoundType)theEObject;
				T result = caseBoundType(boundType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.BUILDING_ADDRESS_TYPE: {
				BuildingAddressType buildingAddressType = (BuildingAddressType)theEObject;
				T result = caseBuildingAddressType(buildingAddressType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.CAUSED_BY_TYPE: {
				CausedByType causedByType = (CausedByType)theEObject;
				T result = caseCausedByType(causedByType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.CFS_FACES_TYPE: {
				CfsFacesType cfsFacesType = (CfsFacesType)theEObject;
				T result = caseCfsFacesType(cfsFacesType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.CHARACTER_SPACING_TYPE: {
				CharacterSpacingType characterSpacingType = (CharacterSpacingType)theEObject;
				T result = caseCharacterSpacingType(characterSpacingType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.CLASSIFIED_CONSTRAINT_TYPE: {
				ClassifiedConstraintType classifiedConstraintType = (ClassifiedConstraintType)theEObject;
				T result = caseClassifiedConstraintType(classifiedConstraintType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.CLASSIFIED_MATERIAL_TYPE: {
				ClassifiedMaterialType classifiedMaterialType = (ClassifiedMaterialType)theEObject;
				T result = caseClassifiedMaterialType(classifiedMaterialType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.COLOUR_APPEARANCE_TYPE: {
				ColourAppearanceType colourAppearanceType = (ColourAppearanceType)theEObject;
				T result = caseColourAppearanceType(colourAppearanceType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.COLOUR_TYPE: {
				ColourType colourType = (ColourType)theEObject;
				T result = caseColourType(colourType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.COMPONENT_OF_TOTAL_TYPE: {
				ComponentOfTotalType componentOfTotalType = (ComponentOfTotalType)theEObject;
				T result = caseComponentOfTotalType(componentOfTotalType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.COMPONENTS_TYPE: {
				ComponentsType componentsType = (ComponentsType)theEObject;
				T result = caseComponentsType(componentsType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.CONDITION_COORDINATE_SYSTEM_TYPE: {
				ConditionCoordinateSystemType conditionCoordinateSystemType = (ConditionCoordinateSystemType)theEObject;
				T result = caseConditionCoordinateSystemType(conditionCoordinateSystemType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.CONNECTION_CONSTRAINT_TYPE: {
				ConnectionConstraintType connectionConstraintType = (ConnectionConstraintType)theEObject;
				T result = caseConnectionConstraintType(connectionConstraintType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.CONNECTION_GEOMETRY_TYPE: {
				ConnectionGeometryType connectionGeometryType = (ConnectionGeometryType)theEObject;
				T result = caseConnectionGeometryType(connectionGeometryType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.CONNECTION_GEOMETRY_TYPE1: {
				ConnectionGeometryType1 connectionGeometryType1 = (ConnectionGeometryType1)theEObject;
				T result = caseConnectionGeometryType1(connectionGeometryType1);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.CONTENTS_TYPE: {
				ContentsType contentsType = (ContentsType)theEObject;
				T result = caseContentsType(contentsType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.CONTEXT_OF_ITEMS_TYPE: {
				ContextOfItemsType contextOfItemsType = (ContextOfItemsType)theEObject;
				T result = caseContextOfItemsType(contextOfItemsType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.CONTROL_POINTS_LIST_TYPE: {
				ControlPointsListType controlPointsListType = (ControlPointsListType)theEObject;
				T result = caseControlPointsListType(controlPointsListType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.CONVERSION_FACTOR_TYPE: {
				ConversionFactorType conversionFactorType = (ConversionFactorType)theEObject;
				T result = caseConversionFactorType(conversionFactorType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.COORDINATES_TYPE: {
				CoordinatesType coordinatesType = (CoordinatesType)theEObject;
				T result = caseCoordinatesType(coordinatesType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.COORDINATES_TYPE1: {
				CoordinatesType1 coordinatesType1 = (CoordinatesType1)theEObject;
				T result = caseCoordinatesType1(coordinatesType1);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.CORNER_TYPE: {
				CornerType cornerType = (CornerType)theEObject;
				T result = caseCornerType(cornerType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.CREATING_ACTOR_TYPE: {
				CreatingActorType creatingActorType = (CreatingActorType)theEObject;
				T result = caseCreatingActorType(creatingActorType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.CREATION_DATE_TYPE: {
				CreationDateType creationDateType = (CreationDateType)theEObject;
				T result = caseCreationDateType(creationDateType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.CREATION_TIME_TYPE: {
				CreationTimeType creationTimeType = (CreationTimeType)theEObject;
				T result = caseCreationTimeType(creationTimeType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.CREATION_TIME_TYPE1: {
				CreationTimeType1 creationTimeType1 = (CreationTimeType1)theEObject;
				T result = caseCreationTimeType1(creationTimeType1);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.CREATORS_TYPE: {
				CreatorsType creatorsType = (CreatorsType)theEObject;
				T result = caseCreatorsType(creatorsType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.CRITERION_DATE_TIME_TYPE: {
				CriterionDateTimeType criterionDateTimeType = (CriterionDateTimeType)theEObject;
				T result = caseCriterionDateTimeType(criterionDateTimeType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.CRITERION_TYPE: {
				CriterionType criterionType = (CriterionType)theEObject;
				T result = caseCriterionType(criterionType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.CROSS_SECTION_POSITIONS_TYPE: {
				CrossSectionPositionsType crossSectionPositionsType = (CrossSectionPositionsType)theEObject;
				T result = caseCrossSectionPositionsType(crossSectionPositionsType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.CROSS_SECTION_REINFORCEMENT_DEFINITIONS_TYPE: {
				CrossSectionReinforcementDefinitionsType crossSectionReinforcementDefinitionsType = (CrossSectionReinforcementDefinitionsType)theEObject;
				T result = caseCrossSectionReinforcementDefinitionsType(crossSectionReinforcementDefinitionsType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.CROSS_SECTIONS_TYPE: {
				CrossSectionsType crossSectionsType = (CrossSectionsType)theEObject;
				T result = caseCrossSectionsType(crossSectionsType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.CURRENT_VALUE_TYPE: {
				CurrentValueType currentValueType = (CurrentValueType)theEObject;
				T result = caseCurrentValueType(currentValueType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.CURRENT_VALUE_TYPE1: {
				CurrentValueType1 currentValueType1 = (CurrentValueType1)theEObject;
				T result = caseCurrentValueType1(currentValueType1);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.CURVE_COLOUR_TYPE: {
				CurveColourType curveColourType = (CurveColourType)theEObject;
				T result = caseCurveColourType(curveColourType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.CURVE_FONT_TYPE: {
				CurveFontType curveFontType = (CurveFontType)theEObject;
				T result = caseCurveFontType(curveFontType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.CURVE_FONT_TYPE1: {
				CurveFontType1 curveFontType1 = (CurveFontType1)theEObject;
				T result = caseCurveFontType1(curveFontType1);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.CURVE_ON_RELATED_ELEMENT_TYPE: {
				CurveOnRelatedElementType curveOnRelatedElementType = (CurveOnRelatedElementType)theEObject;
				T result = caseCurveOnRelatedElementType(curveOnRelatedElementType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.CURVE_ON_RELATING_ELEMENT_TYPE: {
				CurveOnRelatingElementType curveOnRelatingElementType = (CurveOnRelatingElementType)theEObject;
				T result = caseCurveOnRelatingElementType(curveOnRelatingElementType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.CURVE_TYPE: {
				CurveType curveType = (CurveType)theEObject;
				T result = caseCurveType(curveType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.CURVE_WIDTH_TYPE: {
				CurveWidthType curveWidthType = (CurveWidthType)theEObject;
				T result = caseCurveWidthType(curveWidthType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.DATA_VALUE_TYPE: {
				DataValueType dataValueType = (DataValueType)theEObject;
				T result = caseDataValueType(dataValueType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.DATE_COMPONENT_TYPE: {
				DateComponentType dateComponentType = (DateComponentType)theEObject;
				T result = caseDateComponentType(dateComponentType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.DEFINED_UNIT_TYPE: {
				DefinedUnitType definedUnitType = (DefinedUnitType)theEObject;
				T result = caseDefinedUnitType(definedUnitType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.DEFINED_VALUES_TYPE: {
				DefinedValuesType definedValuesType = (DefinedValuesType)theEObject;
				T result = caseDefinedValuesType(definedValuesType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.DEFINING_UNIT_TYPE: {
				DefiningUnitType definingUnitType = (DefiningUnitType)theEObject;
				T result = caseDefiningUnitType(definingUnitType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.DEFINING_VALUES_TYPE: {
				DefiningValuesType definingValuesType = (DefiningValuesType)theEObject;
				T result = caseDefiningValuesType(definingValuesType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.DEFINITION_TYPE: {
				DefinitionType definitionType = (DefinitionType)theEObject;
				T result = caseDefinitionType(definitionType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.DEPENDANT_PROPERTY_TYPE: {
				DependantPropertyType dependantPropertyType = (DependantPropertyType)theEObject;
				T result = caseDependantPropertyType(dependantPropertyType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.DEPENDING_PROPERTY_TYPE: {
				DependingPropertyType dependingPropertyType = (DependingPropertyType)theEObject;
				T result = caseDependingPropertyType(dependingPropertyType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.DEPRECIATED_VALUE_TYPE: {
				DepreciatedValueType depreciatedValueType = (DepreciatedValueType)theEObject;
				T result = caseDepreciatedValueType(depreciatedValueType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.DIFFUSE_COLOUR_TYPE: {
				DiffuseColourType diffuseColourType = (DiffuseColourType)theEObject;
				T result = caseDiffuseColourType(diffuseColourType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.DIFFUSE_REFLECTION_COLOUR_TYPE: {
				DiffuseReflectionColourType diffuseReflectionColourType = (DiffuseReflectionColourType)theEObject;
				T result = caseDiffuseReflectionColourType(diffuseReflectionColourType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.DIFFUSE_TRANSMISSION_COLOUR_TYPE: {
				DiffuseTransmissionColourType diffuseTransmissionColourType = (DiffuseTransmissionColourType)theEObject;
				T result = caseDiffuseTransmissionColourType(diffuseTransmissionColourType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.DIFFUSE_TRANSMISSION_COLOUR_TYPE1: {
				DiffuseTransmissionColourType1 diffuseTransmissionColourType1 = (DiffuseTransmissionColourType1)theEObject;
				T result = caseDiffuseTransmissionColourType1(diffuseTransmissionColourType1);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.DIMENSIONS_TYPE: {
				DimensionsType dimensionsType = (DimensionsType)theEObject;
				T result = caseDimensionsType(dimensionsType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.DIRECTION_RATIOS_TYPE: {
				DirectionRatiosType directionRatiosType = (DirectionRatiosType)theEObject;
				T result = caseDirectionRatiosType(directionRatiosType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.DIRECTRIX_TYPE: {
				DirectrixType directrixType = (DirectrixType)theEObject;
				T result = caseDirectrixType(directrixType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.DIRECTRIX_TYPE1: {
				DirectrixType1 directrixType1 = (DirectrixType1)theEObject;
				T result = caseDirectrixType1(directrixType1);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.DIR_TYPE: {
				DirType dirType = (DirType)theEObject;
				T result = caseDirType(dirType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.DISTRIBUTION_DATA_TYPE: {
				DistributionDataType distributionDataType = (DistributionDataType)theEObject;
				T result = caseDistributionDataType(distributionDataType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.DOCUMENT_OWNER_TYPE: {
				DocumentOwnerType documentOwnerType = (DocumentOwnerType)theEObject;
				T result = caseDocumentOwnerType(documentOwnerType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.DOCUMENT_REFERENCES_TYPE: {
				DocumentReferencesType documentReferencesType = (DocumentReferencesType)theEObject;
				T result = caseDocumentReferencesType(documentReferencesType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.DOCUMENT_ROOT: {
				DocumentRoot documentRoot = (DocumentRoot)theEObject;
				T result = caseDocumentRoot(documentRoot);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.EARLY_FINISH_TYPE: {
				EarlyFinishType earlyFinishType = (EarlyFinishType)theEObject;
				T result = caseEarlyFinishType(earlyFinishType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.EARLY_START_TYPE: {
				EarlyStartType earlyStartType = (EarlyStartType)theEObject;
				T result = caseEarlyStartType(earlyStartType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.EDGE_ELEMENT_TYPE: {
				EdgeElementType edgeElementType = (EdgeElementType)theEObject;
				T result = caseEdgeElementType(edgeElementType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.EDGE_END_TYPE: {
				EdgeEndType edgeEndType = (EdgeEndType)theEObject;
				T result = caseEdgeEndType(edgeEndType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.EDGE_GEOMETRY_TYPE: {
				EdgeGeometryType edgeGeometryType = (EdgeGeometryType)theEObject;
				T result = caseEdgeGeometryType(edgeGeometryType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.EDGE_LIST_TYPE: {
				EdgeListType edgeListType = (EdgeListType)theEObject;
				T result = caseEdgeListType(edgeListType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.EDGE_LIST_TYPE1: {
				EdgeListType1 edgeListType1 = (EdgeListType1)theEObject;
				T result = caseEdgeListType1(edgeListType1);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.EDGE_START_TYPE: {
				EdgeStartType edgeStartType = (EdgeStartType)theEObject;
				T result = caseEdgeStartType(edgeStartType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.EDITION_DATE_TYPE: {
				EditionDateType editionDateType = (EditionDateType)theEObject;
				T result = caseEditionDateType(editionDateType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.EDITORS_TYPE: {
				EditorsType editorsType = (EditorsType)theEObject;
				T result = caseEditorsType(editorsType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.ELECTRONIC_FORMAT_TYPE: {
				ElectronicFormatType electronicFormatType = (ElectronicFormatType)theEObject;
				T result = caseElectronicFormatType(electronicFormatType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.ELECTRONIC_MAIL_ADDRESSES_TYPE: {
				ElectronicMailAddressesType electronicMailAddressesType = (ElectronicMailAddressesType)theEObject;
				T result = caseElectronicMailAddressesType(electronicMailAddressesType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.ELEMENTS_TYPE: {
				ElementsType elementsType = (ElementsType)theEObject;
				T result = caseElementsType(elementsType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.ELEMENTS_TYPE1: {
				ElementsType1 elementsType1 = (ElementsType1)theEObject;
				T result = caseElementsType1(elementsType1);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.ENCLOSURE_TYPE: {
				EnclosureType enclosureType = (EnclosureType)theEObject;
				T result = caseEnclosureType(enclosureType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.END_PROFILE_TYPE: {
				EndProfileType endProfileType = (EndProfileType)theEObject;
				T result = caseEndProfileType(endProfileType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.END_TIME_TYPE: {
				EndTimeType endTimeType = (EndTimeType)theEObject;
				T result = caseEndTimeType(endTimeType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.ENUMERATION_REFERENCE_TYPE: {
				EnumerationReferenceType enumerationReferenceType = (EnumerationReferenceType)theEObject;
				T result = caseEnumerationReferenceType(enumerationReferenceType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.ENUMERATION_VALUES_TYPE: {
				EnumerationValuesType enumerationValuesType = (EnumerationValuesType)theEObject;
				T result = caseEnumerationValuesType(enumerationValuesType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.ENUMERATION_VALUES_TYPE1: {
				EnumerationValuesType1 enumerationValuesType1 = (EnumerationValuesType1)theEObject;
				T result = caseEnumerationValuesType1(enumerationValuesType1);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.EXTENDED_PROPERTIES_TYPE: {
				ExtendedPropertiesType extendedPropertiesType = (ExtendedPropertiesType)theEObject;
				T result = caseExtendedPropertiesType(extendedPropertiesType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.EXTENT_TYPE: {
				ExtentType extentType = (ExtentType)theEObject;
				T result = caseExtentType(extentType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.EXTRUDED_DIRECTION_TYPE: {
				ExtrudedDirectionType extrudedDirectionType = (ExtrudedDirectionType)theEObject;
				T result = caseExtrudedDirectionType(extrudedDirectionType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.EXTRUDED_DIRECTION_TYPE1: {
				ExtrudedDirectionType1 extrudedDirectionType1 = (ExtrudedDirectionType1)theEObject;
				T result = caseExtrudedDirectionType1(extrudedDirectionType1);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.FACE_SURFACE_TYPE: {
				FaceSurfaceType faceSurfaceType = (FaceSurfaceType)theEObject;
				T result = caseFaceSurfaceType(faceSurfaceType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.FACSIMILE_NUMBERS_TYPE: {
				FacsimileNumbersType facsimileNumbersType = (FacsimileNumbersType)theEObject;
				T result = caseFacsimileNumbersType(facsimileNumbersType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.FBSM_FACES_TYPE: {
				FbsmFacesType fbsmFacesType = (FbsmFacesType)theEObject;
				T result = caseFbsmFacesType(fbsmFacesType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.FILL_STYLES_TYPE: {
				FillStylesType fillStylesType = (FillStylesType)theEObject;
				T result = caseFillStylesType(fillStylesType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.FILL_STYLE_TARGET_TYPE: {
				FillStyleTargetType fillStyleTargetType = (FillStyleTargetType)theEObject;
				T result = caseFillStyleTargetType(fillStyleTargetType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.FINISH_TIME_TYPE: {
				FinishTimeType finishTimeType = (FinishTimeType)theEObject;
				T result = caseFinishTimeType(finishTimeType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.FIRST_OPERAND_TYPE: {
				FirstOperandType firstOperandType = (FirstOperandType)theEObject;
				T result = caseFirstOperandType(firstOperandType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.FIXED_UNTIL_DATE_TYPE: {
				FixedUntilDateType fixedUntilDateType = (FixedUntilDateType)theEObject;
				T result = caseFixedUntilDateType(fixedUntilDateType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.FLOW_CONDITION_TIME_SERIES_TYPE: {
				FlowConditionTimeSeriesType flowConditionTimeSeriesType = (FlowConditionTimeSeriesType)theEObject;
				T result = caseFlowConditionTimeSeriesType(flowConditionTimeSeriesType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.FLOWRATE_SINGLE_VALUE_TYPE: {
				FlowrateSingleValueType flowrateSingleValueType = (FlowrateSingleValueType)theEObject;
				T result = caseFlowrateSingleValueType(flowrateSingleValueType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.FLOWRATE_TIME_SERIES_TYPE: {
				FlowrateTimeSeriesType flowrateTimeSeriesType = (FlowrateTimeSeriesType)theEObject;
				T result = caseFlowrateTimeSeriesType(flowrateTimeSeriesType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.FLUID_TYPE: {
				FluidType fluidType = (FluidType)theEObject;
				T result = caseFluidType(fluidType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.FONT_FAMILY_TYPE: {
				FontFamilyType fontFamilyType = (FontFamilyType)theEObject;
				T result = caseFontFamilyType(fontFamilyType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.FONT_SIZE_TYPE: {
				FontSizeType fontSizeType = (FontSizeType)theEObject;
				T result = caseFontSizeType(fontSizeType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.FOR_LAYER_SET_TYPE: {
				ForLayerSetType forLayerSetType = (ForLayerSetType)theEObject;
				T result = caseForLayerSetType(forLayerSetType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.HAS_PROPERTIES_TYPE: {
				HasPropertiesType hasPropertiesType = (HasPropertiesType)theEObject;
				T result = caseHasPropertiesType(hasPropertiesType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.HAS_PROPERTIES_TYPE1: {
				HasPropertiesType1 hasPropertiesType1 = (HasPropertiesType1)theEObject;
				T result = caseHasPropertiesType1(hasPropertiesType1);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.HAS_PROPERTY_SETS_TYPE: {
				HasPropertySetsType hasPropertySetsType = (HasPropertySetsType)theEObject;
				T result = caseHasPropertySetsType(hasPropertySetsType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.HAS_QUANTITIES_TYPE: {
				HasQuantitiesType hasQuantitiesType = (HasQuantitiesType)theEObject;
				T result = caseHasQuantitiesType(hasQuantitiesType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.HAS_RESULTS_TYPE: {
				HasResultsType hasResultsType = (HasResultsType)theEObject;
				T result = caseHasResultsType(hasResultsType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.HATCH_LINE_APPEARANCE_TYPE: {
				HatchLineAppearanceType hatchLineAppearanceType = (HatchLineAppearanceType)theEObject;
				T result = caseHatchLineAppearanceType(hatchLineAppearanceType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC2_DCOMPOSITE_CURVE: {
				Ifc2DCompositeCurve ifc2DCompositeCurve = (Ifc2DCompositeCurve)theEObject;
				T result = caseIfc2DCompositeCurve(ifc2DCompositeCurve);
				if (result == null) result = caseIfcCompositeCurve(ifc2DCompositeCurve);
				if (result == null) result = caseIfcBoundedCurve(ifc2DCompositeCurve);
				if (result == null) result = caseIfcCurve(ifc2DCompositeCurve);
				if (result == null) result = caseIfcGeometricRepresentationItem(ifc2DCompositeCurve);
				if (result == null) result = caseIfcRepresentationItem(ifc2DCompositeCurve);
				if (result == null) result = caseEntity(ifc2DCompositeCurve);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_ABSORBED_DOSE_MEASURE_TYPE: {
				IfcAbsorbedDoseMeasureType ifcAbsorbedDoseMeasureType = (IfcAbsorbedDoseMeasureType)theEObject;
				T result = caseIfcAbsorbedDoseMeasureType(ifcAbsorbedDoseMeasureType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_ACCELERATION_MEASURE_TYPE: {
				IfcAccelerationMeasureType ifcAccelerationMeasureType = (IfcAccelerationMeasureType)theEObject;
				T result = caseIfcAccelerationMeasureType(ifcAccelerationMeasureType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_ACTION_REQUEST: {
				IfcActionRequest ifcActionRequest = (IfcActionRequest)theEObject;
				T result = caseIfcActionRequest(ifcActionRequest);
				if (result == null) result = caseIfcControl(ifcActionRequest);
				if (result == null) result = caseIfcObject(ifcActionRequest);
				if (result == null) result = caseIfcObjectDefinition(ifcActionRequest);
				if (result == null) result = caseIfcRoot(ifcActionRequest);
				if (result == null) result = caseEntity(ifcActionRequest);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_ACTION_SOURCE_TYPE_ENUM_TYPE: {
				IfcActionSourceTypeEnumType ifcActionSourceTypeEnumType = (IfcActionSourceTypeEnumType)theEObject;
				T result = caseIfcActionSourceTypeEnumType(ifcActionSourceTypeEnumType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_ACTION_TYPE_ENUM_TYPE: {
				IfcActionTypeEnumType ifcActionTypeEnumType = (IfcActionTypeEnumType)theEObject;
				T result = caseIfcActionTypeEnumType(ifcActionTypeEnumType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_ACTOR: {
				IfcActor ifcActor = (IfcActor)theEObject;
				T result = caseIfcActor(ifcActor);
				if (result == null) result = caseIfcObject(ifcActor);
				if (result == null) result = caseIfcObjectDefinition(ifcActor);
				if (result == null) result = caseIfcRoot(ifcActor);
				if (result == null) result = caseEntity(ifcActor);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_ACTOR_ROLE: {
				IfcActorRole ifcActorRole = (IfcActorRole)theEObject;
				T result = caseIfcActorRole(ifcActorRole);
				if (result == null) result = caseEntity(ifcActorRole);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_ACTOR_SELECT: {
				IfcActorSelect ifcActorSelect = (IfcActorSelect)theEObject;
				T result = caseIfcActorSelect(ifcActorSelect);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_ACTUATOR_TYPE: {
				IfcActuatorType ifcActuatorType = (IfcActuatorType)theEObject;
				T result = caseIfcActuatorType(ifcActuatorType);
				if (result == null) result = caseIfcDistributionControlElementType(ifcActuatorType);
				if (result == null) result = caseIfcDistributionElementType(ifcActuatorType);
				if (result == null) result = caseIfcElementType(ifcActuatorType);
				if (result == null) result = caseIfcTypeProduct(ifcActuatorType);
				if (result == null) result = caseIfcTypeObject(ifcActuatorType);
				if (result == null) result = caseIfcObjectDefinition(ifcActuatorType);
				if (result == null) result = caseIfcRoot(ifcActuatorType);
				if (result == null) result = caseEntity(ifcActuatorType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_ACTUATOR_TYPE_ENUM_TYPE: {
				IfcActuatorTypeEnumType ifcActuatorTypeEnumType = (IfcActuatorTypeEnumType)theEObject;
				T result = caseIfcActuatorTypeEnumType(ifcActuatorTypeEnumType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_ADDRESS: {
				IfcAddress ifcAddress = (IfcAddress)theEObject;
				T result = caseIfcAddress(ifcAddress);
				if (result == null) result = caseEntity(ifcAddress);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_ADDRESS_TYPE_ENUM_TYPE: {
				IfcAddressTypeEnumType ifcAddressTypeEnumType = (IfcAddressTypeEnumType)theEObject;
				T result = caseIfcAddressTypeEnumType(ifcAddressTypeEnumType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_AHEAD_OR_BEHIND_TYPE: {
				IfcAheadOrBehindType ifcAheadOrBehindType = (IfcAheadOrBehindType)theEObject;
				T result = caseIfcAheadOrBehindType(ifcAheadOrBehindType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_AIR_TERMINAL_BOX_TYPE: {
				IfcAirTerminalBoxType ifcAirTerminalBoxType = (IfcAirTerminalBoxType)theEObject;
				T result = caseIfcAirTerminalBoxType(ifcAirTerminalBoxType);
				if (result == null) result = caseIfcFlowControllerType(ifcAirTerminalBoxType);
				if (result == null) result = caseIfcDistributionFlowElementType(ifcAirTerminalBoxType);
				if (result == null) result = caseIfcDistributionElementType(ifcAirTerminalBoxType);
				if (result == null) result = caseIfcElementType(ifcAirTerminalBoxType);
				if (result == null) result = caseIfcTypeProduct(ifcAirTerminalBoxType);
				if (result == null) result = caseIfcTypeObject(ifcAirTerminalBoxType);
				if (result == null) result = caseIfcObjectDefinition(ifcAirTerminalBoxType);
				if (result == null) result = caseIfcRoot(ifcAirTerminalBoxType);
				if (result == null) result = caseEntity(ifcAirTerminalBoxType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_AIR_TERMINAL_BOX_TYPE_ENUM_TYPE: {
				IfcAirTerminalBoxTypeEnumType ifcAirTerminalBoxTypeEnumType = (IfcAirTerminalBoxTypeEnumType)theEObject;
				T result = caseIfcAirTerminalBoxTypeEnumType(ifcAirTerminalBoxTypeEnumType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_AIR_TERMINAL_TYPE: {
				IfcAirTerminalType ifcAirTerminalType = (IfcAirTerminalType)theEObject;
				T result = caseIfcAirTerminalType(ifcAirTerminalType);
				if (result == null) result = caseIfcFlowTerminalType(ifcAirTerminalType);
				if (result == null) result = caseIfcDistributionFlowElementType(ifcAirTerminalType);
				if (result == null) result = caseIfcDistributionElementType(ifcAirTerminalType);
				if (result == null) result = caseIfcElementType(ifcAirTerminalType);
				if (result == null) result = caseIfcTypeProduct(ifcAirTerminalType);
				if (result == null) result = caseIfcTypeObject(ifcAirTerminalType);
				if (result == null) result = caseIfcObjectDefinition(ifcAirTerminalType);
				if (result == null) result = caseIfcRoot(ifcAirTerminalType);
				if (result == null) result = caseEntity(ifcAirTerminalType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_AIR_TERMINAL_TYPE_ENUM_TYPE: {
				IfcAirTerminalTypeEnumType ifcAirTerminalTypeEnumType = (IfcAirTerminalTypeEnumType)theEObject;
				T result = caseIfcAirTerminalTypeEnumType(ifcAirTerminalTypeEnumType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_AIR_TO_AIR_HEAT_RECOVERY_TYPE: {
				IfcAirToAirHeatRecoveryType ifcAirToAirHeatRecoveryType = (IfcAirToAirHeatRecoveryType)theEObject;
				T result = caseIfcAirToAirHeatRecoveryType(ifcAirToAirHeatRecoveryType);
				if (result == null) result = caseIfcEnergyConversionDeviceType(ifcAirToAirHeatRecoveryType);
				if (result == null) result = caseIfcDistributionFlowElementType(ifcAirToAirHeatRecoveryType);
				if (result == null) result = caseIfcDistributionElementType(ifcAirToAirHeatRecoveryType);
				if (result == null) result = caseIfcElementType(ifcAirToAirHeatRecoveryType);
				if (result == null) result = caseIfcTypeProduct(ifcAirToAirHeatRecoveryType);
				if (result == null) result = caseIfcTypeObject(ifcAirToAirHeatRecoveryType);
				if (result == null) result = caseIfcObjectDefinition(ifcAirToAirHeatRecoveryType);
				if (result == null) result = caseIfcRoot(ifcAirToAirHeatRecoveryType);
				if (result == null) result = caseEntity(ifcAirToAirHeatRecoveryType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_AIR_TO_AIR_HEAT_RECOVERY_TYPE_ENUM_TYPE: {
				IfcAirToAirHeatRecoveryTypeEnumType ifcAirToAirHeatRecoveryTypeEnumType = (IfcAirToAirHeatRecoveryTypeEnumType)theEObject;
				T result = caseIfcAirToAirHeatRecoveryTypeEnumType(ifcAirToAirHeatRecoveryTypeEnumType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_ALARM_TYPE: {
				IfcAlarmType ifcAlarmType = (IfcAlarmType)theEObject;
				T result = caseIfcAlarmType(ifcAlarmType);
				if (result == null) result = caseIfcDistributionControlElementType(ifcAlarmType);
				if (result == null) result = caseIfcDistributionElementType(ifcAlarmType);
				if (result == null) result = caseIfcElementType(ifcAlarmType);
				if (result == null) result = caseIfcTypeProduct(ifcAlarmType);
				if (result == null) result = caseIfcTypeObject(ifcAlarmType);
				if (result == null) result = caseIfcObjectDefinition(ifcAlarmType);
				if (result == null) result = caseIfcRoot(ifcAlarmType);
				if (result == null) result = caseEntity(ifcAlarmType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_ALARM_TYPE_ENUM_TYPE: {
				IfcAlarmTypeEnumType ifcAlarmTypeEnumType = (IfcAlarmTypeEnumType)theEObject;
				T result = caseIfcAlarmTypeEnumType(ifcAlarmTypeEnumType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_AMOUNT_OF_SUBSTANCE_MEASURE_TYPE: {
				IfcAmountOfSubstanceMeasureType ifcAmountOfSubstanceMeasureType = (IfcAmountOfSubstanceMeasureType)theEObject;
				T result = caseIfcAmountOfSubstanceMeasureType(ifcAmountOfSubstanceMeasureType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_ANALYSIS_MODEL_TYPE_ENUM_TYPE: {
				IfcAnalysisModelTypeEnumType ifcAnalysisModelTypeEnumType = (IfcAnalysisModelTypeEnumType)theEObject;
				T result = caseIfcAnalysisModelTypeEnumType(ifcAnalysisModelTypeEnumType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_ANALYSIS_THEORY_TYPE_ENUM_TYPE: {
				IfcAnalysisTheoryTypeEnumType ifcAnalysisTheoryTypeEnumType = (IfcAnalysisTheoryTypeEnumType)theEObject;
				T result = caseIfcAnalysisTheoryTypeEnumType(ifcAnalysisTheoryTypeEnumType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_ANGULAR_DIMENSION: {
				IfcAngularDimension ifcAngularDimension = (IfcAngularDimension)theEObject;
				T result = caseIfcAngularDimension(ifcAngularDimension);
				if (result == null) result = caseIfcDimensionCurveDirectedCallout(ifcAngularDimension);
				if (result == null) result = caseIfcDraughtingCallout(ifcAngularDimension);
				if (result == null) result = caseIfcGeometricRepresentationItem(ifcAngularDimension);
				if (result == null) result = caseIfcRepresentationItem(ifcAngularDimension);
				if (result == null) result = caseEntity(ifcAngularDimension);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_ANGULAR_VELOCITY_MEASURE_TYPE: {
				IfcAngularVelocityMeasureType ifcAngularVelocityMeasureType = (IfcAngularVelocityMeasureType)theEObject;
				T result = caseIfcAngularVelocityMeasureType(ifcAngularVelocityMeasureType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_ANNOTATION: {
				IfcAnnotation ifcAnnotation = (IfcAnnotation)theEObject;
				T result = caseIfcAnnotation(ifcAnnotation);
				if (result == null) result = caseIfcProduct(ifcAnnotation);
				if (result == null) result = caseIfcObject(ifcAnnotation);
				if (result == null) result = caseIfcObjectDefinition(ifcAnnotation);
				if (result == null) result = caseIfcRoot(ifcAnnotation);
				if (result == null) result = caseEntity(ifcAnnotation);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_ANNOTATION_CURVE_OCCURRENCE: {
				IfcAnnotationCurveOccurrence ifcAnnotationCurveOccurrence = (IfcAnnotationCurveOccurrence)theEObject;
				T result = caseIfcAnnotationCurveOccurrence(ifcAnnotationCurveOccurrence);
				if (result == null) result = caseIfcAnnotationOccurrence(ifcAnnotationCurveOccurrence);
				if (result == null) result = caseIfcStyledItem(ifcAnnotationCurveOccurrence);
				if (result == null) result = caseIfcRepresentationItem(ifcAnnotationCurveOccurrence);
				if (result == null) result = caseEntity(ifcAnnotationCurveOccurrence);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_ANNOTATION_FILL_AREA: {
				IfcAnnotationFillArea ifcAnnotationFillArea = (IfcAnnotationFillArea)theEObject;
				T result = caseIfcAnnotationFillArea(ifcAnnotationFillArea);
				if (result == null) result = caseIfcGeometricRepresentationItem(ifcAnnotationFillArea);
				if (result == null) result = caseIfcRepresentationItem(ifcAnnotationFillArea);
				if (result == null) result = caseEntity(ifcAnnotationFillArea);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_ANNOTATION_FILL_AREA_OCCURRENCE: {
				IfcAnnotationFillAreaOccurrence ifcAnnotationFillAreaOccurrence = (IfcAnnotationFillAreaOccurrence)theEObject;
				T result = caseIfcAnnotationFillAreaOccurrence(ifcAnnotationFillAreaOccurrence);
				if (result == null) result = caseIfcAnnotationOccurrence(ifcAnnotationFillAreaOccurrence);
				if (result == null) result = caseIfcStyledItem(ifcAnnotationFillAreaOccurrence);
				if (result == null) result = caseIfcRepresentationItem(ifcAnnotationFillAreaOccurrence);
				if (result == null) result = caseEntity(ifcAnnotationFillAreaOccurrence);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_ANNOTATION_OCCURRENCE: {
				IfcAnnotationOccurrence ifcAnnotationOccurrence = (IfcAnnotationOccurrence)theEObject;
				T result = caseIfcAnnotationOccurrence(ifcAnnotationOccurrence);
				if (result == null) result = caseIfcStyledItem(ifcAnnotationOccurrence);
				if (result == null) result = caseIfcRepresentationItem(ifcAnnotationOccurrence);
				if (result == null) result = caseEntity(ifcAnnotationOccurrence);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_ANNOTATION_SURFACE: {
				IfcAnnotationSurface ifcAnnotationSurface = (IfcAnnotationSurface)theEObject;
				T result = caseIfcAnnotationSurface(ifcAnnotationSurface);
				if (result == null) result = caseIfcGeometricRepresentationItem(ifcAnnotationSurface);
				if (result == null) result = caseIfcRepresentationItem(ifcAnnotationSurface);
				if (result == null) result = caseEntity(ifcAnnotationSurface);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_ANNOTATION_SURFACE_OCCURRENCE: {
				IfcAnnotationSurfaceOccurrence ifcAnnotationSurfaceOccurrence = (IfcAnnotationSurfaceOccurrence)theEObject;
				T result = caseIfcAnnotationSurfaceOccurrence(ifcAnnotationSurfaceOccurrence);
				if (result == null) result = caseIfcAnnotationOccurrence(ifcAnnotationSurfaceOccurrence);
				if (result == null) result = caseIfcStyledItem(ifcAnnotationSurfaceOccurrence);
				if (result == null) result = caseIfcRepresentationItem(ifcAnnotationSurfaceOccurrence);
				if (result == null) result = caseEntity(ifcAnnotationSurfaceOccurrence);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_ANNOTATION_SYMBOL_OCCURRENCE: {
				IfcAnnotationSymbolOccurrence ifcAnnotationSymbolOccurrence = (IfcAnnotationSymbolOccurrence)theEObject;
				T result = caseIfcAnnotationSymbolOccurrence(ifcAnnotationSymbolOccurrence);
				if (result == null) result = caseIfcAnnotationOccurrence(ifcAnnotationSymbolOccurrence);
				if (result == null) result = caseIfcStyledItem(ifcAnnotationSymbolOccurrence);
				if (result == null) result = caseIfcRepresentationItem(ifcAnnotationSymbolOccurrence);
				if (result == null) result = caseEntity(ifcAnnotationSymbolOccurrence);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_ANNOTATION_TEXT_OCCURRENCE: {
				IfcAnnotationTextOccurrence ifcAnnotationTextOccurrence = (IfcAnnotationTextOccurrence)theEObject;
				T result = caseIfcAnnotationTextOccurrence(ifcAnnotationTextOccurrence);
				if (result == null) result = caseIfcAnnotationOccurrence(ifcAnnotationTextOccurrence);
				if (result == null) result = caseIfcStyledItem(ifcAnnotationTextOccurrence);
				if (result == null) result = caseIfcRepresentationItem(ifcAnnotationTextOccurrence);
				if (result == null) result = caseEntity(ifcAnnotationTextOccurrence);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_APPLICATION: {
				IfcApplication ifcApplication = (IfcApplication)theEObject;
				T result = caseIfcApplication(ifcApplication);
				if (result == null) result = caseEntity(ifcApplication);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_APPLIED_VALUE: {
				IfcAppliedValue ifcAppliedValue = (IfcAppliedValue)theEObject;
				T result = caseIfcAppliedValue(ifcAppliedValue);
				if (result == null) result = caseEntity(ifcAppliedValue);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_APPLIED_VALUE_RELATIONSHIP: {
				IfcAppliedValueRelationship ifcAppliedValueRelationship = (IfcAppliedValueRelationship)theEObject;
				T result = caseIfcAppliedValueRelationship(ifcAppliedValueRelationship);
				if (result == null) result = caseEntity(ifcAppliedValueRelationship);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_APPLIED_VALUE_SELECT: {
				IfcAppliedValueSelect ifcAppliedValueSelect = (IfcAppliedValueSelect)theEObject;
				T result = caseIfcAppliedValueSelect(ifcAppliedValueSelect);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_APPROVAL: {
				IfcApproval ifcApproval = (IfcApproval)theEObject;
				T result = caseIfcApproval(ifcApproval);
				if (result == null) result = caseEntity(ifcApproval);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_APPROVAL_ACTOR_RELATIONSHIP: {
				IfcApprovalActorRelationship ifcApprovalActorRelationship = (IfcApprovalActorRelationship)theEObject;
				T result = caseIfcApprovalActorRelationship(ifcApprovalActorRelationship);
				if (result == null) result = caseEntity(ifcApprovalActorRelationship);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_APPROVAL_PROPERTY_RELATIONSHIP: {
				IfcApprovalPropertyRelationship ifcApprovalPropertyRelationship = (IfcApprovalPropertyRelationship)theEObject;
				T result = caseIfcApprovalPropertyRelationship(ifcApprovalPropertyRelationship);
				if (result == null) result = caseEntity(ifcApprovalPropertyRelationship);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_APPROVAL_RELATIONSHIP: {
				IfcApprovalRelationship ifcApprovalRelationship = (IfcApprovalRelationship)theEObject;
				T result = caseIfcApprovalRelationship(ifcApprovalRelationship);
				if (result == null) result = caseEntity(ifcApprovalRelationship);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_ARBITRARY_CLOSED_PROFILE_DEF: {
				IfcArbitraryClosedProfileDef ifcArbitraryClosedProfileDef = (IfcArbitraryClosedProfileDef)theEObject;
				T result = caseIfcArbitraryClosedProfileDef(ifcArbitraryClosedProfileDef);
				if (result == null) result = caseIfcProfileDef(ifcArbitraryClosedProfileDef);
				if (result == null) result = caseEntity(ifcArbitraryClosedProfileDef);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_ARBITRARY_OPEN_PROFILE_DEF: {
				IfcArbitraryOpenProfileDef ifcArbitraryOpenProfileDef = (IfcArbitraryOpenProfileDef)theEObject;
				T result = caseIfcArbitraryOpenProfileDef(ifcArbitraryOpenProfileDef);
				if (result == null) result = caseIfcProfileDef(ifcArbitraryOpenProfileDef);
				if (result == null) result = caseEntity(ifcArbitraryOpenProfileDef);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_ARBITRARY_PROFILE_DEF_WITH_VOIDS: {
				IfcArbitraryProfileDefWithVoids ifcArbitraryProfileDefWithVoids = (IfcArbitraryProfileDefWithVoids)theEObject;
				T result = caseIfcArbitraryProfileDefWithVoids(ifcArbitraryProfileDefWithVoids);
				if (result == null) result = caseIfcArbitraryClosedProfileDef(ifcArbitraryProfileDefWithVoids);
				if (result == null) result = caseIfcProfileDef(ifcArbitraryProfileDefWithVoids);
				if (result == null) result = caseEntity(ifcArbitraryProfileDefWithVoids);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_AREA_MEASURE_TYPE: {
				IfcAreaMeasureType ifcAreaMeasureType = (IfcAreaMeasureType)theEObject;
				T result = caseIfcAreaMeasureType(ifcAreaMeasureType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_ARITHMETIC_OPERATOR_ENUM_TYPE: {
				IfcArithmeticOperatorEnumType ifcArithmeticOperatorEnumType = (IfcArithmeticOperatorEnumType)theEObject;
				T result = caseIfcArithmeticOperatorEnumType(ifcArithmeticOperatorEnumType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_ASSEMBLY_PLACE_ENUM_TYPE: {
				IfcAssemblyPlaceEnumType ifcAssemblyPlaceEnumType = (IfcAssemblyPlaceEnumType)theEObject;
				T result = caseIfcAssemblyPlaceEnumType(ifcAssemblyPlaceEnumType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_ASSET: {
				IfcAsset ifcAsset = (IfcAsset)theEObject;
				T result = caseIfcAsset(ifcAsset);
				if (result == null) result = caseIfcGroup(ifcAsset);
				if (result == null) result = caseIfcObject(ifcAsset);
				if (result == null) result = caseIfcObjectDefinition(ifcAsset);
				if (result == null) result = caseIfcRoot(ifcAsset);
				if (result == null) result = caseEntity(ifcAsset);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_ASYMMETRIC_ISHAPE_PROFILE_DEF: {
				IfcAsymmetricIShapeProfileDef ifcAsymmetricIShapeProfileDef = (IfcAsymmetricIShapeProfileDef)theEObject;
				T result = caseIfcAsymmetricIShapeProfileDef(ifcAsymmetricIShapeProfileDef);
				if (result == null) result = caseIfcIShapeProfileDef(ifcAsymmetricIShapeProfileDef);
				if (result == null) result = caseIfcParameterizedProfileDef(ifcAsymmetricIShapeProfileDef);
				if (result == null) result = caseIfcProfileDef(ifcAsymmetricIShapeProfileDef);
				if (result == null) result = caseEntity(ifcAsymmetricIShapeProfileDef);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_AXIS1_PLACEMENT: {
				IfcAxis1Placement ifcAxis1Placement = (IfcAxis1Placement)theEObject;
				T result = caseIfcAxis1Placement(ifcAxis1Placement);
				if (result == null) result = caseIfcPlacement(ifcAxis1Placement);
				if (result == null) result = caseIfcGeometricRepresentationItem(ifcAxis1Placement);
				if (result == null) result = caseIfcRepresentationItem(ifcAxis1Placement);
				if (result == null) result = caseEntity(ifcAxis1Placement);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_AXIS2_PLACEMENT: {
				IfcAxis2Placement ifcAxis2Placement = (IfcAxis2Placement)theEObject;
				T result = caseIfcAxis2Placement(ifcAxis2Placement);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_AXIS2_PLACEMENT2_D: {
				IfcAxis2Placement2D ifcAxis2Placement2D = (IfcAxis2Placement2D)theEObject;
				T result = caseIfcAxis2Placement2D(ifcAxis2Placement2D);
				if (result == null) result = caseIfcPlacement(ifcAxis2Placement2D);
				if (result == null) result = caseIfcGeometricRepresentationItem(ifcAxis2Placement2D);
				if (result == null) result = caseIfcRepresentationItem(ifcAxis2Placement2D);
				if (result == null) result = caseEntity(ifcAxis2Placement2D);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_AXIS2_PLACEMENT3_D: {
				IfcAxis2Placement3D ifcAxis2Placement3D = (IfcAxis2Placement3D)theEObject;
				T result = caseIfcAxis2Placement3D(ifcAxis2Placement3D);
				if (result == null) result = caseIfcPlacement(ifcAxis2Placement3D);
				if (result == null) result = caseIfcGeometricRepresentationItem(ifcAxis2Placement3D);
				if (result == null) result = caseIfcRepresentationItem(ifcAxis2Placement3D);
				if (result == null) result = caseEntity(ifcAxis2Placement3D);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_BEAM: {
				IfcBeam ifcBeam = (IfcBeam)theEObject;
				T result = caseIfcBeam(ifcBeam);
				if (result == null) result = caseIfcBuildingElement(ifcBeam);
				if (result == null) result = caseIfcElement(ifcBeam);
				if (result == null) result = caseIfcProduct(ifcBeam);
				if (result == null) result = caseIfcObject(ifcBeam);
				if (result == null) result = caseIfcObjectDefinition(ifcBeam);
				if (result == null) result = caseIfcRoot(ifcBeam);
				if (result == null) result = caseEntity(ifcBeam);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_BEAM_TYPE: {
				IfcBeamType ifcBeamType = (IfcBeamType)theEObject;
				T result = caseIfcBeamType(ifcBeamType);
				if (result == null) result = caseIfcBuildingElementType(ifcBeamType);
				if (result == null) result = caseIfcElementType(ifcBeamType);
				if (result == null) result = caseIfcTypeProduct(ifcBeamType);
				if (result == null) result = caseIfcTypeObject(ifcBeamType);
				if (result == null) result = caseIfcObjectDefinition(ifcBeamType);
				if (result == null) result = caseIfcRoot(ifcBeamType);
				if (result == null) result = caseEntity(ifcBeamType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_BEAM_TYPE_ENUM_TYPE: {
				IfcBeamTypeEnumType ifcBeamTypeEnumType = (IfcBeamTypeEnumType)theEObject;
				T result = caseIfcBeamTypeEnumType(ifcBeamTypeEnumType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_BENCHMARK_ENUM_TYPE: {
				IfcBenchmarkEnumType ifcBenchmarkEnumType = (IfcBenchmarkEnumType)theEObject;
				T result = caseIfcBenchmarkEnumType(ifcBenchmarkEnumType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_BEZIER_CURVE: {
				IfcBezierCurve ifcBezierCurve = (IfcBezierCurve)theEObject;
				T result = caseIfcBezierCurve(ifcBezierCurve);
				if (result == null) result = caseIfcBSplineCurve(ifcBezierCurve);
				if (result == null) result = caseIfcBoundedCurve(ifcBezierCurve);
				if (result == null) result = caseIfcCurve(ifcBezierCurve);
				if (result == null) result = caseIfcGeometricRepresentationItem(ifcBezierCurve);
				if (result == null) result = caseIfcRepresentationItem(ifcBezierCurve);
				if (result == null) result = caseEntity(ifcBezierCurve);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_BLOB_TEXTURE: {
				IfcBlobTexture ifcBlobTexture = (IfcBlobTexture)theEObject;
				T result = caseIfcBlobTexture(ifcBlobTexture);
				if (result == null) result = caseIfcSurfaceTexture(ifcBlobTexture);
				if (result == null) result = caseEntity(ifcBlobTexture);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_BLOCK: {
				IfcBlock ifcBlock = (IfcBlock)theEObject;
				T result = caseIfcBlock(ifcBlock);
				if (result == null) result = caseIfcCsgPrimitive3D(ifcBlock);
				if (result == null) result = caseIfcGeometricRepresentationItem(ifcBlock);
				if (result == null) result = caseIfcRepresentationItem(ifcBlock);
				if (result == null) result = caseEntity(ifcBlock);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_BOILER_TYPE: {
				IfcBoilerType ifcBoilerType = (IfcBoilerType)theEObject;
				T result = caseIfcBoilerType(ifcBoilerType);
				if (result == null) result = caseIfcEnergyConversionDeviceType(ifcBoilerType);
				if (result == null) result = caseIfcDistributionFlowElementType(ifcBoilerType);
				if (result == null) result = caseIfcDistributionElementType(ifcBoilerType);
				if (result == null) result = caseIfcElementType(ifcBoilerType);
				if (result == null) result = caseIfcTypeProduct(ifcBoilerType);
				if (result == null) result = caseIfcTypeObject(ifcBoilerType);
				if (result == null) result = caseIfcObjectDefinition(ifcBoilerType);
				if (result == null) result = caseIfcRoot(ifcBoilerType);
				if (result == null) result = caseEntity(ifcBoilerType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_BOILER_TYPE_ENUM_TYPE: {
				IfcBoilerTypeEnumType ifcBoilerTypeEnumType = (IfcBoilerTypeEnumType)theEObject;
				T result = caseIfcBoilerTypeEnumType(ifcBoilerTypeEnumType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_BOOLEAN_CLIPPING_RESULT: {
				IfcBooleanClippingResult ifcBooleanClippingResult = (IfcBooleanClippingResult)theEObject;
				T result = caseIfcBooleanClippingResult(ifcBooleanClippingResult);
				if (result == null) result = caseIfcBooleanResult(ifcBooleanClippingResult);
				if (result == null) result = caseIfcGeometricRepresentationItem(ifcBooleanClippingResult);
				if (result == null) result = caseIfcRepresentationItem(ifcBooleanClippingResult);
				if (result == null) result = caseEntity(ifcBooleanClippingResult);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_BOOLEAN_OPERAND: {
				IfcBooleanOperand ifcBooleanOperand = (IfcBooleanOperand)theEObject;
				T result = caseIfcBooleanOperand(ifcBooleanOperand);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_BOOLEAN_OPERATOR_TYPE: {
				IfcBooleanOperatorType ifcBooleanOperatorType = (IfcBooleanOperatorType)theEObject;
				T result = caseIfcBooleanOperatorType(ifcBooleanOperatorType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_BOOLEAN_RESULT: {
				IfcBooleanResult ifcBooleanResult = (IfcBooleanResult)theEObject;
				T result = caseIfcBooleanResult(ifcBooleanResult);
				if (result == null) result = caseIfcGeometricRepresentationItem(ifcBooleanResult);
				if (result == null) result = caseIfcRepresentationItem(ifcBooleanResult);
				if (result == null) result = caseEntity(ifcBooleanResult);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_BOOLEAN_TYPE: {
				IfcBooleanType ifcBooleanType = (IfcBooleanType)theEObject;
				T result = caseIfcBooleanType(ifcBooleanType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_BOUNDARY_CONDITION: {
				IfcBoundaryCondition ifcBoundaryCondition = (IfcBoundaryCondition)theEObject;
				T result = caseIfcBoundaryCondition(ifcBoundaryCondition);
				if (result == null) result = caseEntity(ifcBoundaryCondition);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_BOUNDARY_EDGE_CONDITION: {
				IfcBoundaryEdgeCondition ifcBoundaryEdgeCondition = (IfcBoundaryEdgeCondition)theEObject;
				T result = caseIfcBoundaryEdgeCondition(ifcBoundaryEdgeCondition);
				if (result == null) result = caseIfcBoundaryCondition(ifcBoundaryEdgeCondition);
				if (result == null) result = caseEntity(ifcBoundaryEdgeCondition);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_BOUNDARY_FACE_CONDITION: {
				IfcBoundaryFaceCondition ifcBoundaryFaceCondition = (IfcBoundaryFaceCondition)theEObject;
				T result = caseIfcBoundaryFaceCondition(ifcBoundaryFaceCondition);
				if (result == null) result = caseIfcBoundaryCondition(ifcBoundaryFaceCondition);
				if (result == null) result = caseEntity(ifcBoundaryFaceCondition);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_BOUNDARY_NODE_CONDITION: {
				IfcBoundaryNodeCondition ifcBoundaryNodeCondition = (IfcBoundaryNodeCondition)theEObject;
				T result = caseIfcBoundaryNodeCondition(ifcBoundaryNodeCondition);
				if (result == null) result = caseIfcBoundaryCondition(ifcBoundaryNodeCondition);
				if (result == null) result = caseEntity(ifcBoundaryNodeCondition);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_BOUNDARY_NODE_CONDITION_WARPING: {
				IfcBoundaryNodeConditionWarping ifcBoundaryNodeConditionWarping = (IfcBoundaryNodeConditionWarping)theEObject;
				T result = caseIfcBoundaryNodeConditionWarping(ifcBoundaryNodeConditionWarping);
				if (result == null) result = caseIfcBoundaryNodeCondition(ifcBoundaryNodeConditionWarping);
				if (result == null) result = caseIfcBoundaryCondition(ifcBoundaryNodeConditionWarping);
				if (result == null) result = caseEntity(ifcBoundaryNodeConditionWarping);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_BOUNDED_CURVE: {
				IfcBoundedCurve ifcBoundedCurve = (IfcBoundedCurve)theEObject;
				T result = caseIfcBoundedCurve(ifcBoundedCurve);
				if (result == null) result = caseIfcCurve(ifcBoundedCurve);
				if (result == null) result = caseIfcGeometricRepresentationItem(ifcBoundedCurve);
				if (result == null) result = caseIfcRepresentationItem(ifcBoundedCurve);
				if (result == null) result = caseEntity(ifcBoundedCurve);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_BOUNDED_SURFACE: {
				IfcBoundedSurface ifcBoundedSurface = (IfcBoundedSurface)theEObject;
				T result = caseIfcBoundedSurface(ifcBoundedSurface);
				if (result == null) result = caseIfcSurface(ifcBoundedSurface);
				if (result == null) result = caseIfcGeometricRepresentationItem(ifcBoundedSurface);
				if (result == null) result = caseIfcRepresentationItem(ifcBoundedSurface);
				if (result == null) result = caseEntity(ifcBoundedSurface);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_BOUNDING_BOX: {
				IfcBoundingBox ifcBoundingBox = (IfcBoundingBox)theEObject;
				T result = caseIfcBoundingBox(ifcBoundingBox);
				if (result == null) result = caseIfcGeometricRepresentationItem(ifcBoundingBox);
				if (result == null) result = caseIfcRepresentationItem(ifcBoundingBox);
				if (result == null) result = caseEntity(ifcBoundingBox);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_BOX_ALIGNMENT_TYPE: {
				IfcBoxAlignmentType ifcBoxAlignmentType = (IfcBoxAlignmentType)theEObject;
				T result = caseIfcBoxAlignmentType(ifcBoxAlignmentType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_BOXED_HALF_SPACE: {
				IfcBoxedHalfSpace ifcBoxedHalfSpace = (IfcBoxedHalfSpace)theEObject;
				T result = caseIfcBoxedHalfSpace(ifcBoxedHalfSpace);
				if (result == null) result = caseIfcHalfSpaceSolid(ifcBoxedHalfSpace);
				if (result == null) result = caseIfcGeometricRepresentationItem(ifcBoxedHalfSpace);
				if (result == null) result = caseIfcRepresentationItem(ifcBoxedHalfSpace);
				if (result == null) result = caseEntity(ifcBoxedHalfSpace);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_BSPLINE_CURVE: {
				IfcBSplineCurve ifcBSplineCurve = (IfcBSplineCurve)theEObject;
				T result = caseIfcBSplineCurve(ifcBSplineCurve);
				if (result == null) result = caseIfcBoundedCurve(ifcBSplineCurve);
				if (result == null) result = caseIfcCurve(ifcBSplineCurve);
				if (result == null) result = caseIfcGeometricRepresentationItem(ifcBSplineCurve);
				if (result == null) result = caseIfcRepresentationItem(ifcBSplineCurve);
				if (result == null) result = caseEntity(ifcBSplineCurve);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_BSPLINE_CURVE_FORM_TYPE: {
				IfcBSplineCurveFormType ifcBSplineCurveFormType = (IfcBSplineCurveFormType)theEObject;
				T result = caseIfcBSplineCurveFormType(ifcBSplineCurveFormType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_BUILDING: {
				IfcBuilding ifcBuilding = (IfcBuilding)theEObject;
				T result = caseIfcBuilding(ifcBuilding);
				if (result == null) result = caseIfcSpatialStructureElement(ifcBuilding);
				if (result == null) result = caseIfcProduct(ifcBuilding);
				if (result == null) result = caseIfcObject(ifcBuilding);
				if (result == null) result = caseIfcObjectDefinition(ifcBuilding);
				if (result == null) result = caseIfcRoot(ifcBuilding);
				if (result == null) result = caseEntity(ifcBuilding);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_BUILDING_ELEMENT: {
				IfcBuildingElement ifcBuildingElement = (IfcBuildingElement)theEObject;
				T result = caseIfcBuildingElement(ifcBuildingElement);
				if (result == null) result = caseIfcElement(ifcBuildingElement);
				if (result == null) result = caseIfcProduct(ifcBuildingElement);
				if (result == null) result = caseIfcObject(ifcBuildingElement);
				if (result == null) result = caseIfcObjectDefinition(ifcBuildingElement);
				if (result == null) result = caseIfcRoot(ifcBuildingElement);
				if (result == null) result = caseEntity(ifcBuildingElement);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_BUILDING_ELEMENT_COMPONENT: {
				IfcBuildingElementComponent ifcBuildingElementComponent = (IfcBuildingElementComponent)theEObject;
				T result = caseIfcBuildingElementComponent(ifcBuildingElementComponent);
				if (result == null) result = caseIfcBuildingElement(ifcBuildingElementComponent);
				if (result == null) result = caseIfcElement(ifcBuildingElementComponent);
				if (result == null) result = caseIfcProduct(ifcBuildingElementComponent);
				if (result == null) result = caseIfcObject(ifcBuildingElementComponent);
				if (result == null) result = caseIfcObjectDefinition(ifcBuildingElementComponent);
				if (result == null) result = caseIfcRoot(ifcBuildingElementComponent);
				if (result == null) result = caseEntity(ifcBuildingElementComponent);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_BUILDING_ELEMENT_PART: {
				IfcBuildingElementPart ifcBuildingElementPart = (IfcBuildingElementPart)theEObject;
				T result = caseIfcBuildingElementPart(ifcBuildingElementPart);
				if (result == null) result = caseIfcBuildingElementComponent(ifcBuildingElementPart);
				if (result == null) result = caseIfcBuildingElement(ifcBuildingElementPart);
				if (result == null) result = caseIfcElement(ifcBuildingElementPart);
				if (result == null) result = caseIfcProduct(ifcBuildingElementPart);
				if (result == null) result = caseIfcObject(ifcBuildingElementPart);
				if (result == null) result = caseIfcObjectDefinition(ifcBuildingElementPart);
				if (result == null) result = caseIfcRoot(ifcBuildingElementPart);
				if (result == null) result = caseEntity(ifcBuildingElementPart);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_BUILDING_ELEMENT_PROXY: {
				IfcBuildingElementProxy ifcBuildingElementProxy = (IfcBuildingElementProxy)theEObject;
				T result = caseIfcBuildingElementProxy(ifcBuildingElementProxy);
				if (result == null) result = caseIfcBuildingElement(ifcBuildingElementProxy);
				if (result == null) result = caseIfcElement(ifcBuildingElementProxy);
				if (result == null) result = caseIfcProduct(ifcBuildingElementProxy);
				if (result == null) result = caseIfcObject(ifcBuildingElementProxy);
				if (result == null) result = caseIfcObjectDefinition(ifcBuildingElementProxy);
				if (result == null) result = caseIfcRoot(ifcBuildingElementProxy);
				if (result == null) result = caseEntity(ifcBuildingElementProxy);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_BUILDING_ELEMENT_PROXY_TYPE: {
				IfcBuildingElementProxyType ifcBuildingElementProxyType = (IfcBuildingElementProxyType)theEObject;
				T result = caseIfcBuildingElementProxyType(ifcBuildingElementProxyType);
				if (result == null) result = caseIfcBuildingElementType(ifcBuildingElementProxyType);
				if (result == null) result = caseIfcElementType(ifcBuildingElementProxyType);
				if (result == null) result = caseIfcTypeProduct(ifcBuildingElementProxyType);
				if (result == null) result = caseIfcTypeObject(ifcBuildingElementProxyType);
				if (result == null) result = caseIfcObjectDefinition(ifcBuildingElementProxyType);
				if (result == null) result = caseIfcRoot(ifcBuildingElementProxyType);
				if (result == null) result = caseEntity(ifcBuildingElementProxyType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_BUILDING_ELEMENT_PROXY_TYPE_ENUM_TYPE: {
				IfcBuildingElementProxyTypeEnumType ifcBuildingElementProxyTypeEnumType = (IfcBuildingElementProxyTypeEnumType)theEObject;
				T result = caseIfcBuildingElementProxyTypeEnumType(ifcBuildingElementProxyTypeEnumType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_BUILDING_ELEMENT_TYPE: {
				IfcBuildingElementType ifcBuildingElementType = (IfcBuildingElementType)theEObject;
				T result = caseIfcBuildingElementType(ifcBuildingElementType);
				if (result == null) result = caseIfcElementType(ifcBuildingElementType);
				if (result == null) result = caseIfcTypeProduct(ifcBuildingElementType);
				if (result == null) result = caseIfcTypeObject(ifcBuildingElementType);
				if (result == null) result = caseIfcObjectDefinition(ifcBuildingElementType);
				if (result == null) result = caseIfcRoot(ifcBuildingElementType);
				if (result == null) result = caseEntity(ifcBuildingElementType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_BUILDING_STOREY: {
				IfcBuildingStorey ifcBuildingStorey = (IfcBuildingStorey)theEObject;
				T result = caseIfcBuildingStorey(ifcBuildingStorey);
				if (result == null) result = caseIfcSpatialStructureElement(ifcBuildingStorey);
				if (result == null) result = caseIfcProduct(ifcBuildingStorey);
				if (result == null) result = caseIfcObject(ifcBuildingStorey);
				if (result == null) result = caseIfcObjectDefinition(ifcBuildingStorey);
				if (result == null) result = caseIfcRoot(ifcBuildingStorey);
				if (result == null) result = caseEntity(ifcBuildingStorey);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_CABLE_CARRIER_FITTING_TYPE: {
				IfcCableCarrierFittingType ifcCableCarrierFittingType = (IfcCableCarrierFittingType)theEObject;
				T result = caseIfcCableCarrierFittingType(ifcCableCarrierFittingType);
				if (result == null) result = caseIfcFlowFittingType(ifcCableCarrierFittingType);
				if (result == null) result = caseIfcDistributionFlowElementType(ifcCableCarrierFittingType);
				if (result == null) result = caseIfcDistributionElementType(ifcCableCarrierFittingType);
				if (result == null) result = caseIfcElementType(ifcCableCarrierFittingType);
				if (result == null) result = caseIfcTypeProduct(ifcCableCarrierFittingType);
				if (result == null) result = caseIfcTypeObject(ifcCableCarrierFittingType);
				if (result == null) result = caseIfcObjectDefinition(ifcCableCarrierFittingType);
				if (result == null) result = caseIfcRoot(ifcCableCarrierFittingType);
				if (result == null) result = caseEntity(ifcCableCarrierFittingType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_CABLE_CARRIER_FITTING_TYPE_ENUM_TYPE: {
				IfcCableCarrierFittingTypeEnumType ifcCableCarrierFittingTypeEnumType = (IfcCableCarrierFittingTypeEnumType)theEObject;
				T result = caseIfcCableCarrierFittingTypeEnumType(ifcCableCarrierFittingTypeEnumType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_CABLE_CARRIER_SEGMENT_TYPE: {
				IfcCableCarrierSegmentType ifcCableCarrierSegmentType = (IfcCableCarrierSegmentType)theEObject;
				T result = caseIfcCableCarrierSegmentType(ifcCableCarrierSegmentType);
				if (result == null) result = caseIfcFlowSegmentType(ifcCableCarrierSegmentType);
				if (result == null) result = caseIfcDistributionFlowElementType(ifcCableCarrierSegmentType);
				if (result == null) result = caseIfcDistributionElementType(ifcCableCarrierSegmentType);
				if (result == null) result = caseIfcElementType(ifcCableCarrierSegmentType);
				if (result == null) result = caseIfcTypeProduct(ifcCableCarrierSegmentType);
				if (result == null) result = caseIfcTypeObject(ifcCableCarrierSegmentType);
				if (result == null) result = caseIfcObjectDefinition(ifcCableCarrierSegmentType);
				if (result == null) result = caseIfcRoot(ifcCableCarrierSegmentType);
				if (result == null) result = caseEntity(ifcCableCarrierSegmentType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_CABLE_CARRIER_SEGMENT_TYPE_ENUM_TYPE: {
				IfcCableCarrierSegmentTypeEnumType ifcCableCarrierSegmentTypeEnumType = (IfcCableCarrierSegmentTypeEnumType)theEObject;
				T result = caseIfcCableCarrierSegmentTypeEnumType(ifcCableCarrierSegmentTypeEnumType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_CABLE_SEGMENT_TYPE: {
				IfcCableSegmentType ifcCableSegmentType = (IfcCableSegmentType)theEObject;
				T result = caseIfcCableSegmentType(ifcCableSegmentType);
				if (result == null) result = caseIfcFlowSegmentType(ifcCableSegmentType);
				if (result == null) result = caseIfcDistributionFlowElementType(ifcCableSegmentType);
				if (result == null) result = caseIfcDistributionElementType(ifcCableSegmentType);
				if (result == null) result = caseIfcElementType(ifcCableSegmentType);
				if (result == null) result = caseIfcTypeProduct(ifcCableSegmentType);
				if (result == null) result = caseIfcTypeObject(ifcCableSegmentType);
				if (result == null) result = caseIfcObjectDefinition(ifcCableSegmentType);
				if (result == null) result = caseIfcRoot(ifcCableSegmentType);
				if (result == null) result = caseEntity(ifcCableSegmentType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_CABLE_SEGMENT_TYPE_ENUM_TYPE: {
				IfcCableSegmentTypeEnumType ifcCableSegmentTypeEnumType = (IfcCableSegmentTypeEnumType)theEObject;
				T result = caseIfcCableSegmentTypeEnumType(ifcCableSegmentTypeEnumType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_CALENDAR_DATE: {
				IfcCalendarDate ifcCalendarDate = (IfcCalendarDate)theEObject;
				T result = caseIfcCalendarDate(ifcCalendarDate);
				if (result == null) result = caseEntity(ifcCalendarDate);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_CARTESIAN_POINT: {
				IfcCartesianPoint ifcCartesianPoint = (IfcCartesianPoint)theEObject;
				T result = caseIfcCartesianPoint(ifcCartesianPoint);
				if (result == null) result = caseIfcPoint(ifcCartesianPoint);
				if (result == null) result = caseIfcGeometricRepresentationItem(ifcCartesianPoint);
				if (result == null) result = caseIfcRepresentationItem(ifcCartesianPoint);
				if (result == null) result = caseEntity(ifcCartesianPoint);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_CARTESIAN_TRANSFORMATION_OPERATOR: {
				IfcCartesianTransformationOperator ifcCartesianTransformationOperator = (IfcCartesianTransformationOperator)theEObject;
				T result = caseIfcCartesianTransformationOperator(ifcCartesianTransformationOperator);
				if (result == null) result = caseIfcGeometricRepresentationItem(ifcCartesianTransformationOperator);
				if (result == null) result = caseIfcRepresentationItem(ifcCartesianTransformationOperator);
				if (result == null) result = caseEntity(ifcCartesianTransformationOperator);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_CARTESIAN_TRANSFORMATION_OPERATOR2_D: {
				IfcCartesianTransformationOperator2D ifcCartesianTransformationOperator2D = (IfcCartesianTransformationOperator2D)theEObject;
				T result = caseIfcCartesianTransformationOperator2D(ifcCartesianTransformationOperator2D);
				if (result == null) result = caseIfcCartesianTransformationOperator(ifcCartesianTransformationOperator2D);
				if (result == null) result = caseIfcGeometricRepresentationItem(ifcCartesianTransformationOperator2D);
				if (result == null) result = caseIfcRepresentationItem(ifcCartesianTransformationOperator2D);
				if (result == null) result = caseEntity(ifcCartesianTransformationOperator2D);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_CARTESIAN_TRANSFORMATION_OPERATOR2_DNON_UNIFORM: {
				IfcCartesianTransformationOperator2DnonUniform ifcCartesianTransformationOperator2DnonUniform = (IfcCartesianTransformationOperator2DnonUniform)theEObject;
				T result = caseIfcCartesianTransformationOperator2DnonUniform(ifcCartesianTransformationOperator2DnonUniform);
				if (result == null) result = caseIfcCartesianTransformationOperator2D(ifcCartesianTransformationOperator2DnonUniform);
				if (result == null) result = caseIfcCartesianTransformationOperator(ifcCartesianTransformationOperator2DnonUniform);
				if (result == null) result = caseIfcGeometricRepresentationItem(ifcCartesianTransformationOperator2DnonUniform);
				if (result == null) result = caseIfcRepresentationItem(ifcCartesianTransformationOperator2DnonUniform);
				if (result == null) result = caseEntity(ifcCartesianTransformationOperator2DnonUniform);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_CARTESIAN_TRANSFORMATION_OPERATOR3_D: {
				IfcCartesianTransformationOperator3D ifcCartesianTransformationOperator3D = (IfcCartesianTransformationOperator3D)theEObject;
				T result = caseIfcCartesianTransformationOperator3D(ifcCartesianTransformationOperator3D);
				if (result == null) result = caseIfcCartesianTransformationOperator(ifcCartesianTransformationOperator3D);
				if (result == null) result = caseIfcGeometricRepresentationItem(ifcCartesianTransformationOperator3D);
				if (result == null) result = caseIfcRepresentationItem(ifcCartesianTransformationOperator3D);
				if (result == null) result = caseEntity(ifcCartesianTransformationOperator3D);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_CARTESIAN_TRANSFORMATION_OPERATOR3_DNON_UNIFORM: {
				IfcCartesianTransformationOperator3DnonUniform ifcCartesianTransformationOperator3DnonUniform = (IfcCartesianTransformationOperator3DnonUniform)theEObject;
				T result = caseIfcCartesianTransformationOperator3DnonUniform(ifcCartesianTransformationOperator3DnonUniform);
				if (result == null) result = caseIfcCartesianTransformationOperator3D(ifcCartesianTransformationOperator3DnonUniform);
				if (result == null) result = caseIfcCartesianTransformationOperator(ifcCartesianTransformationOperator3DnonUniform);
				if (result == null) result = caseIfcGeometricRepresentationItem(ifcCartesianTransformationOperator3DnonUniform);
				if (result == null) result = caseIfcRepresentationItem(ifcCartesianTransformationOperator3DnonUniform);
				if (result == null) result = caseEntity(ifcCartesianTransformationOperator3DnonUniform);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_CENTER_LINE_PROFILE_DEF: {
				IfcCenterLineProfileDef ifcCenterLineProfileDef = (IfcCenterLineProfileDef)theEObject;
				T result = caseIfcCenterLineProfileDef(ifcCenterLineProfileDef);
				if (result == null) result = caseIfcArbitraryOpenProfileDef(ifcCenterLineProfileDef);
				if (result == null) result = caseIfcProfileDef(ifcCenterLineProfileDef);
				if (result == null) result = caseEntity(ifcCenterLineProfileDef);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_CHAMFER_EDGE_FEATURE: {
				IfcChamferEdgeFeature ifcChamferEdgeFeature = (IfcChamferEdgeFeature)theEObject;
				T result = caseIfcChamferEdgeFeature(ifcChamferEdgeFeature);
				if (result == null) result = caseIfcEdgeFeature(ifcChamferEdgeFeature);
				if (result == null) result = caseIfcFeatureElementSubtraction(ifcChamferEdgeFeature);
				if (result == null) result = caseIfcFeatureElement(ifcChamferEdgeFeature);
				if (result == null) result = caseIfcElement(ifcChamferEdgeFeature);
				if (result == null) result = caseIfcProduct(ifcChamferEdgeFeature);
				if (result == null) result = caseIfcObject(ifcChamferEdgeFeature);
				if (result == null) result = caseIfcObjectDefinition(ifcChamferEdgeFeature);
				if (result == null) result = caseIfcRoot(ifcChamferEdgeFeature);
				if (result == null) result = caseEntity(ifcChamferEdgeFeature);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_CHANGE_ACTION_ENUM_TYPE: {
				IfcChangeActionEnumType ifcChangeActionEnumType = (IfcChangeActionEnumType)theEObject;
				T result = caseIfcChangeActionEnumType(ifcChangeActionEnumType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_CHARACTER_STYLE_SELECT: {
				IfcCharacterStyleSelect ifcCharacterStyleSelect = (IfcCharacterStyleSelect)theEObject;
				T result = caseIfcCharacterStyleSelect(ifcCharacterStyleSelect);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_CHILLER_TYPE: {
				IfcChillerType ifcChillerType = (IfcChillerType)theEObject;
				T result = caseIfcChillerType(ifcChillerType);
				if (result == null) result = caseIfcEnergyConversionDeviceType(ifcChillerType);
				if (result == null) result = caseIfcDistributionFlowElementType(ifcChillerType);
				if (result == null) result = caseIfcDistributionElementType(ifcChillerType);
				if (result == null) result = caseIfcElementType(ifcChillerType);
				if (result == null) result = caseIfcTypeProduct(ifcChillerType);
				if (result == null) result = caseIfcTypeObject(ifcChillerType);
				if (result == null) result = caseIfcObjectDefinition(ifcChillerType);
				if (result == null) result = caseIfcRoot(ifcChillerType);
				if (result == null) result = caseEntity(ifcChillerType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_CHILLER_TYPE_ENUM_TYPE: {
				IfcChillerTypeEnumType ifcChillerTypeEnumType = (IfcChillerTypeEnumType)theEObject;
				T result = caseIfcChillerTypeEnumType(ifcChillerTypeEnumType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_CIRCLE: {
				IfcCircle ifcCircle = (IfcCircle)theEObject;
				T result = caseIfcCircle(ifcCircle);
				if (result == null) result = caseIfcConic(ifcCircle);
				if (result == null) result = caseIfcCurve(ifcCircle);
				if (result == null) result = caseIfcGeometricRepresentationItem(ifcCircle);
				if (result == null) result = caseIfcRepresentationItem(ifcCircle);
				if (result == null) result = caseEntity(ifcCircle);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_CIRCLE_HOLLOW_PROFILE_DEF: {
				IfcCircleHollowProfileDef ifcCircleHollowProfileDef = (IfcCircleHollowProfileDef)theEObject;
				T result = caseIfcCircleHollowProfileDef(ifcCircleHollowProfileDef);
				if (result == null) result = caseIfcCircleProfileDef(ifcCircleHollowProfileDef);
				if (result == null) result = caseIfcParameterizedProfileDef(ifcCircleHollowProfileDef);
				if (result == null) result = caseIfcProfileDef(ifcCircleHollowProfileDef);
				if (result == null) result = caseEntity(ifcCircleHollowProfileDef);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_CIRCLE_PROFILE_DEF: {
				IfcCircleProfileDef ifcCircleProfileDef = (IfcCircleProfileDef)theEObject;
				T result = caseIfcCircleProfileDef(ifcCircleProfileDef);
				if (result == null) result = caseIfcParameterizedProfileDef(ifcCircleProfileDef);
				if (result == null) result = caseIfcProfileDef(ifcCircleProfileDef);
				if (result == null) result = caseEntity(ifcCircleProfileDef);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_CLASSIFICATION: {
				IfcClassification ifcClassification = (IfcClassification)theEObject;
				T result = caseIfcClassification(ifcClassification);
				if (result == null) result = caseEntity(ifcClassification);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_CLASSIFICATION_ITEM: {
				IfcClassificationItem ifcClassificationItem = (IfcClassificationItem)theEObject;
				T result = caseIfcClassificationItem(ifcClassificationItem);
				if (result == null) result = caseEntity(ifcClassificationItem);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_CLASSIFICATION_ITEM_RELATIONSHIP: {
				IfcClassificationItemRelationship ifcClassificationItemRelationship = (IfcClassificationItemRelationship)theEObject;
				T result = caseIfcClassificationItemRelationship(ifcClassificationItemRelationship);
				if (result == null) result = caseEntity(ifcClassificationItemRelationship);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_CLASSIFICATION_NOTATION: {
				IfcClassificationNotation ifcClassificationNotation = (IfcClassificationNotation)theEObject;
				T result = caseIfcClassificationNotation(ifcClassificationNotation);
				if (result == null) result = caseEntity(ifcClassificationNotation);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_CLASSIFICATION_NOTATION_FACET: {
				IfcClassificationNotationFacet ifcClassificationNotationFacet = (IfcClassificationNotationFacet)theEObject;
				T result = caseIfcClassificationNotationFacet(ifcClassificationNotationFacet);
				if (result == null) result = caseEntity(ifcClassificationNotationFacet);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_CLASSIFICATION_NOTATION_SELECT: {
				IfcClassificationNotationSelect ifcClassificationNotationSelect = (IfcClassificationNotationSelect)theEObject;
				T result = caseIfcClassificationNotationSelect(ifcClassificationNotationSelect);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_CLASSIFICATION_REFERENCE: {
				IfcClassificationReference ifcClassificationReference = (IfcClassificationReference)theEObject;
				T result = caseIfcClassificationReference(ifcClassificationReference);
				if (result == null) result = caseIfcExternalReference(ifcClassificationReference);
				if (result == null) result = caseEntity(ifcClassificationReference);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_CLOSED_SHELL: {
				IfcClosedShell ifcClosedShell = (IfcClosedShell)theEObject;
				T result = caseIfcClosedShell(ifcClosedShell);
				if (result == null) result = caseIfcConnectedFaceSet(ifcClosedShell);
				if (result == null) result = caseIfcTopologicalRepresentationItem(ifcClosedShell);
				if (result == null) result = caseIfcRepresentationItem(ifcClosedShell);
				if (result == null) result = caseEntity(ifcClosedShell);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_COIL_TYPE: {
				IfcCoilType ifcCoilType = (IfcCoilType)theEObject;
				T result = caseIfcCoilType(ifcCoilType);
				if (result == null) result = caseIfcEnergyConversionDeviceType(ifcCoilType);
				if (result == null) result = caseIfcDistributionFlowElementType(ifcCoilType);
				if (result == null) result = caseIfcDistributionElementType(ifcCoilType);
				if (result == null) result = caseIfcElementType(ifcCoilType);
				if (result == null) result = caseIfcTypeProduct(ifcCoilType);
				if (result == null) result = caseIfcTypeObject(ifcCoilType);
				if (result == null) result = caseIfcObjectDefinition(ifcCoilType);
				if (result == null) result = caseIfcRoot(ifcCoilType);
				if (result == null) result = caseEntity(ifcCoilType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_COIL_TYPE_ENUM_TYPE: {
				IfcCoilTypeEnumType ifcCoilTypeEnumType = (IfcCoilTypeEnumType)theEObject;
				T result = caseIfcCoilTypeEnumType(ifcCoilTypeEnumType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_COLOUR: {
				IfcColour ifcColour = (IfcColour)theEObject;
				T result = caseIfcColour(ifcColour);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_COLOUR_OR_FACTOR: {
				IfcColourOrFactor ifcColourOrFactor = (IfcColourOrFactor)theEObject;
				T result = caseIfcColourOrFactor(ifcColourOrFactor);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_COLOUR_RGB: {
				IfcColourRgb ifcColourRgb = (IfcColourRgb)theEObject;
				T result = caseIfcColourRgb(ifcColourRgb);
				if (result == null) result = caseIfcColourSpecification(ifcColourRgb);
				if (result == null) result = caseEntity(ifcColourRgb);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_COLOUR_SPECIFICATION: {
				IfcColourSpecification ifcColourSpecification = (IfcColourSpecification)theEObject;
				T result = caseIfcColourSpecification(ifcColourSpecification);
				if (result == null) result = caseEntity(ifcColourSpecification);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_COLUMN: {
				IfcColumn ifcColumn = (IfcColumn)theEObject;
				T result = caseIfcColumn(ifcColumn);
				if (result == null) result = caseIfcBuildingElement(ifcColumn);
				if (result == null) result = caseIfcElement(ifcColumn);
				if (result == null) result = caseIfcProduct(ifcColumn);
				if (result == null) result = caseIfcObject(ifcColumn);
				if (result == null) result = caseIfcObjectDefinition(ifcColumn);
				if (result == null) result = caseIfcRoot(ifcColumn);
				if (result == null) result = caseEntity(ifcColumn);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_COLUMN_TYPE: {
				IfcColumnType ifcColumnType = (IfcColumnType)theEObject;
				T result = caseIfcColumnType(ifcColumnType);
				if (result == null) result = caseIfcBuildingElementType(ifcColumnType);
				if (result == null) result = caseIfcElementType(ifcColumnType);
				if (result == null) result = caseIfcTypeProduct(ifcColumnType);
				if (result == null) result = caseIfcTypeObject(ifcColumnType);
				if (result == null) result = caseIfcObjectDefinition(ifcColumnType);
				if (result == null) result = caseIfcRoot(ifcColumnType);
				if (result == null) result = caseEntity(ifcColumnType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_COLUMN_TYPE_ENUM_TYPE: {
				IfcColumnTypeEnumType ifcColumnTypeEnumType = (IfcColumnTypeEnumType)theEObject;
				T result = caseIfcColumnTypeEnumType(ifcColumnTypeEnumType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_COMPLEX_NUMBER: {
				IfcComplexNumber ifcComplexNumber = (IfcComplexNumber)theEObject;
				T result = caseIfcComplexNumber(ifcComplexNumber);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_COMPLEX_NUMBER_TYPE: {
				IfcComplexNumberType ifcComplexNumberType = (IfcComplexNumberType)theEObject;
				T result = caseIfcComplexNumberType(ifcComplexNumberType);
				if (result == null) result = caseIfcComplexNumber(ifcComplexNumberType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_COMPLEX_PROPERTY: {
				IfcComplexProperty ifcComplexProperty = (IfcComplexProperty)theEObject;
				T result = caseIfcComplexProperty(ifcComplexProperty);
				if (result == null) result = caseIfcProperty(ifcComplexProperty);
				if (result == null) result = caseEntity(ifcComplexProperty);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_COMPOSITE_CURVE: {
				IfcCompositeCurve ifcCompositeCurve = (IfcCompositeCurve)theEObject;
				T result = caseIfcCompositeCurve(ifcCompositeCurve);
				if (result == null) result = caseIfcBoundedCurve(ifcCompositeCurve);
				if (result == null) result = caseIfcCurve(ifcCompositeCurve);
				if (result == null) result = caseIfcGeometricRepresentationItem(ifcCompositeCurve);
				if (result == null) result = caseIfcRepresentationItem(ifcCompositeCurve);
				if (result == null) result = caseEntity(ifcCompositeCurve);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_COMPOSITE_CURVE_SEGMENT: {
				IfcCompositeCurveSegment ifcCompositeCurveSegment = (IfcCompositeCurveSegment)theEObject;
				T result = caseIfcCompositeCurveSegment(ifcCompositeCurveSegment);
				if (result == null) result = caseIfcGeometricRepresentationItem(ifcCompositeCurveSegment);
				if (result == null) result = caseIfcRepresentationItem(ifcCompositeCurveSegment);
				if (result == null) result = caseEntity(ifcCompositeCurveSegment);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_COMPOSITE_PROFILE_DEF: {
				IfcCompositeProfileDef ifcCompositeProfileDef = (IfcCompositeProfileDef)theEObject;
				T result = caseIfcCompositeProfileDef(ifcCompositeProfileDef);
				if (result == null) result = caseIfcProfileDef(ifcCompositeProfileDef);
				if (result == null) result = caseEntity(ifcCompositeProfileDef);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_COMPOUND_PLANE_ANGLE_MEASURE: {
				IfcCompoundPlaneAngleMeasure ifcCompoundPlaneAngleMeasure = (IfcCompoundPlaneAngleMeasure)theEObject;
				T result = caseIfcCompoundPlaneAngleMeasure(ifcCompoundPlaneAngleMeasure);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_COMPOUND_PLANE_ANGLE_MEASURE_TYPE: {
				IfcCompoundPlaneAngleMeasureType ifcCompoundPlaneAngleMeasureType = (IfcCompoundPlaneAngleMeasureType)theEObject;
				T result = caseIfcCompoundPlaneAngleMeasureType(ifcCompoundPlaneAngleMeasureType);
				if (result == null) result = caseIfcCompoundPlaneAngleMeasure(ifcCompoundPlaneAngleMeasureType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_COMPRESSOR_TYPE: {
				IfcCompressorType ifcCompressorType = (IfcCompressorType)theEObject;
				T result = caseIfcCompressorType(ifcCompressorType);
				if (result == null) result = caseIfcFlowMovingDeviceType(ifcCompressorType);
				if (result == null) result = caseIfcDistributionFlowElementType(ifcCompressorType);
				if (result == null) result = caseIfcDistributionElementType(ifcCompressorType);
				if (result == null) result = caseIfcElementType(ifcCompressorType);
				if (result == null) result = caseIfcTypeProduct(ifcCompressorType);
				if (result == null) result = caseIfcTypeObject(ifcCompressorType);
				if (result == null) result = caseIfcObjectDefinition(ifcCompressorType);
				if (result == null) result = caseIfcRoot(ifcCompressorType);
				if (result == null) result = caseEntity(ifcCompressorType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_COMPRESSOR_TYPE_ENUM_TYPE: {
				IfcCompressorTypeEnumType ifcCompressorTypeEnumType = (IfcCompressorTypeEnumType)theEObject;
				T result = caseIfcCompressorTypeEnumType(ifcCompressorTypeEnumType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_CONDENSER_TYPE: {
				IfcCondenserType ifcCondenserType = (IfcCondenserType)theEObject;
				T result = caseIfcCondenserType(ifcCondenserType);
				if (result == null) result = caseIfcEnergyConversionDeviceType(ifcCondenserType);
				if (result == null) result = caseIfcDistributionFlowElementType(ifcCondenserType);
				if (result == null) result = caseIfcDistributionElementType(ifcCondenserType);
				if (result == null) result = caseIfcElementType(ifcCondenserType);
				if (result == null) result = caseIfcTypeProduct(ifcCondenserType);
				if (result == null) result = caseIfcTypeObject(ifcCondenserType);
				if (result == null) result = caseIfcObjectDefinition(ifcCondenserType);
				if (result == null) result = caseIfcRoot(ifcCondenserType);
				if (result == null) result = caseEntity(ifcCondenserType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_CONDENSER_TYPE_ENUM_TYPE: {
				IfcCondenserTypeEnumType ifcCondenserTypeEnumType = (IfcCondenserTypeEnumType)theEObject;
				T result = caseIfcCondenserTypeEnumType(ifcCondenserTypeEnumType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_CONDITION: {
				IfcCondition ifcCondition = (IfcCondition)theEObject;
				T result = caseIfcCondition(ifcCondition);
				if (result == null) result = caseIfcGroup(ifcCondition);
				if (result == null) result = caseIfcObject(ifcCondition);
				if (result == null) result = caseIfcObjectDefinition(ifcCondition);
				if (result == null) result = caseIfcRoot(ifcCondition);
				if (result == null) result = caseEntity(ifcCondition);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_CONDITION_CRITERION: {
				IfcConditionCriterion ifcConditionCriterion = (IfcConditionCriterion)theEObject;
				T result = caseIfcConditionCriterion(ifcConditionCriterion);
				if (result == null) result = caseIfcControl(ifcConditionCriterion);
				if (result == null) result = caseIfcObject(ifcConditionCriterion);
				if (result == null) result = caseIfcObjectDefinition(ifcConditionCriterion);
				if (result == null) result = caseIfcRoot(ifcConditionCriterion);
				if (result == null) result = caseEntity(ifcConditionCriterion);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_CONDITION_CRITERION_SELECT: {
				IfcConditionCriterionSelect ifcConditionCriterionSelect = (IfcConditionCriterionSelect)theEObject;
				T result = caseIfcConditionCriterionSelect(ifcConditionCriterionSelect);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_CONIC: {
				IfcConic ifcConic = (IfcConic)theEObject;
				T result = caseIfcConic(ifcConic);
				if (result == null) result = caseIfcCurve(ifcConic);
				if (result == null) result = caseIfcGeometricRepresentationItem(ifcConic);
				if (result == null) result = caseIfcRepresentationItem(ifcConic);
				if (result == null) result = caseEntity(ifcConic);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_CONNECTED_FACE_SET: {
				IfcConnectedFaceSet ifcConnectedFaceSet = (IfcConnectedFaceSet)theEObject;
				T result = caseIfcConnectedFaceSet(ifcConnectedFaceSet);
				if (result == null) result = caseIfcTopologicalRepresentationItem(ifcConnectedFaceSet);
				if (result == null) result = caseIfcRepresentationItem(ifcConnectedFaceSet);
				if (result == null) result = caseEntity(ifcConnectedFaceSet);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_CONNECTION_CURVE_GEOMETRY: {
				IfcConnectionCurveGeometry ifcConnectionCurveGeometry = (IfcConnectionCurveGeometry)theEObject;
				T result = caseIfcConnectionCurveGeometry(ifcConnectionCurveGeometry);
				if (result == null) result = caseIfcConnectionGeometry(ifcConnectionCurveGeometry);
				if (result == null) result = caseEntity(ifcConnectionCurveGeometry);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_CONNECTION_GEOMETRY: {
				IfcConnectionGeometry ifcConnectionGeometry = (IfcConnectionGeometry)theEObject;
				T result = caseIfcConnectionGeometry(ifcConnectionGeometry);
				if (result == null) result = caseEntity(ifcConnectionGeometry);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_CONNECTION_POINT_ECCENTRICITY: {
				IfcConnectionPointEccentricity ifcConnectionPointEccentricity = (IfcConnectionPointEccentricity)theEObject;
				T result = caseIfcConnectionPointEccentricity(ifcConnectionPointEccentricity);
				if (result == null) result = caseIfcConnectionPointGeometry(ifcConnectionPointEccentricity);
				if (result == null) result = caseIfcConnectionGeometry(ifcConnectionPointEccentricity);
				if (result == null) result = caseEntity(ifcConnectionPointEccentricity);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_CONNECTION_POINT_GEOMETRY: {
				IfcConnectionPointGeometry ifcConnectionPointGeometry = (IfcConnectionPointGeometry)theEObject;
				T result = caseIfcConnectionPointGeometry(ifcConnectionPointGeometry);
				if (result == null) result = caseIfcConnectionGeometry(ifcConnectionPointGeometry);
				if (result == null) result = caseEntity(ifcConnectionPointGeometry);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_CONNECTION_PORT_GEOMETRY: {
				IfcConnectionPortGeometry ifcConnectionPortGeometry = (IfcConnectionPortGeometry)theEObject;
				T result = caseIfcConnectionPortGeometry(ifcConnectionPortGeometry);
				if (result == null) result = caseIfcConnectionGeometry(ifcConnectionPortGeometry);
				if (result == null) result = caseEntity(ifcConnectionPortGeometry);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_CONNECTION_SURFACE_GEOMETRY: {
				IfcConnectionSurfaceGeometry ifcConnectionSurfaceGeometry = (IfcConnectionSurfaceGeometry)theEObject;
				T result = caseIfcConnectionSurfaceGeometry(ifcConnectionSurfaceGeometry);
				if (result == null) result = caseIfcConnectionGeometry(ifcConnectionSurfaceGeometry);
				if (result == null) result = caseEntity(ifcConnectionSurfaceGeometry);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_CONNECTION_TYPE_ENUM_TYPE: {
				IfcConnectionTypeEnumType ifcConnectionTypeEnumType = (IfcConnectionTypeEnumType)theEObject;
				T result = caseIfcConnectionTypeEnumType(ifcConnectionTypeEnumType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_CONSTRAINT: {
				IfcConstraint ifcConstraint = (IfcConstraint)theEObject;
				T result = caseIfcConstraint(ifcConstraint);
				if (result == null) result = caseEntity(ifcConstraint);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_CONSTRAINT_AGGREGATION_RELATIONSHIP: {
				IfcConstraintAggregationRelationship ifcConstraintAggregationRelationship = (IfcConstraintAggregationRelationship)theEObject;
				T result = caseIfcConstraintAggregationRelationship(ifcConstraintAggregationRelationship);
				if (result == null) result = caseEntity(ifcConstraintAggregationRelationship);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_CONSTRAINT_CLASSIFICATION_RELATIONSHIP: {
				IfcConstraintClassificationRelationship ifcConstraintClassificationRelationship = (IfcConstraintClassificationRelationship)theEObject;
				T result = caseIfcConstraintClassificationRelationship(ifcConstraintClassificationRelationship);
				if (result == null) result = caseEntity(ifcConstraintClassificationRelationship);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_CONSTRAINT_ENUM_TYPE: {
				IfcConstraintEnumType ifcConstraintEnumType = (IfcConstraintEnumType)theEObject;
				T result = caseIfcConstraintEnumType(ifcConstraintEnumType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_CONSTRAINT_RELATIONSHIP: {
				IfcConstraintRelationship ifcConstraintRelationship = (IfcConstraintRelationship)theEObject;
				T result = caseIfcConstraintRelationship(ifcConstraintRelationship);
				if (result == null) result = caseEntity(ifcConstraintRelationship);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_CONSTRUCTION_EQUIPMENT_RESOURCE: {
				IfcConstructionEquipmentResource ifcConstructionEquipmentResource = (IfcConstructionEquipmentResource)theEObject;
				T result = caseIfcConstructionEquipmentResource(ifcConstructionEquipmentResource);
				if (result == null) result = caseIfcConstructionResource(ifcConstructionEquipmentResource);
				if (result == null) result = caseIfcResource(ifcConstructionEquipmentResource);
				if (result == null) result = caseIfcObject(ifcConstructionEquipmentResource);
				if (result == null) result = caseIfcObjectDefinition(ifcConstructionEquipmentResource);
				if (result == null) result = caseIfcRoot(ifcConstructionEquipmentResource);
				if (result == null) result = caseEntity(ifcConstructionEquipmentResource);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_CONSTRUCTION_MATERIAL_RESOURCE: {
				IfcConstructionMaterialResource ifcConstructionMaterialResource = (IfcConstructionMaterialResource)theEObject;
				T result = caseIfcConstructionMaterialResource(ifcConstructionMaterialResource);
				if (result == null) result = caseIfcConstructionResource(ifcConstructionMaterialResource);
				if (result == null) result = caseIfcResource(ifcConstructionMaterialResource);
				if (result == null) result = caseIfcObject(ifcConstructionMaterialResource);
				if (result == null) result = caseIfcObjectDefinition(ifcConstructionMaterialResource);
				if (result == null) result = caseIfcRoot(ifcConstructionMaterialResource);
				if (result == null) result = caseEntity(ifcConstructionMaterialResource);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_CONSTRUCTION_PRODUCT_RESOURCE: {
				IfcConstructionProductResource ifcConstructionProductResource = (IfcConstructionProductResource)theEObject;
				T result = caseIfcConstructionProductResource(ifcConstructionProductResource);
				if (result == null) result = caseIfcConstructionResource(ifcConstructionProductResource);
				if (result == null) result = caseIfcResource(ifcConstructionProductResource);
				if (result == null) result = caseIfcObject(ifcConstructionProductResource);
				if (result == null) result = caseIfcObjectDefinition(ifcConstructionProductResource);
				if (result == null) result = caseIfcRoot(ifcConstructionProductResource);
				if (result == null) result = caseEntity(ifcConstructionProductResource);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_CONSTRUCTION_RESOURCE: {
				IfcConstructionResource ifcConstructionResource = (IfcConstructionResource)theEObject;
				T result = caseIfcConstructionResource(ifcConstructionResource);
				if (result == null) result = caseIfcResource(ifcConstructionResource);
				if (result == null) result = caseIfcObject(ifcConstructionResource);
				if (result == null) result = caseIfcObjectDefinition(ifcConstructionResource);
				if (result == null) result = caseIfcRoot(ifcConstructionResource);
				if (result == null) result = caseEntity(ifcConstructionResource);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_CONTEXT_DEPENDENT_MEASURE_TYPE: {
				IfcContextDependentMeasureType ifcContextDependentMeasureType = (IfcContextDependentMeasureType)theEObject;
				T result = caseIfcContextDependentMeasureType(ifcContextDependentMeasureType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_CONTEXT_DEPENDENT_UNIT: {
				IfcContextDependentUnit ifcContextDependentUnit = (IfcContextDependentUnit)theEObject;
				T result = caseIfcContextDependentUnit(ifcContextDependentUnit);
				if (result == null) result = caseIfcNamedUnit(ifcContextDependentUnit);
				if (result == null) result = caseEntity(ifcContextDependentUnit);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_CONTROL: {
				IfcControl ifcControl = (IfcControl)theEObject;
				T result = caseIfcControl(ifcControl);
				if (result == null) result = caseIfcObject(ifcControl);
				if (result == null) result = caseIfcObjectDefinition(ifcControl);
				if (result == null) result = caseIfcRoot(ifcControl);
				if (result == null) result = caseEntity(ifcControl);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_CONTROLLER_TYPE: {
				IfcControllerType ifcControllerType = (IfcControllerType)theEObject;
				T result = caseIfcControllerType(ifcControllerType);
				if (result == null) result = caseIfcDistributionControlElementType(ifcControllerType);
				if (result == null) result = caseIfcDistributionElementType(ifcControllerType);
				if (result == null) result = caseIfcElementType(ifcControllerType);
				if (result == null) result = caseIfcTypeProduct(ifcControllerType);
				if (result == null) result = caseIfcTypeObject(ifcControllerType);
				if (result == null) result = caseIfcObjectDefinition(ifcControllerType);
				if (result == null) result = caseIfcRoot(ifcControllerType);
				if (result == null) result = caseEntity(ifcControllerType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_CONTROLLER_TYPE_ENUM_TYPE: {
				IfcControllerTypeEnumType ifcControllerTypeEnumType = (IfcControllerTypeEnumType)theEObject;
				T result = caseIfcControllerTypeEnumType(ifcControllerTypeEnumType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_CONVERSION_BASED_UNIT: {
				IfcConversionBasedUnit ifcConversionBasedUnit = (IfcConversionBasedUnit)theEObject;
				T result = caseIfcConversionBasedUnit(ifcConversionBasedUnit);
				if (result == null) result = caseIfcNamedUnit(ifcConversionBasedUnit);
				if (result == null) result = caseEntity(ifcConversionBasedUnit);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_COOLED_BEAM_TYPE: {
				IfcCooledBeamType ifcCooledBeamType = (IfcCooledBeamType)theEObject;
				T result = caseIfcCooledBeamType(ifcCooledBeamType);
				if (result == null) result = caseIfcEnergyConversionDeviceType(ifcCooledBeamType);
				if (result == null) result = caseIfcDistributionFlowElementType(ifcCooledBeamType);
				if (result == null) result = caseIfcDistributionElementType(ifcCooledBeamType);
				if (result == null) result = caseIfcElementType(ifcCooledBeamType);
				if (result == null) result = caseIfcTypeProduct(ifcCooledBeamType);
				if (result == null) result = caseIfcTypeObject(ifcCooledBeamType);
				if (result == null) result = caseIfcObjectDefinition(ifcCooledBeamType);
				if (result == null) result = caseIfcRoot(ifcCooledBeamType);
				if (result == null) result = caseEntity(ifcCooledBeamType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_COOLED_BEAM_TYPE_ENUM_TYPE: {
				IfcCooledBeamTypeEnumType ifcCooledBeamTypeEnumType = (IfcCooledBeamTypeEnumType)theEObject;
				T result = caseIfcCooledBeamTypeEnumType(ifcCooledBeamTypeEnumType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_COOLING_TOWER_TYPE: {
				IfcCoolingTowerType ifcCoolingTowerType = (IfcCoolingTowerType)theEObject;
				T result = caseIfcCoolingTowerType(ifcCoolingTowerType);
				if (result == null) result = caseIfcEnergyConversionDeviceType(ifcCoolingTowerType);
				if (result == null) result = caseIfcDistributionFlowElementType(ifcCoolingTowerType);
				if (result == null) result = caseIfcDistributionElementType(ifcCoolingTowerType);
				if (result == null) result = caseIfcElementType(ifcCoolingTowerType);
				if (result == null) result = caseIfcTypeProduct(ifcCoolingTowerType);
				if (result == null) result = caseIfcTypeObject(ifcCoolingTowerType);
				if (result == null) result = caseIfcObjectDefinition(ifcCoolingTowerType);
				if (result == null) result = caseIfcRoot(ifcCoolingTowerType);
				if (result == null) result = caseEntity(ifcCoolingTowerType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_COOLING_TOWER_TYPE_ENUM_TYPE: {
				IfcCoolingTowerTypeEnumType ifcCoolingTowerTypeEnumType = (IfcCoolingTowerTypeEnumType)theEObject;
				T result = caseIfcCoolingTowerTypeEnumType(ifcCoolingTowerTypeEnumType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_COORDINATED_UNIVERSAL_TIME_OFFSET: {
				IfcCoordinatedUniversalTimeOffset ifcCoordinatedUniversalTimeOffset = (IfcCoordinatedUniversalTimeOffset)theEObject;
				T result = caseIfcCoordinatedUniversalTimeOffset(ifcCoordinatedUniversalTimeOffset);
				if (result == null) result = caseEntity(ifcCoordinatedUniversalTimeOffset);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_COST_ITEM: {
				IfcCostItem ifcCostItem = (IfcCostItem)theEObject;
				T result = caseIfcCostItem(ifcCostItem);
				if (result == null) result = caseIfcControl(ifcCostItem);
				if (result == null) result = caseIfcObject(ifcCostItem);
				if (result == null) result = caseIfcObjectDefinition(ifcCostItem);
				if (result == null) result = caseIfcRoot(ifcCostItem);
				if (result == null) result = caseEntity(ifcCostItem);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_COST_SCHEDULE: {
				IfcCostSchedule ifcCostSchedule = (IfcCostSchedule)theEObject;
				T result = caseIfcCostSchedule(ifcCostSchedule);
				if (result == null) result = caseIfcControl(ifcCostSchedule);
				if (result == null) result = caseIfcObject(ifcCostSchedule);
				if (result == null) result = caseIfcObjectDefinition(ifcCostSchedule);
				if (result == null) result = caseIfcRoot(ifcCostSchedule);
				if (result == null) result = caseEntity(ifcCostSchedule);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_COST_SCHEDULE_TYPE_ENUM_TYPE: {
				IfcCostScheduleTypeEnumType ifcCostScheduleTypeEnumType = (IfcCostScheduleTypeEnumType)theEObject;
				T result = caseIfcCostScheduleTypeEnumType(ifcCostScheduleTypeEnumType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_COST_VALUE: {
				IfcCostValue ifcCostValue = (IfcCostValue)theEObject;
				T result = caseIfcCostValue(ifcCostValue);
				if (result == null) result = caseIfcAppliedValue(ifcCostValue);
				if (result == null) result = caseEntity(ifcCostValue);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_COUNT_MEASURE_TYPE: {
				IfcCountMeasureType ifcCountMeasureType = (IfcCountMeasureType)theEObject;
				T result = caseIfcCountMeasureType(ifcCountMeasureType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_COVERING: {
				IfcCovering ifcCovering = (IfcCovering)theEObject;
				T result = caseIfcCovering(ifcCovering);
				if (result == null) result = caseIfcBuildingElement(ifcCovering);
				if (result == null) result = caseIfcElement(ifcCovering);
				if (result == null) result = caseIfcProduct(ifcCovering);
				if (result == null) result = caseIfcObject(ifcCovering);
				if (result == null) result = caseIfcObjectDefinition(ifcCovering);
				if (result == null) result = caseIfcRoot(ifcCovering);
				if (result == null) result = caseEntity(ifcCovering);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_COVERING_TYPE: {
				IfcCoveringType ifcCoveringType = (IfcCoveringType)theEObject;
				T result = caseIfcCoveringType(ifcCoveringType);
				if (result == null) result = caseIfcBuildingElementType(ifcCoveringType);
				if (result == null) result = caseIfcElementType(ifcCoveringType);
				if (result == null) result = caseIfcTypeProduct(ifcCoveringType);
				if (result == null) result = caseIfcTypeObject(ifcCoveringType);
				if (result == null) result = caseIfcObjectDefinition(ifcCoveringType);
				if (result == null) result = caseIfcRoot(ifcCoveringType);
				if (result == null) result = caseEntity(ifcCoveringType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_COVERING_TYPE_ENUM_TYPE: {
				IfcCoveringTypeEnumType ifcCoveringTypeEnumType = (IfcCoveringTypeEnumType)theEObject;
				T result = caseIfcCoveringTypeEnumType(ifcCoveringTypeEnumType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_CRANE_RAIL_ASHAPE_PROFILE_DEF: {
				IfcCraneRailAShapeProfileDef ifcCraneRailAShapeProfileDef = (IfcCraneRailAShapeProfileDef)theEObject;
				T result = caseIfcCraneRailAShapeProfileDef(ifcCraneRailAShapeProfileDef);
				if (result == null) result = caseIfcParameterizedProfileDef(ifcCraneRailAShapeProfileDef);
				if (result == null) result = caseIfcProfileDef(ifcCraneRailAShapeProfileDef);
				if (result == null) result = caseEntity(ifcCraneRailAShapeProfileDef);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_CRANE_RAIL_FSHAPE_PROFILE_DEF: {
				IfcCraneRailFShapeProfileDef ifcCraneRailFShapeProfileDef = (IfcCraneRailFShapeProfileDef)theEObject;
				T result = caseIfcCraneRailFShapeProfileDef(ifcCraneRailFShapeProfileDef);
				if (result == null) result = caseIfcParameterizedProfileDef(ifcCraneRailFShapeProfileDef);
				if (result == null) result = caseIfcProfileDef(ifcCraneRailFShapeProfileDef);
				if (result == null) result = caseEntity(ifcCraneRailFShapeProfileDef);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_CREW_RESOURCE: {
				IfcCrewResource ifcCrewResource = (IfcCrewResource)theEObject;
				T result = caseIfcCrewResource(ifcCrewResource);
				if (result == null) result = caseIfcConstructionResource(ifcCrewResource);
				if (result == null) result = caseIfcResource(ifcCrewResource);
				if (result == null) result = caseIfcObject(ifcCrewResource);
				if (result == null) result = caseIfcObjectDefinition(ifcCrewResource);
				if (result == null) result = caseIfcRoot(ifcCrewResource);
				if (result == null) result = caseEntity(ifcCrewResource);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_CSG_PRIMITIVE3_D: {
				IfcCsgPrimitive3D ifcCsgPrimitive3D = (IfcCsgPrimitive3D)theEObject;
				T result = caseIfcCsgPrimitive3D(ifcCsgPrimitive3D);
				if (result == null) result = caseIfcGeometricRepresentationItem(ifcCsgPrimitive3D);
				if (result == null) result = caseIfcRepresentationItem(ifcCsgPrimitive3D);
				if (result == null) result = caseEntity(ifcCsgPrimitive3D);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_CSG_SELECT: {
				IfcCsgSelect ifcCsgSelect = (IfcCsgSelect)theEObject;
				T result = caseIfcCsgSelect(ifcCsgSelect);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_CSG_SOLID: {
				IfcCsgSolid ifcCsgSolid = (IfcCsgSolid)theEObject;
				T result = caseIfcCsgSolid(ifcCsgSolid);
				if (result == null) result = caseIfcSolidModel(ifcCsgSolid);
				if (result == null) result = caseIfcGeometricRepresentationItem(ifcCsgSolid);
				if (result == null) result = caseIfcRepresentationItem(ifcCsgSolid);
				if (result == null) result = caseEntity(ifcCsgSolid);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_CSHAPE_PROFILE_DEF: {
				IfcCShapeProfileDef ifcCShapeProfileDef = (IfcCShapeProfileDef)theEObject;
				T result = caseIfcCShapeProfileDef(ifcCShapeProfileDef);
				if (result == null) result = caseIfcParameterizedProfileDef(ifcCShapeProfileDef);
				if (result == null) result = caseIfcProfileDef(ifcCShapeProfileDef);
				if (result == null) result = caseEntity(ifcCShapeProfileDef);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_CURRENCY_ENUM_TYPE: {
				IfcCurrencyEnumType ifcCurrencyEnumType = (IfcCurrencyEnumType)theEObject;
				T result = caseIfcCurrencyEnumType(ifcCurrencyEnumType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_CURRENCY_RELATIONSHIP: {
				IfcCurrencyRelationship ifcCurrencyRelationship = (IfcCurrencyRelationship)theEObject;
				T result = caseIfcCurrencyRelationship(ifcCurrencyRelationship);
				if (result == null) result = caseEntity(ifcCurrencyRelationship);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_CURTAIN_WALL: {
				IfcCurtainWall ifcCurtainWall = (IfcCurtainWall)theEObject;
				T result = caseIfcCurtainWall(ifcCurtainWall);
				if (result == null) result = caseIfcBuildingElement(ifcCurtainWall);
				if (result == null) result = caseIfcElement(ifcCurtainWall);
				if (result == null) result = caseIfcProduct(ifcCurtainWall);
				if (result == null) result = caseIfcObject(ifcCurtainWall);
				if (result == null) result = caseIfcObjectDefinition(ifcCurtainWall);
				if (result == null) result = caseIfcRoot(ifcCurtainWall);
				if (result == null) result = caseEntity(ifcCurtainWall);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_CURTAIN_WALL_TYPE: {
				IfcCurtainWallType ifcCurtainWallType = (IfcCurtainWallType)theEObject;
				T result = caseIfcCurtainWallType(ifcCurtainWallType);
				if (result == null) result = caseIfcBuildingElementType(ifcCurtainWallType);
				if (result == null) result = caseIfcElementType(ifcCurtainWallType);
				if (result == null) result = caseIfcTypeProduct(ifcCurtainWallType);
				if (result == null) result = caseIfcTypeObject(ifcCurtainWallType);
				if (result == null) result = caseIfcObjectDefinition(ifcCurtainWallType);
				if (result == null) result = caseIfcRoot(ifcCurtainWallType);
				if (result == null) result = caseEntity(ifcCurtainWallType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_CURTAIN_WALL_TYPE_ENUM_TYPE: {
				IfcCurtainWallTypeEnumType ifcCurtainWallTypeEnumType = (IfcCurtainWallTypeEnumType)theEObject;
				T result = caseIfcCurtainWallTypeEnumType(ifcCurtainWallTypeEnumType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_CURVATURE_MEASURE_TYPE: {
				IfcCurvatureMeasureType ifcCurvatureMeasureType = (IfcCurvatureMeasureType)theEObject;
				T result = caseIfcCurvatureMeasureType(ifcCurvatureMeasureType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_CURVE: {
				IfcCurve ifcCurve = (IfcCurve)theEObject;
				T result = caseIfcCurve(ifcCurve);
				if (result == null) result = caseIfcGeometricRepresentationItem(ifcCurve);
				if (result == null) result = caseIfcRepresentationItem(ifcCurve);
				if (result == null) result = caseEntity(ifcCurve);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_CURVE_BOUNDED_PLANE: {
				IfcCurveBoundedPlane ifcCurveBoundedPlane = (IfcCurveBoundedPlane)theEObject;
				T result = caseIfcCurveBoundedPlane(ifcCurveBoundedPlane);
				if (result == null) result = caseIfcBoundedSurface(ifcCurveBoundedPlane);
				if (result == null) result = caseIfcSurface(ifcCurveBoundedPlane);
				if (result == null) result = caseIfcGeometricRepresentationItem(ifcCurveBoundedPlane);
				if (result == null) result = caseIfcRepresentationItem(ifcCurveBoundedPlane);
				if (result == null) result = caseEntity(ifcCurveBoundedPlane);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_CURVE_FONT_OR_SCALED_CURVE_FONT_SELECT: {
				IfcCurveFontOrScaledCurveFontSelect ifcCurveFontOrScaledCurveFontSelect = (IfcCurveFontOrScaledCurveFontSelect)theEObject;
				T result = caseIfcCurveFontOrScaledCurveFontSelect(ifcCurveFontOrScaledCurveFontSelect);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_CURVE_OR_EDGE_CURVE: {
				IfcCurveOrEdgeCurve ifcCurveOrEdgeCurve = (IfcCurveOrEdgeCurve)theEObject;
				T result = caseIfcCurveOrEdgeCurve(ifcCurveOrEdgeCurve);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_CURVE_STYLE: {
				IfcCurveStyle ifcCurveStyle = (IfcCurveStyle)theEObject;
				T result = caseIfcCurveStyle(ifcCurveStyle);
				if (result == null) result = caseIfcPresentationStyle(ifcCurveStyle);
				if (result == null) result = caseEntity(ifcCurveStyle);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_CURVE_STYLE_FONT: {
				IfcCurveStyleFont ifcCurveStyleFont = (IfcCurveStyleFont)theEObject;
				T result = caseIfcCurveStyleFont(ifcCurveStyleFont);
				if (result == null) result = caseEntity(ifcCurveStyleFont);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_CURVE_STYLE_FONT_AND_SCALING: {
				IfcCurveStyleFontAndScaling ifcCurveStyleFontAndScaling = (IfcCurveStyleFontAndScaling)theEObject;
				T result = caseIfcCurveStyleFontAndScaling(ifcCurveStyleFontAndScaling);
				if (result == null) result = caseEntity(ifcCurveStyleFontAndScaling);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_CURVE_STYLE_FONT_PATTERN: {
				IfcCurveStyleFontPattern ifcCurveStyleFontPattern = (IfcCurveStyleFontPattern)theEObject;
				T result = caseIfcCurveStyleFontPattern(ifcCurveStyleFontPattern);
				if (result == null) result = caseEntity(ifcCurveStyleFontPattern);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_CURVE_STYLE_FONT_SELECT: {
				IfcCurveStyleFontSelect ifcCurveStyleFontSelect = (IfcCurveStyleFontSelect)theEObject;
				T result = caseIfcCurveStyleFontSelect(ifcCurveStyleFontSelect);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_DAMPER_TYPE: {
				IfcDamperType ifcDamperType = (IfcDamperType)theEObject;
				T result = caseIfcDamperType(ifcDamperType);
				if (result == null) result = caseIfcFlowControllerType(ifcDamperType);
				if (result == null) result = caseIfcDistributionFlowElementType(ifcDamperType);
				if (result == null) result = caseIfcDistributionElementType(ifcDamperType);
				if (result == null) result = caseIfcElementType(ifcDamperType);
				if (result == null) result = caseIfcTypeProduct(ifcDamperType);
				if (result == null) result = caseIfcTypeObject(ifcDamperType);
				if (result == null) result = caseIfcObjectDefinition(ifcDamperType);
				if (result == null) result = caseIfcRoot(ifcDamperType);
				if (result == null) result = caseEntity(ifcDamperType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_DAMPER_TYPE_ENUM_TYPE: {
				IfcDamperTypeEnumType ifcDamperTypeEnumType = (IfcDamperTypeEnumType)theEObject;
				T result = caseIfcDamperTypeEnumType(ifcDamperTypeEnumType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_DATA_ORIGIN_ENUM_TYPE: {
				IfcDataOriginEnumType ifcDataOriginEnumType = (IfcDataOriginEnumType)theEObject;
				T result = caseIfcDataOriginEnumType(ifcDataOriginEnumType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_DATE_AND_TIME: {
				IfcDateAndTime ifcDateAndTime = (IfcDateAndTime)theEObject;
				T result = caseIfcDateAndTime(ifcDateAndTime);
				if (result == null) result = caseEntity(ifcDateAndTime);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_DATE_TIME_SELECT: {
				IfcDateTimeSelect ifcDateTimeSelect = (IfcDateTimeSelect)theEObject;
				T result = caseIfcDateTimeSelect(ifcDateTimeSelect);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_DAY_IN_MONTH_NUMBER_TYPE: {
				IfcDayInMonthNumberType ifcDayInMonthNumberType = (IfcDayInMonthNumberType)theEObject;
				T result = caseIfcDayInMonthNumberType(ifcDayInMonthNumberType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_DAYLIGHT_SAVING_HOUR_TYPE: {
				IfcDaylightSavingHourType ifcDaylightSavingHourType = (IfcDaylightSavingHourType)theEObject;
				T result = caseIfcDaylightSavingHourType(ifcDaylightSavingHourType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_DEFINED_SYMBOL: {
				IfcDefinedSymbol ifcDefinedSymbol = (IfcDefinedSymbol)theEObject;
				T result = caseIfcDefinedSymbol(ifcDefinedSymbol);
				if (result == null) result = caseIfcGeometricRepresentationItem(ifcDefinedSymbol);
				if (result == null) result = caseIfcRepresentationItem(ifcDefinedSymbol);
				if (result == null) result = caseEntity(ifcDefinedSymbol);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_DEFINED_SYMBOL_SELECT: {
				IfcDefinedSymbolSelect ifcDefinedSymbolSelect = (IfcDefinedSymbolSelect)theEObject;
				T result = caseIfcDefinedSymbolSelect(ifcDefinedSymbolSelect);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_DERIVED_MEASURE_VALUE: {
				IfcDerivedMeasureValue ifcDerivedMeasureValue = (IfcDerivedMeasureValue)theEObject;
				T result = caseIfcDerivedMeasureValue(ifcDerivedMeasureValue);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_DERIVED_PROFILE_DEF: {
				IfcDerivedProfileDef ifcDerivedProfileDef = (IfcDerivedProfileDef)theEObject;
				T result = caseIfcDerivedProfileDef(ifcDerivedProfileDef);
				if (result == null) result = caseIfcProfileDef(ifcDerivedProfileDef);
				if (result == null) result = caseEntity(ifcDerivedProfileDef);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_DERIVED_UNIT: {
				IfcDerivedUnit ifcDerivedUnit = (IfcDerivedUnit)theEObject;
				T result = caseIfcDerivedUnit(ifcDerivedUnit);
				if (result == null) result = caseEntity(ifcDerivedUnit);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_DERIVED_UNIT_ELEMENT: {
				IfcDerivedUnitElement ifcDerivedUnitElement = (IfcDerivedUnitElement)theEObject;
				T result = caseIfcDerivedUnitElement(ifcDerivedUnitElement);
				if (result == null) result = caseEntity(ifcDerivedUnitElement);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_DERIVED_UNIT_ENUM_TYPE: {
				IfcDerivedUnitEnumType ifcDerivedUnitEnumType = (IfcDerivedUnitEnumType)theEObject;
				T result = caseIfcDerivedUnitEnumType(ifcDerivedUnitEnumType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_DESCRIPTIVE_MEASURE_TYPE: {
				IfcDescriptiveMeasureType ifcDescriptiveMeasureType = (IfcDescriptiveMeasureType)theEObject;
				T result = caseIfcDescriptiveMeasureType(ifcDescriptiveMeasureType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_DIAMETER_DIMENSION: {
				IfcDiameterDimension ifcDiameterDimension = (IfcDiameterDimension)theEObject;
				T result = caseIfcDiameterDimension(ifcDiameterDimension);
				if (result == null) result = caseIfcDimensionCurveDirectedCallout(ifcDiameterDimension);
				if (result == null) result = caseIfcDraughtingCallout(ifcDiameterDimension);
				if (result == null) result = caseIfcGeometricRepresentationItem(ifcDiameterDimension);
				if (result == null) result = caseIfcRepresentationItem(ifcDiameterDimension);
				if (result == null) result = caseEntity(ifcDiameterDimension);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_DIMENSIONAL_EXPONENTS: {
				IfcDimensionalExponents ifcDimensionalExponents = (IfcDimensionalExponents)theEObject;
				T result = caseIfcDimensionalExponents(ifcDimensionalExponents);
				if (result == null) result = caseEntity(ifcDimensionalExponents);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_DIMENSION_CALLOUT_RELATIONSHIP: {
				IfcDimensionCalloutRelationship ifcDimensionCalloutRelationship = (IfcDimensionCalloutRelationship)theEObject;
				T result = caseIfcDimensionCalloutRelationship(ifcDimensionCalloutRelationship);
				if (result == null) result = caseIfcDraughtingCalloutRelationship(ifcDimensionCalloutRelationship);
				if (result == null) result = caseEntity(ifcDimensionCalloutRelationship);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_DIMENSION_COUNT_TYPE: {
				IfcDimensionCountType ifcDimensionCountType = (IfcDimensionCountType)theEObject;
				T result = caseIfcDimensionCountType(ifcDimensionCountType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_DIMENSION_CURVE: {
				IfcDimensionCurve ifcDimensionCurve = (IfcDimensionCurve)theEObject;
				T result = caseIfcDimensionCurve(ifcDimensionCurve);
				if (result == null) result = caseIfcAnnotationCurveOccurrence(ifcDimensionCurve);
				if (result == null) result = caseIfcAnnotationOccurrence(ifcDimensionCurve);
				if (result == null) result = caseIfcStyledItem(ifcDimensionCurve);
				if (result == null) result = caseIfcRepresentationItem(ifcDimensionCurve);
				if (result == null) result = caseEntity(ifcDimensionCurve);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_DIMENSION_CURVE_DIRECTED_CALLOUT: {
				IfcDimensionCurveDirectedCallout ifcDimensionCurveDirectedCallout = (IfcDimensionCurveDirectedCallout)theEObject;
				T result = caseIfcDimensionCurveDirectedCallout(ifcDimensionCurveDirectedCallout);
				if (result == null) result = caseIfcDraughtingCallout(ifcDimensionCurveDirectedCallout);
				if (result == null) result = caseIfcGeometricRepresentationItem(ifcDimensionCurveDirectedCallout);
				if (result == null) result = caseIfcRepresentationItem(ifcDimensionCurveDirectedCallout);
				if (result == null) result = caseEntity(ifcDimensionCurveDirectedCallout);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_DIMENSION_CURVE_TERMINATOR: {
				IfcDimensionCurveTerminator ifcDimensionCurveTerminator = (IfcDimensionCurveTerminator)theEObject;
				T result = caseIfcDimensionCurveTerminator(ifcDimensionCurveTerminator);
				if (result == null) result = caseIfcTerminatorSymbol(ifcDimensionCurveTerminator);
				if (result == null) result = caseIfcAnnotationSymbolOccurrence(ifcDimensionCurveTerminator);
				if (result == null) result = caseIfcAnnotationOccurrence(ifcDimensionCurveTerminator);
				if (result == null) result = caseIfcStyledItem(ifcDimensionCurveTerminator);
				if (result == null) result = caseIfcRepresentationItem(ifcDimensionCurveTerminator);
				if (result == null) result = caseEntity(ifcDimensionCurveTerminator);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_DIMENSION_EXTENT_USAGE_TYPE: {
				IfcDimensionExtentUsageType ifcDimensionExtentUsageType = (IfcDimensionExtentUsageType)theEObject;
				T result = caseIfcDimensionExtentUsageType(ifcDimensionExtentUsageType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_DIMENSION_PAIR: {
				IfcDimensionPair ifcDimensionPair = (IfcDimensionPair)theEObject;
				T result = caseIfcDimensionPair(ifcDimensionPair);
				if (result == null) result = caseIfcDraughtingCalloutRelationship(ifcDimensionPair);
				if (result == null) result = caseEntity(ifcDimensionPair);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_DIRECTION: {
				IfcDirection ifcDirection = (IfcDirection)theEObject;
				T result = caseIfcDirection(ifcDirection);
				if (result == null) result = caseIfcGeometricRepresentationItem(ifcDirection);
				if (result == null) result = caseIfcRepresentationItem(ifcDirection);
				if (result == null) result = caseEntity(ifcDirection);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_DIRECTION_SENSE_ENUM_TYPE: {
				IfcDirectionSenseEnumType ifcDirectionSenseEnumType = (IfcDirectionSenseEnumType)theEObject;
				T result = caseIfcDirectionSenseEnumType(ifcDirectionSenseEnumType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_DISCRETE_ACCESSORY: {
				IfcDiscreteAccessory ifcDiscreteAccessory = (IfcDiscreteAccessory)theEObject;
				T result = caseIfcDiscreteAccessory(ifcDiscreteAccessory);
				if (result == null) result = caseIfcElementComponent(ifcDiscreteAccessory);
				if (result == null) result = caseIfcElement(ifcDiscreteAccessory);
				if (result == null) result = caseIfcProduct(ifcDiscreteAccessory);
				if (result == null) result = caseIfcObject(ifcDiscreteAccessory);
				if (result == null) result = caseIfcObjectDefinition(ifcDiscreteAccessory);
				if (result == null) result = caseIfcRoot(ifcDiscreteAccessory);
				if (result == null) result = caseEntity(ifcDiscreteAccessory);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_DISCRETE_ACCESSORY_TYPE: {
				IfcDiscreteAccessoryType ifcDiscreteAccessoryType = (IfcDiscreteAccessoryType)theEObject;
				T result = caseIfcDiscreteAccessoryType(ifcDiscreteAccessoryType);
				if (result == null) result = caseIfcElementComponentType(ifcDiscreteAccessoryType);
				if (result == null) result = caseIfcElementType(ifcDiscreteAccessoryType);
				if (result == null) result = caseIfcTypeProduct(ifcDiscreteAccessoryType);
				if (result == null) result = caseIfcTypeObject(ifcDiscreteAccessoryType);
				if (result == null) result = caseIfcObjectDefinition(ifcDiscreteAccessoryType);
				if (result == null) result = caseIfcRoot(ifcDiscreteAccessoryType);
				if (result == null) result = caseEntity(ifcDiscreteAccessoryType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_DISTRIBUTION_CHAMBER_ELEMENT: {
				IfcDistributionChamberElement ifcDistributionChamberElement = (IfcDistributionChamberElement)theEObject;
				T result = caseIfcDistributionChamberElement(ifcDistributionChamberElement);
				if (result == null) result = caseIfcDistributionFlowElement(ifcDistributionChamberElement);
				if (result == null) result = caseIfcDistributionElement(ifcDistributionChamberElement);
				if (result == null) result = caseIfcElement(ifcDistributionChamberElement);
				if (result == null) result = caseIfcProduct(ifcDistributionChamberElement);
				if (result == null) result = caseIfcObject(ifcDistributionChamberElement);
				if (result == null) result = caseIfcObjectDefinition(ifcDistributionChamberElement);
				if (result == null) result = caseIfcRoot(ifcDistributionChamberElement);
				if (result == null) result = caseEntity(ifcDistributionChamberElement);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_DISTRIBUTION_CHAMBER_ELEMENT_TYPE: {
				IfcDistributionChamberElementType ifcDistributionChamberElementType = (IfcDistributionChamberElementType)theEObject;
				T result = caseIfcDistributionChamberElementType(ifcDistributionChamberElementType);
				if (result == null) result = caseIfcDistributionFlowElementType(ifcDistributionChamberElementType);
				if (result == null) result = caseIfcDistributionElementType(ifcDistributionChamberElementType);
				if (result == null) result = caseIfcElementType(ifcDistributionChamberElementType);
				if (result == null) result = caseIfcTypeProduct(ifcDistributionChamberElementType);
				if (result == null) result = caseIfcTypeObject(ifcDistributionChamberElementType);
				if (result == null) result = caseIfcObjectDefinition(ifcDistributionChamberElementType);
				if (result == null) result = caseIfcRoot(ifcDistributionChamberElementType);
				if (result == null) result = caseEntity(ifcDistributionChamberElementType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_DISTRIBUTION_CHAMBER_ELEMENT_TYPE_ENUM_TYPE: {
				IfcDistributionChamberElementTypeEnumType ifcDistributionChamberElementTypeEnumType = (IfcDistributionChamberElementTypeEnumType)theEObject;
				T result = caseIfcDistributionChamberElementTypeEnumType(ifcDistributionChamberElementTypeEnumType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_DISTRIBUTION_CONTROL_ELEMENT: {
				IfcDistributionControlElement ifcDistributionControlElement = (IfcDistributionControlElement)theEObject;
				T result = caseIfcDistributionControlElement(ifcDistributionControlElement);
				if (result == null) result = caseIfcDistributionElement(ifcDistributionControlElement);
				if (result == null) result = caseIfcElement(ifcDistributionControlElement);
				if (result == null) result = caseIfcProduct(ifcDistributionControlElement);
				if (result == null) result = caseIfcObject(ifcDistributionControlElement);
				if (result == null) result = caseIfcObjectDefinition(ifcDistributionControlElement);
				if (result == null) result = caseIfcRoot(ifcDistributionControlElement);
				if (result == null) result = caseEntity(ifcDistributionControlElement);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_DISTRIBUTION_CONTROL_ELEMENT_TYPE: {
				IfcDistributionControlElementType ifcDistributionControlElementType = (IfcDistributionControlElementType)theEObject;
				T result = caseIfcDistributionControlElementType(ifcDistributionControlElementType);
				if (result == null) result = caseIfcDistributionElementType(ifcDistributionControlElementType);
				if (result == null) result = caseIfcElementType(ifcDistributionControlElementType);
				if (result == null) result = caseIfcTypeProduct(ifcDistributionControlElementType);
				if (result == null) result = caseIfcTypeObject(ifcDistributionControlElementType);
				if (result == null) result = caseIfcObjectDefinition(ifcDistributionControlElementType);
				if (result == null) result = caseIfcRoot(ifcDistributionControlElementType);
				if (result == null) result = caseEntity(ifcDistributionControlElementType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_DISTRIBUTION_ELEMENT: {
				IfcDistributionElement ifcDistributionElement = (IfcDistributionElement)theEObject;
				T result = caseIfcDistributionElement(ifcDistributionElement);
				if (result == null) result = caseIfcElement(ifcDistributionElement);
				if (result == null) result = caseIfcProduct(ifcDistributionElement);
				if (result == null) result = caseIfcObject(ifcDistributionElement);
				if (result == null) result = caseIfcObjectDefinition(ifcDistributionElement);
				if (result == null) result = caseIfcRoot(ifcDistributionElement);
				if (result == null) result = caseEntity(ifcDistributionElement);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_DISTRIBUTION_ELEMENT_TYPE: {
				IfcDistributionElementType ifcDistributionElementType = (IfcDistributionElementType)theEObject;
				T result = caseIfcDistributionElementType(ifcDistributionElementType);
				if (result == null) result = caseIfcElementType(ifcDistributionElementType);
				if (result == null) result = caseIfcTypeProduct(ifcDistributionElementType);
				if (result == null) result = caseIfcTypeObject(ifcDistributionElementType);
				if (result == null) result = caseIfcObjectDefinition(ifcDistributionElementType);
				if (result == null) result = caseIfcRoot(ifcDistributionElementType);
				if (result == null) result = caseEntity(ifcDistributionElementType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_DISTRIBUTION_FLOW_ELEMENT: {
				IfcDistributionFlowElement ifcDistributionFlowElement = (IfcDistributionFlowElement)theEObject;
				T result = caseIfcDistributionFlowElement(ifcDistributionFlowElement);
				if (result == null) result = caseIfcDistributionElement(ifcDistributionFlowElement);
				if (result == null) result = caseIfcElement(ifcDistributionFlowElement);
				if (result == null) result = caseIfcProduct(ifcDistributionFlowElement);
				if (result == null) result = caseIfcObject(ifcDistributionFlowElement);
				if (result == null) result = caseIfcObjectDefinition(ifcDistributionFlowElement);
				if (result == null) result = caseIfcRoot(ifcDistributionFlowElement);
				if (result == null) result = caseEntity(ifcDistributionFlowElement);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_DISTRIBUTION_FLOW_ELEMENT_TYPE: {
				IfcDistributionFlowElementType ifcDistributionFlowElementType = (IfcDistributionFlowElementType)theEObject;
				T result = caseIfcDistributionFlowElementType(ifcDistributionFlowElementType);
				if (result == null) result = caseIfcDistributionElementType(ifcDistributionFlowElementType);
				if (result == null) result = caseIfcElementType(ifcDistributionFlowElementType);
				if (result == null) result = caseIfcTypeProduct(ifcDistributionFlowElementType);
				if (result == null) result = caseIfcTypeObject(ifcDistributionFlowElementType);
				if (result == null) result = caseIfcObjectDefinition(ifcDistributionFlowElementType);
				if (result == null) result = caseIfcRoot(ifcDistributionFlowElementType);
				if (result == null) result = caseEntity(ifcDistributionFlowElementType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_DISTRIBUTION_PORT: {
				IfcDistributionPort ifcDistributionPort = (IfcDistributionPort)theEObject;
				T result = caseIfcDistributionPort(ifcDistributionPort);
				if (result == null) result = caseIfcPort(ifcDistributionPort);
				if (result == null) result = caseIfcProduct(ifcDistributionPort);
				if (result == null) result = caseIfcObject(ifcDistributionPort);
				if (result == null) result = caseIfcObjectDefinition(ifcDistributionPort);
				if (result == null) result = caseIfcRoot(ifcDistributionPort);
				if (result == null) result = caseEntity(ifcDistributionPort);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_DOCUMENT_CONFIDENTIALITY_ENUM_TYPE: {
				IfcDocumentConfidentialityEnumType ifcDocumentConfidentialityEnumType = (IfcDocumentConfidentialityEnumType)theEObject;
				T result = caseIfcDocumentConfidentialityEnumType(ifcDocumentConfidentialityEnumType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_DOCUMENT_ELECTRONIC_FORMAT: {
				IfcDocumentElectronicFormat ifcDocumentElectronicFormat = (IfcDocumentElectronicFormat)theEObject;
				T result = caseIfcDocumentElectronicFormat(ifcDocumentElectronicFormat);
				if (result == null) result = caseEntity(ifcDocumentElectronicFormat);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_DOCUMENT_INFORMATION: {
				IfcDocumentInformation ifcDocumentInformation = (IfcDocumentInformation)theEObject;
				T result = caseIfcDocumentInformation(ifcDocumentInformation);
				if (result == null) result = caseEntity(ifcDocumentInformation);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_DOCUMENT_INFORMATION_RELATIONSHIP: {
				IfcDocumentInformationRelationship ifcDocumentInformationRelationship = (IfcDocumentInformationRelationship)theEObject;
				T result = caseIfcDocumentInformationRelationship(ifcDocumentInformationRelationship);
				if (result == null) result = caseEntity(ifcDocumentInformationRelationship);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_DOCUMENT_REFERENCE: {
				IfcDocumentReference ifcDocumentReference = (IfcDocumentReference)theEObject;
				T result = caseIfcDocumentReference(ifcDocumentReference);
				if (result == null) result = caseIfcExternalReference(ifcDocumentReference);
				if (result == null) result = caseEntity(ifcDocumentReference);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_DOCUMENT_SELECT: {
				IfcDocumentSelect ifcDocumentSelect = (IfcDocumentSelect)theEObject;
				T result = caseIfcDocumentSelect(ifcDocumentSelect);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_DOCUMENT_STATUS_ENUM_TYPE: {
				IfcDocumentStatusEnumType ifcDocumentStatusEnumType = (IfcDocumentStatusEnumType)theEObject;
				T result = caseIfcDocumentStatusEnumType(ifcDocumentStatusEnumType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_DOOR: {
				IfcDoor ifcDoor = (IfcDoor)theEObject;
				T result = caseIfcDoor(ifcDoor);
				if (result == null) result = caseIfcBuildingElement(ifcDoor);
				if (result == null) result = caseIfcElement(ifcDoor);
				if (result == null) result = caseIfcProduct(ifcDoor);
				if (result == null) result = caseIfcObject(ifcDoor);
				if (result == null) result = caseIfcObjectDefinition(ifcDoor);
				if (result == null) result = caseIfcRoot(ifcDoor);
				if (result == null) result = caseEntity(ifcDoor);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_DOOR_LINING_PROPERTIES: {
				IfcDoorLiningProperties ifcDoorLiningProperties = (IfcDoorLiningProperties)theEObject;
				T result = caseIfcDoorLiningProperties(ifcDoorLiningProperties);
				if (result == null) result = caseIfcPropertySetDefinition(ifcDoorLiningProperties);
				if (result == null) result = caseIfcPropertyDefinition(ifcDoorLiningProperties);
				if (result == null) result = caseIfcRoot(ifcDoorLiningProperties);
				if (result == null) result = caseEntity(ifcDoorLiningProperties);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_DOOR_PANEL_OPERATION_ENUM_TYPE: {
				IfcDoorPanelOperationEnumType ifcDoorPanelOperationEnumType = (IfcDoorPanelOperationEnumType)theEObject;
				T result = caseIfcDoorPanelOperationEnumType(ifcDoorPanelOperationEnumType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_DOOR_PANEL_POSITION_ENUM_TYPE: {
				IfcDoorPanelPositionEnumType ifcDoorPanelPositionEnumType = (IfcDoorPanelPositionEnumType)theEObject;
				T result = caseIfcDoorPanelPositionEnumType(ifcDoorPanelPositionEnumType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_DOOR_PANEL_PROPERTIES: {
				IfcDoorPanelProperties ifcDoorPanelProperties = (IfcDoorPanelProperties)theEObject;
				T result = caseIfcDoorPanelProperties(ifcDoorPanelProperties);
				if (result == null) result = caseIfcPropertySetDefinition(ifcDoorPanelProperties);
				if (result == null) result = caseIfcPropertyDefinition(ifcDoorPanelProperties);
				if (result == null) result = caseIfcRoot(ifcDoorPanelProperties);
				if (result == null) result = caseEntity(ifcDoorPanelProperties);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_DOOR_STYLE: {
				IfcDoorStyle ifcDoorStyle = (IfcDoorStyle)theEObject;
				T result = caseIfcDoorStyle(ifcDoorStyle);
				if (result == null) result = caseIfcTypeProduct(ifcDoorStyle);
				if (result == null) result = caseIfcTypeObject(ifcDoorStyle);
				if (result == null) result = caseIfcObjectDefinition(ifcDoorStyle);
				if (result == null) result = caseIfcRoot(ifcDoorStyle);
				if (result == null) result = caseEntity(ifcDoorStyle);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_DOOR_STYLE_CONSTRUCTION_ENUM_TYPE: {
				IfcDoorStyleConstructionEnumType ifcDoorStyleConstructionEnumType = (IfcDoorStyleConstructionEnumType)theEObject;
				T result = caseIfcDoorStyleConstructionEnumType(ifcDoorStyleConstructionEnumType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_DOOR_STYLE_OPERATION_ENUM_TYPE: {
				IfcDoorStyleOperationEnumType ifcDoorStyleOperationEnumType = (IfcDoorStyleOperationEnumType)theEObject;
				T result = caseIfcDoorStyleOperationEnumType(ifcDoorStyleOperationEnumType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_DOSE_EQUIVALENT_MEASURE_TYPE: {
				IfcDoseEquivalentMeasureType ifcDoseEquivalentMeasureType = (IfcDoseEquivalentMeasureType)theEObject;
				T result = caseIfcDoseEquivalentMeasureType(ifcDoseEquivalentMeasureType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_DRAUGHTING_CALLOUT: {
				IfcDraughtingCallout ifcDraughtingCallout = (IfcDraughtingCallout)theEObject;
				T result = caseIfcDraughtingCallout(ifcDraughtingCallout);
				if (result == null) result = caseIfcGeometricRepresentationItem(ifcDraughtingCallout);
				if (result == null) result = caseIfcRepresentationItem(ifcDraughtingCallout);
				if (result == null) result = caseEntity(ifcDraughtingCallout);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_DRAUGHTING_CALLOUT_ELEMENT: {
				IfcDraughtingCalloutElement ifcDraughtingCalloutElement = (IfcDraughtingCalloutElement)theEObject;
				T result = caseIfcDraughtingCalloutElement(ifcDraughtingCalloutElement);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_DRAUGHTING_CALLOUT_RELATIONSHIP: {
				IfcDraughtingCalloutRelationship ifcDraughtingCalloutRelationship = (IfcDraughtingCalloutRelationship)theEObject;
				T result = caseIfcDraughtingCalloutRelationship(ifcDraughtingCalloutRelationship);
				if (result == null) result = caseEntity(ifcDraughtingCalloutRelationship);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_DRAUGHTING_PRE_DEFINED_COLOUR: {
				IfcDraughtingPreDefinedColour ifcDraughtingPreDefinedColour = (IfcDraughtingPreDefinedColour)theEObject;
				T result = caseIfcDraughtingPreDefinedColour(ifcDraughtingPreDefinedColour);
				if (result == null) result = caseIfcPreDefinedColour(ifcDraughtingPreDefinedColour);
				if (result == null) result = caseIfcPreDefinedItem(ifcDraughtingPreDefinedColour);
				if (result == null) result = caseEntity(ifcDraughtingPreDefinedColour);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_DRAUGHTING_PRE_DEFINED_CURVE_FONT: {
				IfcDraughtingPreDefinedCurveFont ifcDraughtingPreDefinedCurveFont = (IfcDraughtingPreDefinedCurveFont)theEObject;
				T result = caseIfcDraughtingPreDefinedCurveFont(ifcDraughtingPreDefinedCurveFont);
				if (result == null) result = caseIfcPreDefinedCurveFont(ifcDraughtingPreDefinedCurveFont);
				if (result == null) result = caseIfcPreDefinedItem(ifcDraughtingPreDefinedCurveFont);
				if (result == null) result = caseEntity(ifcDraughtingPreDefinedCurveFont);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_DRAUGHTING_PRE_DEFINED_TEXT_FONT: {
				IfcDraughtingPreDefinedTextFont ifcDraughtingPreDefinedTextFont = (IfcDraughtingPreDefinedTextFont)theEObject;
				T result = caseIfcDraughtingPreDefinedTextFont(ifcDraughtingPreDefinedTextFont);
				if (result == null) result = caseIfcPreDefinedTextFont(ifcDraughtingPreDefinedTextFont);
				if (result == null) result = caseIfcPreDefinedItem(ifcDraughtingPreDefinedTextFont);
				if (result == null) result = caseEntity(ifcDraughtingPreDefinedTextFont);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_DUCT_FITTING_TYPE: {
				IfcDuctFittingType ifcDuctFittingType = (IfcDuctFittingType)theEObject;
				T result = caseIfcDuctFittingType(ifcDuctFittingType);
				if (result == null) result = caseIfcFlowFittingType(ifcDuctFittingType);
				if (result == null) result = caseIfcDistributionFlowElementType(ifcDuctFittingType);
				if (result == null) result = caseIfcDistributionElementType(ifcDuctFittingType);
				if (result == null) result = caseIfcElementType(ifcDuctFittingType);
				if (result == null) result = caseIfcTypeProduct(ifcDuctFittingType);
				if (result == null) result = caseIfcTypeObject(ifcDuctFittingType);
				if (result == null) result = caseIfcObjectDefinition(ifcDuctFittingType);
				if (result == null) result = caseIfcRoot(ifcDuctFittingType);
				if (result == null) result = caseEntity(ifcDuctFittingType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_DUCT_FITTING_TYPE_ENUM_TYPE: {
				IfcDuctFittingTypeEnumType ifcDuctFittingTypeEnumType = (IfcDuctFittingTypeEnumType)theEObject;
				T result = caseIfcDuctFittingTypeEnumType(ifcDuctFittingTypeEnumType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_DUCT_SEGMENT_TYPE: {
				IfcDuctSegmentType ifcDuctSegmentType = (IfcDuctSegmentType)theEObject;
				T result = caseIfcDuctSegmentType(ifcDuctSegmentType);
				if (result == null) result = caseIfcFlowSegmentType(ifcDuctSegmentType);
				if (result == null) result = caseIfcDistributionFlowElementType(ifcDuctSegmentType);
				if (result == null) result = caseIfcDistributionElementType(ifcDuctSegmentType);
				if (result == null) result = caseIfcElementType(ifcDuctSegmentType);
				if (result == null) result = caseIfcTypeProduct(ifcDuctSegmentType);
				if (result == null) result = caseIfcTypeObject(ifcDuctSegmentType);
				if (result == null) result = caseIfcObjectDefinition(ifcDuctSegmentType);
				if (result == null) result = caseIfcRoot(ifcDuctSegmentType);
				if (result == null) result = caseEntity(ifcDuctSegmentType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_DUCT_SEGMENT_TYPE_ENUM_TYPE: {
				IfcDuctSegmentTypeEnumType ifcDuctSegmentTypeEnumType = (IfcDuctSegmentTypeEnumType)theEObject;
				T result = caseIfcDuctSegmentTypeEnumType(ifcDuctSegmentTypeEnumType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_DUCT_SILENCER_TYPE: {
				IfcDuctSilencerType ifcDuctSilencerType = (IfcDuctSilencerType)theEObject;
				T result = caseIfcDuctSilencerType(ifcDuctSilencerType);
				if (result == null) result = caseIfcFlowTreatmentDeviceType(ifcDuctSilencerType);
				if (result == null) result = caseIfcDistributionFlowElementType(ifcDuctSilencerType);
				if (result == null) result = caseIfcDistributionElementType(ifcDuctSilencerType);
				if (result == null) result = caseIfcElementType(ifcDuctSilencerType);
				if (result == null) result = caseIfcTypeProduct(ifcDuctSilencerType);
				if (result == null) result = caseIfcTypeObject(ifcDuctSilencerType);
				if (result == null) result = caseIfcObjectDefinition(ifcDuctSilencerType);
				if (result == null) result = caseIfcRoot(ifcDuctSilencerType);
				if (result == null) result = caseEntity(ifcDuctSilencerType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_DUCT_SILENCER_TYPE_ENUM_TYPE: {
				IfcDuctSilencerTypeEnumType ifcDuctSilencerTypeEnumType = (IfcDuctSilencerTypeEnumType)theEObject;
				T result = caseIfcDuctSilencerTypeEnumType(ifcDuctSilencerTypeEnumType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_DYNAMIC_VISCOSITY_MEASURE_TYPE: {
				IfcDynamicViscosityMeasureType ifcDynamicViscosityMeasureType = (IfcDynamicViscosityMeasureType)theEObject;
				T result = caseIfcDynamicViscosityMeasureType(ifcDynamicViscosityMeasureType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_EDGE: {
				IfcEdge ifcEdge = (IfcEdge)theEObject;
				T result = caseIfcEdge(ifcEdge);
				if (result == null) result = caseIfcTopologicalRepresentationItem(ifcEdge);
				if (result == null) result = caseIfcRepresentationItem(ifcEdge);
				if (result == null) result = caseEntity(ifcEdge);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_EDGE_CURVE: {
				IfcEdgeCurve ifcEdgeCurve = (IfcEdgeCurve)theEObject;
				T result = caseIfcEdgeCurve(ifcEdgeCurve);
				if (result == null) result = caseIfcEdge(ifcEdgeCurve);
				if (result == null) result = caseIfcTopologicalRepresentationItem(ifcEdgeCurve);
				if (result == null) result = caseIfcRepresentationItem(ifcEdgeCurve);
				if (result == null) result = caseEntity(ifcEdgeCurve);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_EDGE_FEATURE: {
				IfcEdgeFeature ifcEdgeFeature = (IfcEdgeFeature)theEObject;
				T result = caseIfcEdgeFeature(ifcEdgeFeature);
				if (result == null) result = caseIfcFeatureElementSubtraction(ifcEdgeFeature);
				if (result == null) result = caseIfcFeatureElement(ifcEdgeFeature);
				if (result == null) result = caseIfcElement(ifcEdgeFeature);
				if (result == null) result = caseIfcProduct(ifcEdgeFeature);
				if (result == null) result = caseIfcObject(ifcEdgeFeature);
				if (result == null) result = caseIfcObjectDefinition(ifcEdgeFeature);
				if (result == null) result = caseIfcRoot(ifcEdgeFeature);
				if (result == null) result = caseEntity(ifcEdgeFeature);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_EDGE_LOOP: {
				IfcEdgeLoop ifcEdgeLoop = (IfcEdgeLoop)theEObject;
				T result = caseIfcEdgeLoop(ifcEdgeLoop);
				if (result == null) result = caseIfcLoop(ifcEdgeLoop);
				if (result == null) result = caseIfcTopologicalRepresentationItem(ifcEdgeLoop);
				if (result == null) result = caseIfcRepresentationItem(ifcEdgeLoop);
				if (result == null) result = caseEntity(ifcEdgeLoop);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_ELECTRICAL_BASE_PROPERTIES: {
				IfcElectricalBaseProperties ifcElectricalBaseProperties = (IfcElectricalBaseProperties)theEObject;
				T result = caseIfcElectricalBaseProperties(ifcElectricalBaseProperties);
				if (result == null) result = caseIfcEnergyProperties(ifcElectricalBaseProperties);
				if (result == null) result = caseIfcPropertySetDefinition(ifcElectricalBaseProperties);
				if (result == null) result = caseIfcPropertyDefinition(ifcElectricalBaseProperties);
				if (result == null) result = caseIfcRoot(ifcElectricalBaseProperties);
				if (result == null) result = caseEntity(ifcElectricalBaseProperties);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_ELECTRICAL_CIRCUIT: {
				IfcElectricalCircuit ifcElectricalCircuit = (IfcElectricalCircuit)theEObject;
				T result = caseIfcElectricalCircuit(ifcElectricalCircuit);
				if (result == null) result = caseIfcSystem(ifcElectricalCircuit);
				if (result == null) result = caseIfcGroup(ifcElectricalCircuit);
				if (result == null) result = caseIfcObject(ifcElectricalCircuit);
				if (result == null) result = caseIfcObjectDefinition(ifcElectricalCircuit);
				if (result == null) result = caseIfcRoot(ifcElectricalCircuit);
				if (result == null) result = caseEntity(ifcElectricalCircuit);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_ELECTRICAL_ELEMENT: {
				IfcElectricalElement ifcElectricalElement = (IfcElectricalElement)theEObject;
				T result = caseIfcElectricalElement(ifcElectricalElement);
				if (result == null) result = caseIfcElement(ifcElectricalElement);
				if (result == null) result = caseIfcProduct(ifcElectricalElement);
				if (result == null) result = caseIfcObject(ifcElectricalElement);
				if (result == null) result = caseIfcObjectDefinition(ifcElectricalElement);
				if (result == null) result = caseIfcRoot(ifcElectricalElement);
				if (result == null) result = caseEntity(ifcElectricalElement);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_ELECTRIC_APPLIANCE_TYPE: {
				IfcElectricApplianceType ifcElectricApplianceType = (IfcElectricApplianceType)theEObject;
				T result = caseIfcElectricApplianceType(ifcElectricApplianceType);
				if (result == null) result = caseIfcFlowTerminalType(ifcElectricApplianceType);
				if (result == null) result = caseIfcDistributionFlowElementType(ifcElectricApplianceType);
				if (result == null) result = caseIfcDistributionElementType(ifcElectricApplianceType);
				if (result == null) result = caseIfcElementType(ifcElectricApplianceType);
				if (result == null) result = caseIfcTypeProduct(ifcElectricApplianceType);
				if (result == null) result = caseIfcTypeObject(ifcElectricApplianceType);
				if (result == null) result = caseIfcObjectDefinition(ifcElectricApplianceType);
				if (result == null) result = caseIfcRoot(ifcElectricApplianceType);
				if (result == null) result = caseEntity(ifcElectricApplianceType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_ELECTRIC_APPLIANCE_TYPE_ENUM_TYPE: {
				IfcElectricApplianceTypeEnumType ifcElectricApplianceTypeEnumType = (IfcElectricApplianceTypeEnumType)theEObject;
				T result = caseIfcElectricApplianceTypeEnumType(ifcElectricApplianceTypeEnumType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_ELECTRIC_CAPACITANCE_MEASURE_TYPE: {
				IfcElectricCapacitanceMeasureType ifcElectricCapacitanceMeasureType = (IfcElectricCapacitanceMeasureType)theEObject;
				T result = caseIfcElectricCapacitanceMeasureType(ifcElectricCapacitanceMeasureType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_ELECTRIC_CHARGE_MEASURE_TYPE: {
				IfcElectricChargeMeasureType ifcElectricChargeMeasureType = (IfcElectricChargeMeasureType)theEObject;
				T result = caseIfcElectricChargeMeasureType(ifcElectricChargeMeasureType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_ELECTRIC_CONDUCTANCE_MEASURE_TYPE: {
				IfcElectricConductanceMeasureType ifcElectricConductanceMeasureType = (IfcElectricConductanceMeasureType)theEObject;
				T result = caseIfcElectricConductanceMeasureType(ifcElectricConductanceMeasureType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_ELECTRIC_CURRENT_ENUM_TYPE: {
				IfcElectricCurrentEnumType ifcElectricCurrentEnumType = (IfcElectricCurrentEnumType)theEObject;
				T result = caseIfcElectricCurrentEnumType(ifcElectricCurrentEnumType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_ELECTRIC_CURRENT_MEASURE_TYPE: {
				IfcElectricCurrentMeasureType ifcElectricCurrentMeasureType = (IfcElectricCurrentMeasureType)theEObject;
				T result = caseIfcElectricCurrentMeasureType(ifcElectricCurrentMeasureType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_ELECTRIC_DISTRIBUTION_POINT: {
				IfcElectricDistributionPoint ifcElectricDistributionPoint = (IfcElectricDistributionPoint)theEObject;
				T result = caseIfcElectricDistributionPoint(ifcElectricDistributionPoint);
				if (result == null) result = caseIfcFlowController(ifcElectricDistributionPoint);
				if (result == null) result = caseIfcDistributionFlowElement(ifcElectricDistributionPoint);
				if (result == null) result = caseIfcDistributionElement(ifcElectricDistributionPoint);
				if (result == null) result = caseIfcElement(ifcElectricDistributionPoint);
				if (result == null) result = caseIfcProduct(ifcElectricDistributionPoint);
				if (result == null) result = caseIfcObject(ifcElectricDistributionPoint);
				if (result == null) result = caseIfcObjectDefinition(ifcElectricDistributionPoint);
				if (result == null) result = caseIfcRoot(ifcElectricDistributionPoint);
				if (result == null) result = caseEntity(ifcElectricDistributionPoint);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_ELECTRIC_DISTRIBUTION_POINT_FUNCTION_ENUM_TYPE: {
				IfcElectricDistributionPointFunctionEnumType ifcElectricDistributionPointFunctionEnumType = (IfcElectricDistributionPointFunctionEnumType)theEObject;
				T result = caseIfcElectricDistributionPointFunctionEnumType(ifcElectricDistributionPointFunctionEnumType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_ELECTRIC_FLOW_STORAGE_DEVICE_TYPE: {
				IfcElectricFlowStorageDeviceType ifcElectricFlowStorageDeviceType = (IfcElectricFlowStorageDeviceType)theEObject;
				T result = caseIfcElectricFlowStorageDeviceType(ifcElectricFlowStorageDeviceType);
				if (result == null) result = caseIfcFlowStorageDeviceType(ifcElectricFlowStorageDeviceType);
				if (result == null) result = caseIfcDistributionFlowElementType(ifcElectricFlowStorageDeviceType);
				if (result == null) result = caseIfcDistributionElementType(ifcElectricFlowStorageDeviceType);
				if (result == null) result = caseIfcElementType(ifcElectricFlowStorageDeviceType);
				if (result == null) result = caseIfcTypeProduct(ifcElectricFlowStorageDeviceType);
				if (result == null) result = caseIfcTypeObject(ifcElectricFlowStorageDeviceType);
				if (result == null) result = caseIfcObjectDefinition(ifcElectricFlowStorageDeviceType);
				if (result == null) result = caseIfcRoot(ifcElectricFlowStorageDeviceType);
				if (result == null) result = caseEntity(ifcElectricFlowStorageDeviceType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_ELECTRIC_FLOW_STORAGE_DEVICE_TYPE_ENUM_TYPE: {
				IfcElectricFlowStorageDeviceTypeEnumType ifcElectricFlowStorageDeviceTypeEnumType = (IfcElectricFlowStorageDeviceTypeEnumType)theEObject;
				T result = caseIfcElectricFlowStorageDeviceTypeEnumType(ifcElectricFlowStorageDeviceTypeEnumType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_ELECTRIC_GENERATOR_TYPE: {
				IfcElectricGeneratorType ifcElectricGeneratorType = (IfcElectricGeneratorType)theEObject;
				T result = caseIfcElectricGeneratorType(ifcElectricGeneratorType);
				if (result == null) result = caseIfcEnergyConversionDeviceType(ifcElectricGeneratorType);
				if (result == null) result = caseIfcDistributionFlowElementType(ifcElectricGeneratorType);
				if (result == null) result = caseIfcDistributionElementType(ifcElectricGeneratorType);
				if (result == null) result = caseIfcElementType(ifcElectricGeneratorType);
				if (result == null) result = caseIfcTypeProduct(ifcElectricGeneratorType);
				if (result == null) result = caseIfcTypeObject(ifcElectricGeneratorType);
				if (result == null) result = caseIfcObjectDefinition(ifcElectricGeneratorType);
				if (result == null) result = caseIfcRoot(ifcElectricGeneratorType);
				if (result == null) result = caseEntity(ifcElectricGeneratorType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_ELECTRIC_GENERATOR_TYPE_ENUM_TYPE: {
				IfcElectricGeneratorTypeEnumType ifcElectricGeneratorTypeEnumType = (IfcElectricGeneratorTypeEnumType)theEObject;
				T result = caseIfcElectricGeneratorTypeEnumType(ifcElectricGeneratorTypeEnumType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_ELECTRIC_HEATER_TYPE: {
				IfcElectricHeaterType ifcElectricHeaterType = (IfcElectricHeaterType)theEObject;
				T result = caseIfcElectricHeaterType(ifcElectricHeaterType);
				if (result == null) result = caseIfcFlowTerminalType(ifcElectricHeaterType);
				if (result == null) result = caseIfcDistributionFlowElementType(ifcElectricHeaterType);
				if (result == null) result = caseIfcDistributionElementType(ifcElectricHeaterType);
				if (result == null) result = caseIfcElementType(ifcElectricHeaterType);
				if (result == null) result = caseIfcTypeProduct(ifcElectricHeaterType);
				if (result == null) result = caseIfcTypeObject(ifcElectricHeaterType);
				if (result == null) result = caseIfcObjectDefinition(ifcElectricHeaterType);
				if (result == null) result = caseIfcRoot(ifcElectricHeaterType);
				if (result == null) result = caseEntity(ifcElectricHeaterType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_ELECTRIC_HEATER_TYPE_ENUM_TYPE: {
				IfcElectricHeaterTypeEnumType ifcElectricHeaterTypeEnumType = (IfcElectricHeaterTypeEnumType)theEObject;
				T result = caseIfcElectricHeaterTypeEnumType(ifcElectricHeaterTypeEnumType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_ELECTRIC_MOTOR_TYPE: {
				IfcElectricMotorType ifcElectricMotorType = (IfcElectricMotorType)theEObject;
				T result = caseIfcElectricMotorType(ifcElectricMotorType);
				if (result == null) result = caseIfcEnergyConversionDeviceType(ifcElectricMotorType);
				if (result == null) result = caseIfcDistributionFlowElementType(ifcElectricMotorType);
				if (result == null) result = caseIfcDistributionElementType(ifcElectricMotorType);
				if (result == null) result = caseIfcElementType(ifcElectricMotorType);
				if (result == null) result = caseIfcTypeProduct(ifcElectricMotorType);
				if (result == null) result = caseIfcTypeObject(ifcElectricMotorType);
				if (result == null) result = caseIfcObjectDefinition(ifcElectricMotorType);
				if (result == null) result = caseIfcRoot(ifcElectricMotorType);
				if (result == null) result = caseEntity(ifcElectricMotorType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_ELECTRIC_MOTOR_TYPE_ENUM_TYPE: {
				IfcElectricMotorTypeEnumType ifcElectricMotorTypeEnumType = (IfcElectricMotorTypeEnumType)theEObject;
				T result = caseIfcElectricMotorTypeEnumType(ifcElectricMotorTypeEnumType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_ELECTRIC_RESISTANCE_MEASURE_TYPE: {
				IfcElectricResistanceMeasureType ifcElectricResistanceMeasureType = (IfcElectricResistanceMeasureType)theEObject;
				T result = caseIfcElectricResistanceMeasureType(ifcElectricResistanceMeasureType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_ELECTRIC_TIME_CONTROL_TYPE: {
				IfcElectricTimeControlType ifcElectricTimeControlType = (IfcElectricTimeControlType)theEObject;
				T result = caseIfcElectricTimeControlType(ifcElectricTimeControlType);
				if (result == null) result = caseIfcFlowControllerType(ifcElectricTimeControlType);
				if (result == null) result = caseIfcDistributionFlowElementType(ifcElectricTimeControlType);
				if (result == null) result = caseIfcDistributionElementType(ifcElectricTimeControlType);
				if (result == null) result = caseIfcElementType(ifcElectricTimeControlType);
				if (result == null) result = caseIfcTypeProduct(ifcElectricTimeControlType);
				if (result == null) result = caseIfcTypeObject(ifcElectricTimeControlType);
				if (result == null) result = caseIfcObjectDefinition(ifcElectricTimeControlType);
				if (result == null) result = caseIfcRoot(ifcElectricTimeControlType);
				if (result == null) result = caseEntity(ifcElectricTimeControlType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_ELECTRIC_TIME_CONTROL_TYPE_ENUM_TYPE: {
				IfcElectricTimeControlTypeEnumType ifcElectricTimeControlTypeEnumType = (IfcElectricTimeControlTypeEnumType)theEObject;
				T result = caseIfcElectricTimeControlTypeEnumType(ifcElectricTimeControlTypeEnumType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_ELECTRIC_VOLTAGE_MEASURE_TYPE: {
				IfcElectricVoltageMeasureType ifcElectricVoltageMeasureType = (IfcElectricVoltageMeasureType)theEObject;
				T result = caseIfcElectricVoltageMeasureType(ifcElectricVoltageMeasureType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_ELEMENT: {
				IfcElement ifcElement = (IfcElement)theEObject;
				T result = caseIfcElement(ifcElement);
				if (result == null) result = caseIfcProduct(ifcElement);
				if (result == null) result = caseIfcObject(ifcElement);
				if (result == null) result = caseIfcObjectDefinition(ifcElement);
				if (result == null) result = caseIfcRoot(ifcElement);
				if (result == null) result = caseEntity(ifcElement);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_ELEMENTARY_SURFACE: {
				IfcElementarySurface ifcElementarySurface = (IfcElementarySurface)theEObject;
				T result = caseIfcElementarySurface(ifcElementarySurface);
				if (result == null) result = caseIfcSurface(ifcElementarySurface);
				if (result == null) result = caseIfcGeometricRepresentationItem(ifcElementarySurface);
				if (result == null) result = caseIfcRepresentationItem(ifcElementarySurface);
				if (result == null) result = caseEntity(ifcElementarySurface);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_ELEMENT_ASSEMBLY: {
				IfcElementAssembly ifcElementAssembly = (IfcElementAssembly)theEObject;
				T result = caseIfcElementAssembly(ifcElementAssembly);
				if (result == null) result = caseIfcElement(ifcElementAssembly);
				if (result == null) result = caseIfcProduct(ifcElementAssembly);
				if (result == null) result = caseIfcObject(ifcElementAssembly);
				if (result == null) result = caseIfcObjectDefinition(ifcElementAssembly);
				if (result == null) result = caseIfcRoot(ifcElementAssembly);
				if (result == null) result = caseEntity(ifcElementAssembly);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_ELEMENT_ASSEMBLY_TYPE_ENUM_TYPE: {
				IfcElementAssemblyTypeEnumType ifcElementAssemblyTypeEnumType = (IfcElementAssemblyTypeEnumType)theEObject;
				T result = caseIfcElementAssemblyTypeEnumType(ifcElementAssemblyTypeEnumType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_ELEMENT_COMPONENT: {
				IfcElementComponent ifcElementComponent = (IfcElementComponent)theEObject;
				T result = caseIfcElementComponent(ifcElementComponent);
				if (result == null) result = caseIfcElement(ifcElementComponent);
				if (result == null) result = caseIfcProduct(ifcElementComponent);
				if (result == null) result = caseIfcObject(ifcElementComponent);
				if (result == null) result = caseIfcObjectDefinition(ifcElementComponent);
				if (result == null) result = caseIfcRoot(ifcElementComponent);
				if (result == null) result = caseEntity(ifcElementComponent);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_ELEMENT_COMPONENT_TYPE: {
				IfcElementComponentType ifcElementComponentType = (IfcElementComponentType)theEObject;
				T result = caseIfcElementComponentType(ifcElementComponentType);
				if (result == null) result = caseIfcElementType(ifcElementComponentType);
				if (result == null) result = caseIfcTypeProduct(ifcElementComponentType);
				if (result == null) result = caseIfcTypeObject(ifcElementComponentType);
				if (result == null) result = caseIfcObjectDefinition(ifcElementComponentType);
				if (result == null) result = caseIfcRoot(ifcElementComponentType);
				if (result == null) result = caseEntity(ifcElementComponentType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_ELEMENT_COMPOSITION_ENUM_TYPE: {
				IfcElementCompositionEnumType ifcElementCompositionEnumType = (IfcElementCompositionEnumType)theEObject;
				T result = caseIfcElementCompositionEnumType(ifcElementCompositionEnumType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_ELEMENT_QUANTITY: {
				IfcElementQuantity ifcElementQuantity = (IfcElementQuantity)theEObject;
				T result = caseIfcElementQuantity(ifcElementQuantity);
				if (result == null) result = caseIfcPropertySetDefinition(ifcElementQuantity);
				if (result == null) result = caseIfcPropertyDefinition(ifcElementQuantity);
				if (result == null) result = caseIfcRoot(ifcElementQuantity);
				if (result == null) result = caseEntity(ifcElementQuantity);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_ELEMENT_TYPE: {
				IfcElementType ifcElementType = (IfcElementType)theEObject;
				T result = caseIfcElementType(ifcElementType);
				if (result == null) result = caseIfcTypeProduct(ifcElementType);
				if (result == null) result = caseIfcTypeObject(ifcElementType);
				if (result == null) result = caseIfcObjectDefinition(ifcElementType);
				if (result == null) result = caseIfcRoot(ifcElementType);
				if (result == null) result = caseEntity(ifcElementType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_ELLIPSE: {
				IfcEllipse ifcEllipse = (IfcEllipse)theEObject;
				T result = caseIfcEllipse(ifcEllipse);
				if (result == null) result = caseIfcConic(ifcEllipse);
				if (result == null) result = caseIfcCurve(ifcEllipse);
				if (result == null) result = caseIfcGeometricRepresentationItem(ifcEllipse);
				if (result == null) result = caseIfcRepresentationItem(ifcEllipse);
				if (result == null) result = caseEntity(ifcEllipse);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_ELLIPSE_PROFILE_DEF: {
				IfcEllipseProfileDef ifcEllipseProfileDef = (IfcEllipseProfileDef)theEObject;
				T result = caseIfcEllipseProfileDef(ifcEllipseProfileDef);
				if (result == null) result = caseIfcParameterizedProfileDef(ifcEllipseProfileDef);
				if (result == null) result = caseIfcProfileDef(ifcEllipseProfileDef);
				if (result == null) result = caseEntity(ifcEllipseProfileDef);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_ENERGY_CONVERSION_DEVICE: {
				IfcEnergyConversionDevice ifcEnergyConversionDevice = (IfcEnergyConversionDevice)theEObject;
				T result = caseIfcEnergyConversionDevice(ifcEnergyConversionDevice);
				if (result == null) result = caseIfcDistributionFlowElement(ifcEnergyConversionDevice);
				if (result == null) result = caseIfcDistributionElement(ifcEnergyConversionDevice);
				if (result == null) result = caseIfcElement(ifcEnergyConversionDevice);
				if (result == null) result = caseIfcProduct(ifcEnergyConversionDevice);
				if (result == null) result = caseIfcObject(ifcEnergyConversionDevice);
				if (result == null) result = caseIfcObjectDefinition(ifcEnergyConversionDevice);
				if (result == null) result = caseIfcRoot(ifcEnergyConversionDevice);
				if (result == null) result = caseEntity(ifcEnergyConversionDevice);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_ENERGY_CONVERSION_DEVICE_TYPE: {
				IfcEnergyConversionDeviceType ifcEnergyConversionDeviceType = (IfcEnergyConversionDeviceType)theEObject;
				T result = caseIfcEnergyConversionDeviceType(ifcEnergyConversionDeviceType);
				if (result == null) result = caseIfcDistributionFlowElementType(ifcEnergyConversionDeviceType);
				if (result == null) result = caseIfcDistributionElementType(ifcEnergyConversionDeviceType);
				if (result == null) result = caseIfcElementType(ifcEnergyConversionDeviceType);
				if (result == null) result = caseIfcTypeProduct(ifcEnergyConversionDeviceType);
				if (result == null) result = caseIfcTypeObject(ifcEnergyConversionDeviceType);
				if (result == null) result = caseIfcObjectDefinition(ifcEnergyConversionDeviceType);
				if (result == null) result = caseIfcRoot(ifcEnergyConversionDeviceType);
				if (result == null) result = caseEntity(ifcEnergyConversionDeviceType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_ENERGY_MEASURE_TYPE: {
				IfcEnergyMeasureType ifcEnergyMeasureType = (IfcEnergyMeasureType)theEObject;
				T result = caseIfcEnergyMeasureType(ifcEnergyMeasureType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_ENERGY_PROPERTIES: {
				IfcEnergyProperties ifcEnergyProperties = (IfcEnergyProperties)theEObject;
				T result = caseIfcEnergyProperties(ifcEnergyProperties);
				if (result == null) result = caseIfcPropertySetDefinition(ifcEnergyProperties);
				if (result == null) result = caseIfcPropertyDefinition(ifcEnergyProperties);
				if (result == null) result = caseIfcRoot(ifcEnergyProperties);
				if (result == null) result = caseEntity(ifcEnergyProperties);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_ENERGY_SEQUENCE_ENUM_TYPE: {
				IfcEnergySequenceEnumType ifcEnergySequenceEnumType = (IfcEnergySequenceEnumType)theEObject;
				T result = caseIfcEnergySequenceEnumType(ifcEnergySequenceEnumType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_ENVIRONMENTAL_IMPACT_CATEGORY_ENUM_TYPE: {
				IfcEnvironmentalImpactCategoryEnumType ifcEnvironmentalImpactCategoryEnumType = (IfcEnvironmentalImpactCategoryEnumType)theEObject;
				T result = caseIfcEnvironmentalImpactCategoryEnumType(ifcEnvironmentalImpactCategoryEnumType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_ENVIRONMENTAL_IMPACT_VALUE: {
				IfcEnvironmentalImpactValue ifcEnvironmentalImpactValue = (IfcEnvironmentalImpactValue)theEObject;
				T result = caseIfcEnvironmentalImpactValue(ifcEnvironmentalImpactValue);
				if (result == null) result = caseIfcAppliedValue(ifcEnvironmentalImpactValue);
				if (result == null) result = caseEntity(ifcEnvironmentalImpactValue);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_EQUIPMENT_ELEMENT: {
				IfcEquipmentElement ifcEquipmentElement = (IfcEquipmentElement)theEObject;
				T result = caseIfcEquipmentElement(ifcEquipmentElement);
				if (result == null) result = caseIfcElement(ifcEquipmentElement);
				if (result == null) result = caseIfcProduct(ifcEquipmentElement);
				if (result == null) result = caseIfcObject(ifcEquipmentElement);
				if (result == null) result = caseIfcObjectDefinition(ifcEquipmentElement);
				if (result == null) result = caseIfcRoot(ifcEquipmentElement);
				if (result == null) result = caseEntity(ifcEquipmentElement);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_EQUIPMENT_STANDARD: {
				IfcEquipmentStandard ifcEquipmentStandard = (IfcEquipmentStandard)theEObject;
				T result = caseIfcEquipmentStandard(ifcEquipmentStandard);
				if (result == null) result = caseIfcControl(ifcEquipmentStandard);
				if (result == null) result = caseIfcObject(ifcEquipmentStandard);
				if (result == null) result = caseIfcObjectDefinition(ifcEquipmentStandard);
				if (result == null) result = caseIfcRoot(ifcEquipmentStandard);
				if (result == null) result = caseEntity(ifcEquipmentStandard);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_EVAPORATIVE_COOLER_TYPE: {
				IfcEvaporativeCoolerType ifcEvaporativeCoolerType = (IfcEvaporativeCoolerType)theEObject;
				T result = caseIfcEvaporativeCoolerType(ifcEvaporativeCoolerType);
				if (result == null) result = caseIfcEnergyConversionDeviceType(ifcEvaporativeCoolerType);
				if (result == null) result = caseIfcDistributionFlowElementType(ifcEvaporativeCoolerType);
				if (result == null) result = caseIfcDistributionElementType(ifcEvaporativeCoolerType);
				if (result == null) result = caseIfcElementType(ifcEvaporativeCoolerType);
				if (result == null) result = caseIfcTypeProduct(ifcEvaporativeCoolerType);
				if (result == null) result = caseIfcTypeObject(ifcEvaporativeCoolerType);
				if (result == null) result = caseIfcObjectDefinition(ifcEvaporativeCoolerType);
				if (result == null) result = caseIfcRoot(ifcEvaporativeCoolerType);
				if (result == null) result = caseEntity(ifcEvaporativeCoolerType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_EVAPORATIVE_COOLER_TYPE_ENUM_TYPE: {
				IfcEvaporativeCoolerTypeEnumType ifcEvaporativeCoolerTypeEnumType = (IfcEvaporativeCoolerTypeEnumType)theEObject;
				T result = caseIfcEvaporativeCoolerTypeEnumType(ifcEvaporativeCoolerTypeEnumType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_EVAPORATOR_TYPE: {
				IfcEvaporatorType ifcEvaporatorType = (IfcEvaporatorType)theEObject;
				T result = caseIfcEvaporatorType(ifcEvaporatorType);
				if (result == null) result = caseIfcEnergyConversionDeviceType(ifcEvaporatorType);
				if (result == null) result = caseIfcDistributionFlowElementType(ifcEvaporatorType);
				if (result == null) result = caseIfcDistributionElementType(ifcEvaporatorType);
				if (result == null) result = caseIfcElementType(ifcEvaporatorType);
				if (result == null) result = caseIfcTypeProduct(ifcEvaporatorType);
				if (result == null) result = caseIfcTypeObject(ifcEvaporatorType);
				if (result == null) result = caseIfcObjectDefinition(ifcEvaporatorType);
				if (result == null) result = caseIfcRoot(ifcEvaporatorType);
				if (result == null) result = caseEntity(ifcEvaporatorType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_EVAPORATOR_TYPE_ENUM_TYPE: {
				IfcEvaporatorTypeEnumType ifcEvaporatorTypeEnumType = (IfcEvaporatorTypeEnumType)theEObject;
				T result = caseIfcEvaporatorTypeEnumType(ifcEvaporatorTypeEnumType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_EXTENDED_MATERIAL_PROPERTIES: {
				IfcExtendedMaterialProperties ifcExtendedMaterialProperties = (IfcExtendedMaterialProperties)theEObject;
				T result = caseIfcExtendedMaterialProperties(ifcExtendedMaterialProperties);
				if (result == null) result = caseIfcMaterialProperties(ifcExtendedMaterialProperties);
				if (result == null) result = caseEntity(ifcExtendedMaterialProperties);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_EXTERNALLY_DEFINED_HATCH_STYLE: {
				IfcExternallyDefinedHatchStyle ifcExternallyDefinedHatchStyle = (IfcExternallyDefinedHatchStyle)theEObject;
				T result = caseIfcExternallyDefinedHatchStyle(ifcExternallyDefinedHatchStyle);
				if (result == null) result = caseIfcExternalReference(ifcExternallyDefinedHatchStyle);
				if (result == null) result = caseEntity(ifcExternallyDefinedHatchStyle);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_EXTERNALLY_DEFINED_SURFACE_STYLE: {
				IfcExternallyDefinedSurfaceStyle ifcExternallyDefinedSurfaceStyle = (IfcExternallyDefinedSurfaceStyle)theEObject;
				T result = caseIfcExternallyDefinedSurfaceStyle(ifcExternallyDefinedSurfaceStyle);
				if (result == null) result = caseIfcExternalReference(ifcExternallyDefinedSurfaceStyle);
				if (result == null) result = caseEntity(ifcExternallyDefinedSurfaceStyle);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_EXTERNALLY_DEFINED_SYMBOL: {
				IfcExternallyDefinedSymbol ifcExternallyDefinedSymbol = (IfcExternallyDefinedSymbol)theEObject;
				T result = caseIfcExternallyDefinedSymbol(ifcExternallyDefinedSymbol);
				if (result == null) result = caseIfcExternalReference(ifcExternallyDefinedSymbol);
				if (result == null) result = caseEntity(ifcExternallyDefinedSymbol);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_EXTERNALLY_DEFINED_TEXT_FONT: {
				IfcExternallyDefinedTextFont ifcExternallyDefinedTextFont = (IfcExternallyDefinedTextFont)theEObject;
				T result = caseIfcExternallyDefinedTextFont(ifcExternallyDefinedTextFont);
				if (result == null) result = caseIfcExternalReference(ifcExternallyDefinedTextFont);
				if (result == null) result = caseEntity(ifcExternallyDefinedTextFont);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_EXTERNAL_REFERENCE: {
				IfcExternalReference ifcExternalReference = (IfcExternalReference)theEObject;
				T result = caseIfcExternalReference(ifcExternalReference);
				if (result == null) result = caseEntity(ifcExternalReference);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_EXTRUDED_AREA_SOLID: {
				IfcExtrudedAreaSolid ifcExtrudedAreaSolid = (IfcExtrudedAreaSolid)theEObject;
				T result = caseIfcExtrudedAreaSolid(ifcExtrudedAreaSolid);
				if (result == null) result = caseIfcSweptAreaSolid(ifcExtrudedAreaSolid);
				if (result == null) result = caseIfcSolidModel(ifcExtrudedAreaSolid);
				if (result == null) result = caseIfcGeometricRepresentationItem(ifcExtrudedAreaSolid);
				if (result == null) result = caseIfcRepresentationItem(ifcExtrudedAreaSolid);
				if (result == null) result = caseEntity(ifcExtrudedAreaSolid);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_FACE: {
				IfcFace ifcFace = (IfcFace)theEObject;
				T result = caseIfcFace(ifcFace);
				if (result == null) result = caseIfcTopologicalRepresentationItem(ifcFace);
				if (result == null) result = caseIfcRepresentationItem(ifcFace);
				if (result == null) result = caseEntity(ifcFace);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_FACE_BASED_SURFACE_MODEL: {
				IfcFaceBasedSurfaceModel ifcFaceBasedSurfaceModel = (IfcFaceBasedSurfaceModel)theEObject;
				T result = caseIfcFaceBasedSurfaceModel(ifcFaceBasedSurfaceModel);
				if (result == null) result = caseIfcGeometricRepresentationItem(ifcFaceBasedSurfaceModel);
				if (result == null) result = caseIfcRepresentationItem(ifcFaceBasedSurfaceModel);
				if (result == null) result = caseEntity(ifcFaceBasedSurfaceModel);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_FACE_BOUND: {
				IfcFaceBound ifcFaceBound = (IfcFaceBound)theEObject;
				T result = caseIfcFaceBound(ifcFaceBound);
				if (result == null) result = caseIfcTopologicalRepresentationItem(ifcFaceBound);
				if (result == null) result = caseIfcRepresentationItem(ifcFaceBound);
				if (result == null) result = caseEntity(ifcFaceBound);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_FACE_OUTER_BOUND: {
				IfcFaceOuterBound ifcFaceOuterBound = (IfcFaceOuterBound)theEObject;
				T result = caseIfcFaceOuterBound(ifcFaceOuterBound);
				if (result == null) result = caseIfcFaceBound(ifcFaceOuterBound);
				if (result == null) result = caseIfcTopologicalRepresentationItem(ifcFaceOuterBound);
				if (result == null) result = caseIfcRepresentationItem(ifcFaceOuterBound);
				if (result == null) result = caseEntity(ifcFaceOuterBound);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_FACE_SURFACE: {
				IfcFaceSurface ifcFaceSurface = (IfcFaceSurface)theEObject;
				T result = caseIfcFaceSurface(ifcFaceSurface);
				if (result == null) result = caseIfcFace(ifcFaceSurface);
				if (result == null) result = caseIfcTopologicalRepresentationItem(ifcFaceSurface);
				if (result == null) result = caseIfcRepresentationItem(ifcFaceSurface);
				if (result == null) result = caseEntity(ifcFaceSurface);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_FACETED_BREP: {
				IfcFacetedBrep ifcFacetedBrep = (IfcFacetedBrep)theEObject;
				T result = caseIfcFacetedBrep(ifcFacetedBrep);
				if (result == null) result = caseIfcManifoldSolidBrep(ifcFacetedBrep);
				if (result == null) result = caseIfcSolidModel(ifcFacetedBrep);
				if (result == null) result = caseIfcGeometricRepresentationItem(ifcFacetedBrep);
				if (result == null) result = caseIfcRepresentationItem(ifcFacetedBrep);
				if (result == null) result = caseEntity(ifcFacetedBrep);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_FACETED_BREP_WITH_VOIDS: {
				IfcFacetedBrepWithVoids ifcFacetedBrepWithVoids = (IfcFacetedBrepWithVoids)theEObject;
				T result = caseIfcFacetedBrepWithVoids(ifcFacetedBrepWithVoids);
				if (result == null) result = caseIfcManifoldSolidBrep(ifcFacetedBrepWithVoids);
				if (result == null) result = caseIfcSolidModel(ifcFacetedBrepWithVoids);
				if (result == null) result = caseIfcGeometricRepresentationItem(ifcFacetedBrepWithVoids);
				if (result == null) result = caseIfcRepresentationItem(ifcFacetedBrepWithVoids);
				if (result == null) result = caseEntity(ifcFacetedBrepWithVoids);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_FAILURE_CONNECTION_CONDITION: {
				IfcFailureConnectionCondition ifcFailureConnectionCondition = (IfcFailureConnectionCondition)theEObject;
				T result = caseIfcFailureConnectionCondition(ifcFailureConnectionCondition);
				if (result == null) result = caseIfcStructuralConnectionCondition(ifcFailureConnectionCondition);
				if (result == null) result = caseEntity(ifcFailureConnectionCondition);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_FAN_TYPE: {
				IfcFanType ifcFanType = (IfcFanType)theEObject;
				T result = caseIfcFanType(ifcFanType);
				if (result == null) result = caseIfcFlowMovingDeviceType(ifcFanType);
				if (result == null) result = caseIfcDistributionFlowElementType(ifcFanType);
				if (result == null) result = caseIfcDistributionElementType(ifcFanType);
				if (result == null) result = caseIfcElementType(ifcFanType);
				if (result == null) result = caseIfcTypeProduct(ifcFanType);
				if (result == null) result = caseIfcTypeObject(ifcFanType);
				if (result == null) result = caseIfcObjectDefinition(ifcFanType);
				if (result == null) result = caseIfcRoot(ifcFanType);
				if (result == null) result = caseEntity(ifcFanType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_FAN_TYPE_ENUM_TYPE: {
				IfcFanTypeEnumType ifcFanTypeEnumType = (IfcFanTypeEnumType)theEObject;
				T result = caseIfcFanTypeEnumType(ifcFanTypeEnumType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_FASTENER: {
				IfcFastener ifcFastener = (IfcFastener)theEObject;
				T result = caseIfcFastener(ifcFastener);
				if (result == null) result = caseIfcElementComponent(ifcFastener);
				if (result == null) result = caseIfcElement(ifcFastener);
				if (result == null) result = caseIfcProduct(ifcFastener);
				if (result == null) result = caseIfcObject(ifcFastener);
				if (result == null) result = caseIfcObjectDefinition(ifcFastener);
				if (result == null) result = caseIfcRoot(ifcFastener);
				if (result == null) result = caseEntity(ifcFastener);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_FASTENER_TYPE: {
				IfcFastenerType ifcFastenerType = (IfcFastenerType)theEObject;
				T result = caseIfcFastenerType(ifcFastenerType);
				if (result == null) result = caseIfcElementComponentType(ifcFastenerType);
				if (result == null) result = caseIfcElementType(ifcFastenerType);
				if (result == null) result = caseIfcTypeProduct(ifcFastenerType);
				if (result == null) result = caseIfcTypeObject(ifcFastenerType);
				if (result == null) result = caseIfcObjectDefinition(ifcFastenerType);
				if (result == null) result = caseIfcRoot(ifcFastenerType);
				if (result == null) result = caseEntity(ifcFastenerType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_FEATURE_ELEMENT: {
				IfcFeatureElement ifcFeatureElement = (IfcFeatureElement)theEObject;
				T result = caseIfcFeatureElement(ifcFeatureElement);
				if (result == null) result = caseIfcElement(ifcFeatureElement);
				if (result == null) result = caseIfcProduct(ifcFeatureElement);
				if (result == null) result = caseIfcObject(ifcFeatureElement);
				if (result == null) result = caseIfcObjectDefinition(ifcFeatureElement);
				if (result == null) result = caseIfcRoot(ifcFeatureElement);
				if (result == null) result = caseEntity(ifcFeatureElement);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_FEATURE_ELEMENT_ADDITION: {
				IfcFeatureElementAddition ifcFeatureElementAddition = (IfcFeatureElementAddition)theEObject;
				T result = caseIfcFeatureElementAddition(ifcFeatureElementAddition);
				if (result == null) result = caseIfcFeatureElement(ifcFeatureElementAddition);
				if (result == null) result = caseIfcElement(ifcFeatureElementAddition);
				if (result == null) result = caseIfcProduct(ifcFeatureElementAddition);
				if (result == null) result = caseIfcObject(ifcFeatureElementAddition);
				if (result == null) result = caseIfcObjectDefinition(ifcFeatureElementAddition);
				if (result == null) result = caseIfcRoot(ifcFeatureElementAddition);
				if (result == null) result = caseEntity(ifcFeatureElementAddition);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_FEATURE_ELEMENT_SUBTRACTION: {
				IfcFeatureElementSubtraction ifcFeatureElementSubtraction = (IfcFeatureElementSubtraction)theEObject;
				T result = caseIfcFeatureElementSubtraction(ifcFeatureElementSubtraction);
				if (result == null) result = caseIfcFeatureElement(ifcFeatureElementSubtraction);
				if (result == null) result = caseIfcElement(ifcFeatureElementSubtraction);
				if (result == null) result = caseIfcProduct(ifcFeatureElementSubtraction);
				if (result == null) result = caseIfcObject(ifcFeatureElementSubtraction);
				if (result == null) result = caseIfcObjectDefinition(ifcFeatureElementSubtraction);
				if (result == null) result = caseIfcRoot(ifcFeatureElementSubtraction);
				if (result == null) result = caseEntity(ifcFeatureElementSubtraction);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_FILL_AREA_STYLE: {
				IfcFillAreaStyle ifcFillAreaStyle = (IfcFillAreaStyle)theEObject;
				T result = caseIfcFillAreaStyle(ifcFillAreaStyle);
				if (result == null) result = caseIfcPresentationStyle(ifcFillAreaStyle);
				if (result == null) result = caseEntity(ifcFillAreaStyle);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_FILL_AREA_STYLE_HATCHING: {
				IfcFillAreaStyleHatching ifcFillAreaStyleHatching = (IfcFillAreaStyleHatching)theEObject;
				T result = caseIfcFillAreaStyleHatching(ifcFillAreaStyleHatching);
				if (result == null) result = caseIfcGeometricRepresentationItem(ifcFillAreaStyleHatching);
				if (result == null) result = caseIfcRepresentationItem(ifcFillAreaStyleHatching);
				if (result == null) result = caseEntity(ifcFillAreaStyleHatching);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_FILL_AREA_STYLE_TILES: {
				IfcFillAreaStyleTiles ifcFillAreaStyleTiles = (IfcFillAreaStyleTiles)theEObject;
				T result = caseIfcFillAreaStyleTiles(ifcFillAreaStyleTiles);
				if (result == null) result = caseIfcGeometricRepresentationItem(ifcFillAreaStyleTiles);
				if (result == null) result = caseIfcRepresentationItem(ifcFillAreaStyleTiles);
				if (result == null) result = caseEntity(ifcFillAreaStyleTiles);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_FILL_AREA_STYLE_TILE_SHAPE_SELECT: {
				IfcFillAreaStyleTileShapeSelect ifcFillAreaStyleTileShapeSelect = (IfcFillAreaStyleTileShapeSelect)theEObject;
				T result = caseIfcFillAreaStyleTileShapeSelect(ifcFillAreaStyleTileShapeSelect);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_FILL_AREA_STYLE_TILE_SYMBOL_WITH_STYLE: {
				IfcFillAreaStyleTileSymbolWithStyle ifcFillAreaStyleTileSymbolWithStyle = (IfcFillAreaStyleTileSymbolWithStyle)theEObject;
				T result = caseIfcFillAreaStyleTileSymbolWithStyle(ifcFillAreaStyleTileSymbolWithStyle);
				if (result == null) result = caseIfcGeometricRepresentationItem(ifcFillAreaStyleTileSymbolWithStyle);
				if (result == null) result = caseIfcRepresentationItem(ifcFillAreaStyleTileSymbolWithStyle);
				if (result == null) result = caseEntity(ifcFillAreaStyleTileSymbolWithStyle);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_FILL_STYLE_SELECT: {
				IfcFillStyleSelect ifcFillStyleSelect = (IfcFillStyleSelect)theEObject;
				T result = caseIfcFillStyleSelect(ifcFillStyleSelect);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_FILTER_TYPE: {
				IfcFilterType ifcFilterType = (IfcFilterType)theEObject;
				T result = caseIfcFilterType(ifcFilterType);
				if (result == null) result = caseIfcFlowTreatmentDeviceType(ifcFilterType);
				if (result == null) result = caseIfcDistributionFlowElementType(ifcFilterType);
				if (result == null) result = caseIfcDistributionElementType(ifcFilterType);
				if (result == null) result = caseIfcElementType(ifcFilterType);
				if (result == null) result = caseIfcTypeProduct(ifcFilterType);
				if (result == null) result = caseIfcTypeObject(ifcFilterType);
				if (result == null) result = caseIfcObjectDefinition(ifcFilterType);
				if (result == null) result = caseIfcRoot(ifcFilterType);
				if (result == null) result = caseEntity(ifcFilterType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_FILTER_TYPE_ENUM_TYPE: {
				IfcFilterTypeEnumType ifcFilterTypeEnumType = (IfcFilterTypeEnumType)theEObject;
				T result = caseIfcFilterTypeEnumType(ifcFilterTypeEnumType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_FIRE_SUPPRESSION_TERMINAL_TYPE: {
				IfcFireSuppressionTerminalType ifcFireSuppressionTerminalType = (IfcFireSuppressionTerminalType)theEObject;
				T result = caseIfcFireSuppressionTerminalType(ifcFireSuppressionTerminalType);
				if (result == null) result = caseIfcFlowTerminalType(ifcFireSuppressionTerminalType);
				if (result == null) result = caseIfcDistributionFlowElementType(ifcFireSuppressionTerminalType);
				if (result == null) result = caseIfcDistributionElementType(ifcFireSuppressionTerminalType);
				if (result == null) result = caseIfcElementType(ifcFireSuppressionTerminalType);
				if (result == null) result = caseIfcTypeProduct(ifcFireSuppressionTerminalType);
				if (result == null) result = caseIfcTypeObject(ifcFireSuppressionTerminalType);
				if (result == null) result = caseIfcObjectDefinition(ifcFireSuppressionTerminalType);
				if (result == null) result = caseIfcRoot(ifcFireSuppressionTerminalType);
				if (result == null) result = caseEntity(ifcFireSuppressionTerminalType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_FIRE_SUPPRESSION_TERMINAL_TYPE_ENUM_TYPE: {
				IfcFireSuppressionTerminalTypeEnumType ifcFireSuppressionTerminalTypeEnumType = (IfcFireSuppressionTerminalTypeEnumType)theEObject;
				T result = caseIfcFireSuppressionTerminalTypeEnumType(ifcFireSuppressionTerminalTypeEnumType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_FLOW_CONTROLLER: {
				IfcFlowController ifcFlowController = (IfcFlowController)theEObject;
				T result = caseIfcFlowController(ifcFlowController);
				if (result == null) result = caseIfcDistributionFlowElement(ifcFlowController);
				if (result == null) result = caseIfcDistributionElement(ifcFlowController);
				if (result == null) result = caseIfcElement(ifcFlowController);
				if (result == null) result = caseIfcProduct(ifcFlowController);
				if (result == null) result = caseIfcObject(ifcFlowController);
				if (result == null) result = caseIfcObjectDefinition(ifcFlowController);
				if (result == null) result = caseIfcRoot(ifcFlowController);
				if (result == null) result = caseEntity(ifcFlowController);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_FLOW_CONTROLLER_TYPE: {
				IfcFlowControllerType ifcFlowControllerType = (IfcFlowControllerType)theEObject;
				T result = caseIfcFlowControllerType(ifcFlowControllerType);
				if (result == null) result = caseIfcDistributionFlowElementType(ifcFlowControllerType);
				if (result == null) result = caseIfcDistributionElementType(ifcFlowControllerType);
				if (result == null) result = caseIfcElementType(ifcFlowControllerType);
				if (result == null) result = caseIfcTypeProduct(ifcFlowControllerType);
				if (result == null) result = caseIfcTypeObject(ifcFlowControllerType);
				if (result == null) result = caseIfcObjectDefinition(ifcFlowControllerType);
				if (result == null) result = caseIfcRoot(ifcFlowControllerType);
				if (result == null) result = caseEntity(ifcFlowControllerType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_FLOW_DIRECTION_ENUM_TYPE: {
				IfcFlowDirectionEnumType ifcFlowDirectionEnumType = (IfcFlowDirectionEnumType)theEObject;
				T result = caseIfcFlowDirectionEnumType(ifcFlowDirectionEnumType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_FLOW_FITTING: {
				IfcFlowFitting ifcFlowFitting = (IfcFlowFitting)theEObject;
				T result = caseIfcFlowFitting(ifcFlowFitting);
				if (result == null) result = caseIfcDistributionFlowElement(ifcFlowFitting);
				if (result == null) result = caseIfcDistributionElement(ifcFlowFitting);
				if (result == null) result = caseIfcElement(ifcFlowFitting);
				if (result == null) result = caseIfcProduct(ifcFlowFitting);
				if (result == null) result = caseIfcObject(ifcFlowFitting);
				if (result == null) result = caseIfcObjectDefinition(ifcFlowFitting);
				if (result == null) result = caseIfcRoot(ifcFlowFitting);
				if (result == null) result = caseEntity(ifcFlowFitting);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_FLOW_FITTING_TYPE: {
				IfcFlowFittingType ifcFlowFittingType = (IfcFlowFittingType)theEObject;
				T result = caseIfcFlowFittingType(ifcFlowFittingType);
				if (result == null) result = caseIfcDistributionFlowElementType(ifcFlowFittingType);
				if (result == null) result = caseIfcDistributionElementType(ifcFlowFittingType);
				if (result == null) result = caseIfcElementType(ifcFlowFittingType);
				if (result == null) result = caseIfcTypeProduct(ifcFlowFittingType);
				if (result == null) result = caseIfcTypeObject(ifcFlowFittingType);
				if (result == null) result = caseIfcObjectDefinition(ifcFlowFittingType);
				if (result == null) result = caseIfcRoot(ifcFlowFittingType);
				if (result == null) result = caseEntity(ifcFlowFittingType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_FLOW_INSTRUMENT_TYPE: {
				IfcFlowInstrumentType ifcFlowInstrumentType = (IfcFlowInstrumentType)theEObject;
				T result = caseIfcFlowInstrumentType(ifcFlowInstrumentType);
				if (result == null) result = caseIfcDistributionControlElementType(ifcFlowInstrumentType);
				if (result == null) result = caseIfcDistributionElementType(ifcFlowInstrumentType);
				if (result == null) result = caseIfcElementType(ifcFlowInstrumentType);
				if (result == null) result = caseIfcTypeProduct(ifcFlowInstrumentType);
				if (result == null) result = caseIfcTypeObject(ifcFlowInstrumentType);
				if (result == null) result = caseIfcObjectDefinition(ifcFlowInstrumentType);
				if (result == null) result = caseIfcRoot(ifcFlowInstrumentType);
				if (result == null) result = caseEntity(ifcFlowInstrumentType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_FLOW_INSTRUMENT_TYPE_ENUM_TYPE: {
				IfcFlowInstrumentTypeEnumType ifcFlowInstrumentTypeEnumType = (IfcFlowInstrumentTypeEnumType)theEObject;
				T result = caseIfcFlowInstrumentTypeEnumType(ifcFlowInstrumentTypeEnumType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_FLOW_METER_TYPE: {
				IfcFlowMeterType ifcFlowMeterType = (IfcFlowMeterType)theEObject;
				T result = caseIfcFlowMeterType(ifcFlowMeterType);
				if (result == null) result = caseIfcFlowControllerType(ifcFlowMeterType);
				if (result == null) result = caseIfcDistributionFlowElementType(ifcFlowMeterType);
				if (result == null) result = caseIfcDistributionElementType(ifcFlowMeterType);
				if (result == null) result = caseIfcElementType(ifcFlowMeterType);
				if (result == null) result = caseIfcTypeProduct(ifcFlowMeterType);
				if (result == null) result = caseIfcTypeObject(ifcFlowMeterType);
				if (result == null) result = caseIfcObjectDefinition(ifcFlowMeterType);
				if (result == null) result = caseIfcRoot(ifcFlowMeterType);
				if (result == null) result = caseEntity(ifcFlowMeterType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_FLOW_METER_TYPE_ENUM_TYPE: {
				IfcFlowMeterTypeEnumType ifcFlowMeterTypeEnumType = (IfcFlowMeterTypeEnumType)theEObject;
				T result = caseIfcFlowMeterTypeEnumType(ifcFlowMeterTypeEnumType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_FLOW_MOVING_DEVICE: {
				IfcFlowMovingDevice ifcFlowMovingDevice = (IfcFlowMovingDevice)theEObject;
				T result = caseIfcFlowMovingDevice(ifcFlowMovingDevice);
				if (result == null) result = caseIfcDistributionFlowElement(ifcFlowMovingDevice);
				if (result == null) result = caseIfcDistributionElement(ifcFlowMovingDevice);
				if (result == null) result = caseIfcElement(ifcFlowMovingDevice);
				if (result == null) result = caseIfcProduct(ifcFlowMovingDevice);
				if (result == null) result = caseIfcObject(ifcFlowMovingDevice);
				if (result == null) result = caseIfcObjectDefinition(ifcFlowMovingDevice);
				if (result == null) result = caseIfcRoot(ifcFlowMovingDevice);
				if (result == null) result = caseEntity(ifcFlowMovingDevice);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_FLOW_MOVING_DEVICE_TYPE: {
				IfcFlowMovingDeviceType ifcFlowMovingDeviceType = (IfcFlowMovingDeviceType)theEObject;
				T result = caseIfcFlowMovingDeviceType(ifcFlowMovingDeviceType);
				if (result == null) result = caseIfcDistributionFlowElementType(ifcFlowMovingDeviceType);
				if (result == null) result = caseIfcDistributionElementType(ifcFlowMovingDeviceType);
				if (result == null) result = caseIfcElementType(ifcFlowMovingDeviceType);
				if (result == null) result = caseIfcTypeProduct(ifcFlowMovingDeviceType);
				if (result == null) result = caseIfcTypeObject(ifcFlowMovingDeviceType);
				if (result == null) result = caseIfcObjectDefinition(ifcFlowMovingDeviceType);
				if (result == null) result = caseIfcRoot(ifcFlowMovingDeviceType);
				if (result == null) result = caseEntity(ifcFlowMovingDeviceType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_FLOW_SEGMENT: {
				IfcFlowSegment ifcFlowSegment = (IfcFlowSegment)theEObject;
				T result = caseIfcFlowSegment(ifcFlowSegment);
				if (result == null) result = caseIfcDistributionFlowElement(ifcFlowSegment);
				if (result == null) result = caseIfcDistributionElement(ifcFlowSegment);
				if (result == null) result = caseIfcElement(ifcFlowSegment);
				if (result == null) result = caseIfcProduct(ifcFlowSegment);
				if (result == null) result = caseIfcObject(ifcFlowSegment);
				if (result == null) result = caseIfcObjectDefinition(ifcFlowSegment);
				if (result == null) result = caseIfcRoot(ifcFlowSegment);
				if (result == null) result = caseEntity(ifcFlowSegment);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_FLOW_SEGMENT_TYPE: {
				IfcFlowSegmentType ifcFlowSegmentType = (IfcFlowSegmentType)theEObject;
				T result = caseIfcFlowSegmentType(ifcFlowSegmentType);
				if (result == null) result = caseIfcDistributionFlowElementType(ifcFlowSegmentType);
				if (result == null) result = caseIfcDistributionElementType(ifcFlowSegmentType);
				if (result == null) result = caseIfcElementType(ifcFlowSegmentType);
				if (result == null) result = caseIfcTypeProduct(ifcFlowSegmentType);
				if (result == null) result = caseIfcTypeObject(ifcFlowSegmentType);
				if (result == null) result = caseIfcObjectDefinition(ifcFlowSegmentType);
				if (result == null) result = caseIfcRoot(ifcFlowSegmentType);
				if (result == null) result = caseEntity(ifcFlowSegmentType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_FLOW_STORAGE_DEVICE: {
				IfcFlowStorageDevice ifcFlowStorageDevice = (IfcFlowStorageDevice)theEObject;
				T result = caseIfcFlowStorageDevice(ifcFlowStorageDevice);
				if (result == null) result = caseIfcDistributionFlowElement(ifcFlowStorageDevice);
				if (result == null) result = caseIfcDistributionElement(ifcFlowStorageDevice);
				if (result == null) result = caseIfcElement(ifcFlowStorageDevice);
				if (result == null) result = caseIfcProduct(ifcFlowStorageDevice);
				if (result == null) result = caseIfcObject(ifcFlowStorageDevice);
				if (result == null) result = caseIfcObjectDefinition(ifcFlowStorageDevice);
				if (result == null) result = caseIfcRoot(ifcFlowStorageDevice);
				if (result == null) result = caseEntity(ifcFlowStorageDevice);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_FLOW_STORAGE_DEVICE_TYPE: {
				IfcFlowStorageDeviceType ifcFlowStorageDeviceType = (IfcFlowStorageDeviceType)theEObject;
				T result = caseIfcFlowStorageDeviceType(ifcFlowStorageDeviceType);
				if (result == null) result = caseIfcDistributionFlowElementType(ifcFlowStorageDeviceType);
				if (result == null) result = caseIfcDistributionElementType(ifcFlowStorageDeviceType);
				if (result == null) result = caseIfcElementType(ifcFlowStorageDeviceType);
				if (result == null) result = caseIfcTypeProduct(ifcFlowStorageDeviceType);
				if (result == null) result = caseIfcTypeObject(ifcFlowStorageDeviceType);
				if (result == null) result = caseIfcObjectDefinition(ifcFlowStorageDeviceType);
				if (result == null) result = caseIfcRoot(ifcFlowStorageDeviceType);
				if (result == null) result = caseEntity(ifcFlowStorageDeviceType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_FLOW_TERMINAL: {
				IfcFlowTerminal ifcFlowTerminal = (IfcFlowTerminal)theEObject;
				T result = caseIfcFlowTerminal(ifcFlowTerminal);
				if (result == null) result = caseIfcDistributionFlowElement(ifcFlowTerminal);
				if (result == null) result = caseIfcDistributionElement(ifcFlowTerminal);
				if (result == null) result = caseIfcElement(ifcFlowTerminal);
				if (result == null) result = caseIfcProduct(ifcFlowTerminal);
				if (result == null) result = caseIfcObject(ifcFlowTerminal);
				if (result == null) result = caseIfcObjectDefinition(ifcFlowTerminal);
				if (result == null) result = caseIfcRoot(ifcFlowTerminal);
				if (result == null) result = caseEntity(ifcFlowTerminal);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_FLOW_TERMINAL_TYPE: {
				IfcFlowTerminalType ifcFlowTerminalType = (IfcFlowTerminalType)theEObject;
				T result = caseIfcFlowTerminalType(ifcFlowTerminalType);
				if (result == null) result = caseIfcDistributionFlowElementType(ifcFlowTerminalType);
				if (result == null) result = caseIfcDistributionElementType(ifcFlowTerminalType);
				if (result == null) result = caseIfcElementType(ifcFlowTerminalType);
				if (result == null) result = caseIfcTypeProduct(ifcFlowTerminalType);
				if (result == null) result = caseIfcTypeObject(ifcFlowTerminalType);
				if (result == null) result = caseIfcObjectDefinition(ifcFlowTerminalType);
				if (result == null) result = caseIfcRoot(ifcFlowTerminalType);
				if (result == null) result = caseEntity(ifcFlowTerminalType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_FLOW_TREATMENT_DEVICE: {
				IfcFlowTreatmentDevice ifcFlowTreatmentDevice = (IfcFlowTreatmentDevice)theEObject;
				T result = caseIfcFlowTreatmentDevice(ifcFlowTreatmentDevice);
				if (result == null) result = caseIfcDistributionFlowElement(ifcFlowTreatmentDevice);
				if (result == null) result = caseIfcDistributionElement(ifcFlowTreatmentDevice);
				if (result == null) result = caseIfcElement(ifcFlowTreatmentDevice);
				if (result == null) result = caseIfcProduct(ifcFlowTreatmentDevice);
				if (result == null) result = caseIfcObject(ifcFlowTreatmentDevice);
				if (result == null) result = caseIfcObjectDefinition(ifcFlowTreatmentDevice);
				if (result == null) result = caseIfcRoot(ifcFlowTreatmentDevice);
				if (result == null) result = caseEntity(ifcFlowTreatmentDevice);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_FLOW_TREATMENT_DEVICE_TYPE: {
				IfcFlowTreatmentDeviceType ifcFlowTreatmentDeviceType = (IfcFlowTreatmentDeviceType)theEObject;
				T result = caseIfcFlowTreatmentDeviceType(ifcFlowTreatmentDeviceType);
				if (result == null) result = caseIfcDistributionFlowElementType(ifcFlowTreatmentDeviceType);
				if (result == null) result = caseIfcDistributionElementType(ifcFlowTreatmentDeviceType);
				if (result == null) result = caseIfcElementType(ifcFlowTreatmentDeviceType);
				if (result == null) result = caseIfcTypeProduct(ifcFlowTreatmentDeviceType);
				if (result == null) result = caseIfcTypeObject(ifcFlowTreatmentDeviceType);
				if (result == null) result = caseIfcObjectDefinition(ifcFlowTreatmentDeviceType);
				if (result == null) result = caseIfcRoot(ifcFlowTreatmentDeviceType);
				if (result == null) result = caseEntity(ifcFlowTreatmentDeviceType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_FLUID_FLOW_PROPERTIES: {
				IfcFluidFlowProperties ifcFluidFlowProperties = (IfcFluidFlowProperties)theEObject;
				T result = caseIfcFluidFlowProperties(ifcFluidFlowProperties);
				if (result == null) result = caseIfcPropertySetDefinition(ifcFluidFlowProperties);
				if (result == null) result = caseIfcPropertyDefinition(ifcFluidFlowProperties);
				if (result == null) result = caseIfcRoot(ifcFluidFlowProperties);
				if (result == null) result = caseEntity(ifcFluidFlowProperties);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_FONT_STYLE_TYPE: {
				IfcFontStyleType ifcFontStyleType = (IfcFontStyleType)theEObject;
				T result = caseIfcFontStyleType(ifcFontStyleType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_FONT_VARIANT_TYPE: {
				IfcFontVariantType ifcFontVariantType = (IfcFontVariantType)theEObject;
				T result = caseIfcFontVariantType(ifcFontVariantType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_FONT_WEIGHT_TYPE: {
				IfcFontWeightType ifcFontWeightType = (IfcFontWeightType)theEObject;
				T result = caseIfcFontWeightType(ifcFontWeightType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_FOOTING: {
				IfcFooting ifcFooting = (IfcFooting)theEObject;
				T result = caseIfcFooting(ifcFooting);
				if (result == null) result = caseIfcBuildingElement(ifcFooting);
				if (result == null) result = caseIfcElement(ifcFooting);
				if (result == null) result = caseIfcProduct(ifcFooting);
				if (result == null) result = caseIfcObject(ifcFooting);
				if (result == null) result = caseIfcObjectDefinition(ifcFooting);
				if (result == null) result = caseIfcRoot(ifcFooting);
				if (result == null) result = caseEntity(ifcFooting);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_FOOTING_TYPE_ENUM_TYPE: {
				IfcFootingTypeEnumType ifcFootingTypeEnumType = (IfcFootingTypeEnumType)theEObject;
				T result = caseIfcFootingTypeEnumType(ifcFootingTypeEnumType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_FORCE_MEASURE_TYPE: {
				IfcForceMeasureType ifcForceMeasureType = (IfcForceMeasureType)theEObject;
				T result = caseIfcForceMeasureType(ifcForceMeasureType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_FREQUENCY_MEASURE_TYPE: {
				IfcFrequencyMeasureType ifcFrequencyMeasureType = (IfcFrequencyMeasureType)theEObject;
				T result = caseIfcFrequencyMeasureType(ifcFrequencyMeasureType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_FUEL_PROPERTIES: {
				IfcFuelProperties ifcFuelProperties = (IfcFuelProperties)theEObject;
				T result = caseIfcFuelProperties(ifcFuelProperties);
				if (result == null) result = caseIfcMaterialProperties(ifcFuelProperties);
				if (result == null) result = caseEntity(ifcFuelProperties);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_FURNISHING_ELEMENT: {
				IfcFurnishingElement ifcFurnishingElement = (IfcFurnishingElement)theEObject;
				T result = caseIfcFurnishingElement(ifcFurnishingElement);
				if (result == null) result = caseIfcElement(ifcFurnishingElement);
				if (result == null) result = caseIfcProduct(ifcFurnishingElement);
				if (result == null) result = caseIfcObject(ifcFurnishingElement);
				if (result == null) result = caseIfcObjectDefinition(ifcFurnishingElement);
				if (result == null) result = caseIfcRoot(ifcFurnishingElement);
				if (result == null) result = caseEntity(ifcFurnishingElement);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_FURNISHING_ELEMENT_TYPE: {
				IfcFurnishingElementType ifcFurnishingElementType = (IfcFurnishingElementType)theEObject;
				T result = caseIfcFurnishingElementType(ifcFurnishingElementType);
				if (result == null) result = caseIfcElementType(ifcFurnishingElementType);
				if (result == null) result = caseIfcTypeProduct(ifcFurnishingElementType);
				if (result == null) result = caseIfcTypeObject(ifcFurnishingElementType);
				if (result == null) result = caseIfcObjectDefinition(ifcFurnishingElementType);
				if (result == null) result = caseIfcRoot(ifcFurnishingElementType);
				if (result == null) result = caseEntity(ifcFurnishingElementType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_FURNITURE_STANDARD: {
				IfcFurnitureStandard ifcFurnitureStandard = (IfcFurnitureStandard)theEObject;
				T result = caseIfcFurnitureStandard(ifcFurnitureStandard);
				if (result == null) result = caseIfcControl(ifcFurnitureStandard);
				if (result == null) result = caseIfcObject(ifcFurnitureStandard);
				if (result == null) result = caseIfcObjectDefinition(ifcFurnitureStandard);
				if (result == null) result = caseIfcRoot(ifcFurnitureStandard);
				if (result == null) result = caseEntity(ifcFurnitureStandard);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_FURNITURE_TYPE: {
				IfcFurnitureType ifcFurnitureType = (IfcFurnitureType)theEObject;
				T result = caseIfcFurnitureType(ifcFurnitureType);
				if (result == null) result = caseIfcFurnishingElementType(ifcFurnitureType);
				if (result == null) result = caseIfcElementType(ifcFurnitureType);
				if (result == null) result = caseIfcTypeProduct(ifcFurnitureType);
				if (result == null) result = caseIfcTypeObject(ifcFurnitureType);
				if (result == null) result = caseIfcObjectDefinition(ifcFurnitureType);
				if (result == null) result = caseIfcRoot(ifcFurnitureType);
				if (result == null) result = caseEntity(ifcFurnitureType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_GAS_TERMINAL_TYPE: {
				IfcGasTerminalType ifcGasTerminalType = (IfcGasTerminalType)theEObject;
				T result = caseIfcGasTerminalType(ifcGasTerminalType);
				if (result == null) result = caseIfcFlowTerminalType(ifcGasTerminalType);
				if (result == null) result = caseIfcDistributionFlowElementType(ifcGasTerminalType);
				if (result == null) result = caseIfcDistributionElementType(ifcGasTerminalType);
				if (result == null) result = caseIfcElementType(ifcGasTerminalType);
				if (result == null) result = caseIfcTypeProduct(ifcGasTerminalType);
				if (result == null) result = caseIfcTypeObject(ifcGasTerminalType);
				if (result == null) result = caseIfcObjectDefinition(ifcGasTerminalType);
				if (result == null) result = caseIfcRoot(ifcGasTerminalType);
				if (result == null) result = caseEntity(ifcGasTerminalType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_GAS_TERMINAL_TYPE_ENUM_TYPE: {
				IfcGasTerminalTypeEnumType ifcGasTerminalTypeEnumType = (IfcGasTerminalTypeEnumType)theEObject;
				T result = caseIfcGasTerminalTypeEnumType(ifcGasTerminalTypeEnumType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_GENERAL_MATERIAL_PROPERTIES: {
				IfcGeneralMaterialProperties ifcGeneralMaterialProperties = (IfcGeneralMaterialProperties)theEObject;
				T result = caseIfcGeneralMaterialProperties(ifcGeneralMaterialProperties);
				if (result == null) result = caseIfcMaterialProperties(ifcGeneralMaterialProperties);
				if (result == null) result = caseEntity(ifcGeneralMaterialProperties);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_GENERAL_PROFILE_PROPERTIES: {
				IfcGeneralProfileProperties ifcGeneralProfileProperties = (IfcGeneralProfileProperties)theEObject;
				T result = caseIfcGeneralProfileProperties(ifcGeneralProfileProperties);
				if (result == null) result = caseIfcProfileProperties(ifcGeneralProfileProperties);
				if (result == null) result = caseEntity(ifcGeneralProfileProperties);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_GEOMETRIC_CURVE_SET: {
				IfcGeometricCurveSet ifcGeometricCurveSet = (IfcGeometricCurveSet)theEObject;
				T result = caseIfcGeometricCurveSet(ifcGeometricCurveSet);
				if (result == null) result = caseIfcGeometricSet(ifcGeometricCurveSet);
				if (result == null) result = caseIfcGeometricRepresentationItem(ifcGeometricCurveSet);
				if (result == null) result = caseIfcRepresentationItem(ifcGeometricCurveSet);
				if (result == null) result = caseEntity(ifcGeometricCurveSet);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_GEOMETRIC_PROJECTION_ENUM_TYPE: {
				IfcGeometricProjectionEnumType ifcGeometricProjectionEnumType = (IfcGeometricProjectionEnumType)theEObject;
				T result = caseIfcGeometricProjectionEnumType(ifcGeometricProjectionEnumType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_GEOMETRIC_REPRESENTATION_CONTEXT: {
				IfcGeometricRepresentationContext ifcGeometricRepresentationContext = (IfcGeometricRepresentationContext)theEObject;
				T result = caseIfcGeometricRepresentationContext(ifcGeometricRepresentationContext);
				if (result == null) result = caseIfcRepresentationContext(ifcGeometricRepresentationContext);
				if (result == null) result = caseEntity(ifcGeometricRepresentationContext);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_GEOMETRIC_REPRESENTATION_ITEM: {
				IfcGeometricRepresentationItem ifcGeometricRepresentationItem = (IfcGeometricRepresentationItem)theEObject;
				T result = caseIfcGeometricRepresentationItem(ifcGeometricRepresentationItem);
				if (result == null) result = caseIfcRepresentationItem(ifcGeometricRepresentationItem);
				if (result == null) result = caseEntity(ifcGeometricRepresentationItem);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_GEOMETRIC_REPRESENTATION_SUB_CONTEXT: {
				IfcGeometricRepresentationSubContext ifcGeometricRepresentationSubContext = (IfcGeometricRepresentationSubContext)theEObject;
				T result = caseIfcGeometricRepresentationSubContext(ifcGeometricRepresentationSubContext);
				if (result == null) result = caseIfcGeometricRepresentationSubContextTemp(ifcGeometricRepresentationSubContext);
				if (result == null) result = caseIfcGeometricRepresentationContext(ifcGeometricRepresentationSubContext);
				if (result == null) result = caseIfcRepresentationContext(ifcGeometricRepresentationSubContext);
				if (result == null) result = caseEntity(ifcGeometricRepresentationSubContext);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_GEOMETRIC_REPRESENTATION_SUB_CONTEXT_TEMP: {
				IfcGeometricRepresentationSubContextTemp ifcGeometricRepresentationSubContextTemp = (IfcGeometricRepresentationSubContextTemp)theEObject;
				T result = caseIfcGeometricRepresentationSubContextTemp(ifcGeometricRepresentationSubContextTemp);
				if (result == null) result = caseIfcGeometricRepresentationContext(ifcGeometricRepresentationSubContextTemp);
				if (result == null) result = caseIfcRepresentationContext(ifcGeometricRepresentationSubContextTemp);
				if (result == null) result = caseEntity(ifcGeometricRepresentationSubContextTemp);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_GEOMETRIC_SET: {
				IfcGeometricSet ifcGeometricSet = (IfcGeometricSet)theEObject;
				T result = caseIfcGeometricSet(ifcGeometricSet);
				if (result == null) result = caseIfcGeometricRepresentationItem(ifcGeometricSet);
				if (result == null) result = caseIfcRepresentationItem(ifcGeometricSet);
				if (result == null) result = caseEntity(ifcGeometricSet);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_GEOMETRIC_SET_SELECT: {
				IfcGeometricSetSelect ifcGeometricSetSelect = (IfcGeometricSetSelect)theEObject;
				T result = caseIfcGeometricSetSelect(ifcGeometricSetSelect);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_GLOBALLY_UNIQUE_ID_TYPE: {
				IfcGloballyUniqueIdType ifcGloballyUniqueIdType = (IfcGloballyUniqueIdType)theEObject;
				T result = caseIfcGloballyUniqueIdType(ifcGloballyUniqueIdType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_GLOBAL_OR_LOCAL_ENUM_TYPE: {
				IfcGlobalOrLocalEnumType ifcGlobalOrLocalEnumType = (IfcGlobalOrLocalEnumType)theEObject;
				T result = caseIfcGlobalOrLocalEnumType(ifcGlobalOrLocalEnumType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_GRID: {
				IfcGrid ifcGrid = (IfcGrid)theEObject;
				T result = caseIfcGrid(ifcGrid);
				if (result == null) result = caseIfcProduct(ifcGrid);
				if (result == null) result = caseIfcObject(ifcGrid);
				if (result == null) result = caseIfcObjectDefinition(ifcGrid);
				if (result == null) result = caseIfcRoot(ifcGrid);
				if (result == null) result = caseEntity(ifcGrid);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_GRID_AXIS: {
				IfcGridAxis ifcGridAxis = (IfcGridAxis)theEObject;
				T result = caseIfcGridAxis(ifcGridAxis);
				if (result == null) result = caseEntity(ifcGridAxis);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_GRID_PLACEMENT: {
				IfcGridPlacement ifcGridPlacement = (IfcGridPlacement)theEObject;
				T result = caseIfcGridPlacement(ifcGridPlacement);
				if (result == null) result = caseIfcObjectPlacement(ifcGridPlacement);
				if (result == null) result = caseEntity(ifcGridPlacement);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_GROUP: {
				IfcGroup ifcGroup = (IfcGroup)theEObject;
				T result = caseIfcGroup(ifcGroup);
				if (result == null) result = caseIfcObject(ifcGroup);
				if (result == null) result = caseIfcObjectDefinition(ifcGroup);
				if (result == null) result = caseIfcRoot(ifcGroup);
				if (result == null) result = caseEntity(ifcGroup);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_HALF_SPACE_SOLID: {
				IfcHalfSpaceSolid ifcHalfSpaceSolid = (IfcHalfSpaceSolid)theEObject;
				T result = caseIfcHalfSpaceSolid(ifcHalfSpaceSolid);
				if (result == null) result = caseIfcGeometricRepresentationItem(ifcHalfSpaceSolid);
				if (result == null) result = caseIfcRepresentationItem(ifcHalfSpaceSolid);
				if (result == null) result = caseEntity(ifcHalfSpaceSolid);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_HATCH_LINE_DISTANCE_SELECT: {
				IfcHatchLineDistanceSelect ifcHatchLineDistanceSelect = (IfcHatchLineDistanceSelect)theEObject;
				T result = caseIfcHatchLineDistanceSelect(ifcHatchLineDistanceSelect);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_HEAT_EXCHANGER_TYPE: {
				IfcHeatExchangerType ifcHeatExchangerType = (IfcHeatExchangerType)theEObject;
				T result = caseIfcHeatExchangerType(ifcHeatExchangerType);
				if (result == null) result = caseIfcEnergyConversionDeviceType(ifcHeatExchangerType);
				if (result == null) result = caseIfcDistributionFlowElementType(ifcHeatExchangerType);
				if (result == null) result = caseIfcDistributionElementType(ifcHeatExchangerType);
				if (result == null) result = caseIfcElementType(ifcHeatExchangerType);
				if (result == null) result = caseIfcTypeProduct(ifcHeatExchangerType);
				if (result == null) result = caseIfcTypeObject(ifcHeatExchangerType);
				if (result == null) result = caseIfcObjectDefinition(ifcHeatExchangerType);
				if (result == null) result = caseIfcRoot(ifcHeatExchangerType);
				if (result == null) result = caseEntity(ifcHeatExchangerType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_HEAT_EXCHANGER_TYPE_ENUM_TYPE: {
				IfcHeatExchangerTypeEnumType ifcHeatExchangerTypeEnumType = (IfcHeatExchangerTypeEnumType)theEObject;
				T result = caseIfcHeatExchangerTypeEnumType(ifcHeatExchangerTypeEnumType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_HEAT_FLUX_DENSITY_MEASURE_TYPE: {
				IfcHeatFluxDensityMeasureType ifcHeatFluxDensityMeasureType = (IfcHeatFluxDensityMeasureType)theEObject;
				T result = caseIfcHeatFluxDensityMeasureType(ifcHeatFluxDensityMeasureType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_HEATING_VALUE_MEASURE_TYPE: {
				IfcHeatingValueMeasureType ifcHeatingValueMeasureType = (IfcHeatingValueMeasureType)theEObject;
				T result = caseIfcHeatingValueMeasureType(ifcHeatingValueMeasureType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_HOUR_IN_DAY_TYPE: {
				IfcHourInDayType ifcHourInDayType = (IfcHourInDayType)theEObject;
				T result = caseIfcHourInDayType(ifcHourInDayType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_HUMIDIFIER_TYPE: {
				IfcHumidifierType ifcHumidifierType = (IfcHumidifierType)theEObject;
				T result = caseIfcHumidifierType(ifcHumidifierType);
				if (result == null) result = caseIfcEnergyConversionDeviceType(ifcHumidifierType);
				if (result == null) result = caseIfcDistributionFlowElementType(ifcHumidifierType);
				if (result == null) result = caseIfcDistributionElementType(ifcHumidifierType);
				if (result == null) result = caseIfcElementType(ifcHumidifierType);
				if (result == null) result = caseIfcTypeProduct(ifcHumidifierType);
				if (result == null) result = caseIfcTypeObject(ifcHumidifierType);
				if (result == null) result = caseIfcObjectDefinition(ifcHumidifierType);
				if (result == null) result = caseIfcRoot(ifcHumidifierType);
				if (result == null) result = caseEntity(ifcHumidifierType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_HUMIDIFIER_TYPE_ENUM_TYPE: {
				IfcHumidifierTypeEnumType ifcHumidifierTypeEnumType = (IfcHumidifierTypeEnumType)theEObject;
				T result = caseIfcHumidifierTypeEnumType(ifcHumidifierTypeEnumType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_HYGROSCOPIC_MATERIAL_PROPERTIES: {
				IfcHygroscopicMaterialProperties ifcHygroscopicMaterialProperties = (IfcHygroscopicMaterialProperties)theEObject;
				T result = caseIfcHygroscopicMaterialProperties(ifcHygroscopicMaterialProperties);
				if (result == null) result = caseIfcMaterialProperties(ifcHygroscopicMaterialProperties);
				if (result == null) result = caseEntity(ifcHygroscopicMaterialProperties);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_IDENTIFIER_TYPE: {
				IfcIdentifierType ifcIdentifierType = (IfcIdentifierType)theEObject;
				T result = caseIfcIdentifierType(ifcIdentifierType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_ILLUMINANCE_MEASURE_TYPE: {
				IfcIlluminanceMeasureType ifcIlluminanceMeasureType = (IfcIlluminanceMeasureType)theEObject;
				T result = caseIfcIlluminanceMeasureType(ifcIlluminanceMeasureType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_IMAGE_TEXTURE: {
				IfcImageTexture ifcImageTexture = (IfcImageTexture)theEObject;
				T result = caseIfcImageTexture(ifcImageTexture);
				if (result == null) result = caseIfcSurfaceTexture(ifcImageTexture);
				if (result == null) result = caseEntity(ifcImageTexture);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_INDUCTANCE_MEASURE_TYPE: {
				IfcInductanceMeasureType ifcInductanceMeasureType = (IfcInductanceMeasureType)theEObject;
				T result = caseIfcInductanceMeasureType(ifcInductanceMeasureType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_INTEGER_COUNT_RATE_MEASURE_TYPE: {
				IfcIntegerCountRateMeasureType ifcIntegerCountRateMeasureType = (IfcIntegerCountRateMeasureType)theEObject;
				T result = caseIfcIntegerCountRateMeasureType(ifcIntegerCountRateMeasureType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_INTEGER_TYPE: {
				IfcIntegerType ifcIntegerType = (IfcIntegerType)theEObject;
				T result = caseIfcIntegerType(ifcIntegerType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_INTERNAL_OR_EXTERNAL_ENUM_TYPE: {
				IfcInternalOrExternalEnumType ifcInternalOrExternalEnumType = (IfcInternalOrExternalEnumType)theEObject;
				T result = caseIfcInternalOrExternalEnumType(ifcInternalOrExternalEnumType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_INVENTORY: {
				IfcInventory ifcInventory = (IfcInventory)theEObject;
				T result = caseIfcInventory(ifcInventory);
				if (result == null) result = caseIfcGroup(ifcInventory);
				if (result == null) result = caseIfcObject(ifcInventory);
				if (result == null) result = caseIfcObjectDefinition(ifcInventory);
				if (result == null) result = caseIfcRoot(ifcInventory);
				if (result == null) result = caseEntity(ifcInventory);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_INVENTORY_TYPE_ENUM_TYPE: {
				IfcInventoryTypeEnumType ifcInventoryTypeEnumType = (IfcInventoryTypeEnumType)theEObject;
				T result = caseIfcInventoryTypeEnumType(ifcInventoryTypeEnumType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_ION_CONCENTRATION_MEASURE_TYPE: {
				IfcIonConcentrationMeasureType ifcIonConcentrationMeasureType = (IfcIonConcentrationMeasureType)theEObject;
				T result = caseIfcIonConcentrationMeasureType(ifcIonConcentrationMeasureType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_IRREGULAR_TIME_SERIES: {
				IfcIrregularTimeSeries ifcIrregularTimeSeries = (IfcIrregularTimeSeries)theEObject;
				T result = caseIfcIrregularTimeSeries(ifcIrregularTimeSeries);
				if (result == null) result = caseIfcTimeSeries(ifcIrregularTimeSeries);
				if (result == null) result = caseEntity(ifcIrregularTimeSeries);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_IRREGULAR_TIME_SERIES_VALUE: {
				IfcIrregularTimeSeriesValue ifcIrregularTimeSeriesValue = (IfcIrregularTimeSeriesValue)theEObject;
				T result = caseIfcIrregularTimeSeriesValue(ifcIrregularTimeSeriesValue);
				if (result == null) result = caseEntity(ifcIrregularTimeSeriesValue);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_ISHAPE_PROFILE_DEF: {
				IfcIShapeProfileDef ifcIShapeProfileDef = (IfcIShapeProfileDef)theEObject;
				T result = caseIfcIShapeProfileDef(ifcIShapeProfileDef);
				if (result == null) result = caseIfcParameterizedProfileDef(ifcIShapeProfileDef);
				if (result == null) result = caseIfcProfileDef(ifcIShapeProfileDef);
				if (result == null) result = caseEntity(ifcIShapeProfileDef);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_ISOTHERMAL_MOISTURE_CAPACITY_MEASURE_TYPE: {
				IfcIsothermalMoistureCapacityMeasureType ifcIsothermalMoistureCapacityMeasureType = (IfcIsothermalMoistureCapacityMeasureType)theEObject;
				T result = caseIfcIsothermalMoistureCapacityMeasureType(ifcIsothermalMoistureCapacityMeasureType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_JUNCTION_BOX_TYPE: {
				IfcJunctionBoxType ifcJunctionBoxType = (IfcJunctionBoxType)theEObject;
				T result = caseIfcJunctionBoxType(ifcJunctionBoxType);
				if (result == null) result = caseIfcFlowFittingType(ifcJunctionBoxType);
				if (result == null) result = caseIfcDistributionFlowElementType(ifcJunctionBoxType);
				if (result == null) result = caseIfcDistributionElementType(ifcJunctionBoxType);
				if (result == null) result = caseIfcElementType(ifcJunctionBoxType);
				if (result == null) result = caseIfcTypeProduct(ifcJunctionBoxType);
				if (result == null) result = caseIfcTypeObject(ifcJunctionBoxType);
				if (result == null) result = caseIfcObjectDefinition(ifcJunctionBoxType);
				if (result == null) result = caseIfcRoot(ifcJunctionBoxType);
				if (result == null) result = caseEntity(ifcJunctionBoxType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_JUNCTION_BOX_TYPE_ENUM_TYPE: {
				IfcJunctionBoxTypeEnumType ifcJunctionBoxTypeEnumType = (IfcJunctionBoxTypeEnumType)theEObject;
				T result = caseIfcJunctionBoxTypeEnumType(ifcJunctionBoxTypeEnumType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_KINEMATIC_VISCOSITY_MEASURE_TYPE: {
				IfcKinematicViscosityMeasureType ifcKinematicViscosityMeasureType = (IfcKinematicViscosityMeasureType)theEObject;
				T result = caseIfcKinematicViscosityMeasureType(ifcKinematicViscosityMeasureType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_LABEL_TYPE: {
				IfcLabelType ifcLabelType = (IfcLabelType)theEObject;
				T result = caseIfcLabelType(ifcLabelType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_LABOR_RESOURCE: {
				IfcLaborResource ifcLaborResource = (IfcLaborResource)theEObject;
				T result = caseIfcLaborResource(ifcLaborResource);
				if (result == null) result = caseIfcConstructionResource(ifcLaborResource);
				if (result == null) result = caseIfcResource(ifcLaborResource);
				if (result == null) result = caseIfcObject(ifcLaborResource);
				if (result == null) result = caseIfcObjectDefinition(ifcLaborResource);
				if (result == null) result = caseIfcRoot(ifcLaborResource);
				if (result == null) result = caseEntity(ifcLaborResource);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_LAMP_TYPE: {
				IfcLampType ifcLampType = (IfcLampType)theEObject;
				T result = caseIfcLampType(ifcLampType);
				if (result == null) result = caseIfcFlowTerminalType(ifcLampType);
				if (result == null) result = caseIfcDistributionFlowElementType(ifcLampType);
				if (result == null) result = caseIfcDistributionElementType(ifcLampType);
				if (result == null) result = caseIfcElementType(ifcLampType);
				if (result == null) result = caseIfcTypeProduct(ifcLampType);
				if (result == null) result = caseIfcTypeObject(ifcLampType);
				if (result == null) result = caseIfcObjectDefinition(ifcLampType);
				if (result == null) result = caseIfcRoot(ifcLampType);
				if (result == null) result = caseEntity(ifcLampType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_LAMP_TYPE_ENUM_TYPE: {
				IfcLampTypeEnumType ifcLampTypeEnumType = (IfcLampTypeEnumType)theEObject;
				T result = caseIfcLampTypeEnumType(ifcLampTypeEnumType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_LAYERED_ITEM: {
				IfcLayeredItem ifcLayeredItem = (IfcLayeredItem)theEObject;
				T result = caseIfcLayeredItem(ifcLayeredItem);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_LAYER_SET_DIRECTION_ENUM_TYPE: {
				IfcLayerSetDirectionEnumType ifcLayerSetDirectionEnumType = (IfcLayerSetDirectionEnumType)theEObject;
				T result = caseIfcLayerSetDirectionEnumType(ifcLayerSetDirectionEnumType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_LENGTH_MEASURE_TYPE: {
				IfcLengthMeasureType ifcLengthMeasureType = (IfcLengthMeasureType)theEObject;
				T result = caseIfcLengthMeasureType(ifcLengthMeasureType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_LIBRARY_INFORMATION: {
				IfcLibraryInformation ifcLibraryInformation = (IfcLibraryInformation)theEObject;
				T result = caseIfcLibraryInformation(ifcLibraryInformation);
				if (result == null) result = caseEntity(ifcLibraryInformation);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_LIBRARY_REFERENCE: {
				IfcLibraryReference ifcLibraryReference = (IfcLibraryReference)theEObject;
				T result = caseIfcLibraryReference(ifcLibraryReference);
				if (result == null) result = caseIfcExternalReference(ifcLibraryReference);
				if (result == null) result = caseEntity(ifcLibraryReference);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_LIBRARY_SELECT: {
				IfcLibrarySelect ifcLibrarySelect = (IfcLibrarySelect)theEObject;
				T result = caseIfcLibrarySelect(ifcLibrarySelect);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_LIGHT_DISTRIBUTION_CURVE_ENUM_TYPE: {
				IfcLightDistributionCurveEnumType ifcLightDistributionCurveEnumType = (IfcLightDistributionCurveEnumType)theEObject;
				T result = caseIfcLightDistributionCurveEnumType(ifcLightDistributionCurveEnumType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_LIGHT_DISTRIBUTION_DATA: {
				IfcLightDistributionData ifcLightDistributionData = (IfcLightDistributionData)theEObject;
				T result = caseIfcLightDistributionData(ifcLightDistributionData);
				if (result == null) result = caseEntity(ifcLightDistributionData);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_LIGHT_DISTRIBUTION_DATA_SOURCE_SELECT: {
				IfcLightDistributionDataSourceSelect ifcLightDistributionDataSourceSelect = (IfcLightDistributionDataSourceSelect)theEObject;
				T result = caseIfcLightDistributionDataSourceSelect(ifcLightDistributionDataSourceSelect);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_LIGHT_EMISSION_SOURCE_ENUM_TYPE: {
				IfcLightEmissionSourceEnumType ifcLightEmissionSourceEnumType = (IfcLightEmissionSourceEnumType)theEObject;
				T result = caseIfcLightEmissionSourceEnumType(ifcLightEmissionSourceEnumType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_LIGHT_FIXTURE_TYPE: {
				IfcLightFixtureType ifcLightFixtureType = (IfcLightFixtureType)theEObject;
				T result = caseIfcLightFixtureType(ifcLightFixtureType);
				if (result == null) result = caseIfcFlowTerminalType(ifcLightFixtureType);
				if (result == null) result = caseIfcDistributionFlowElementType(ifcLightFixtureType);
				if (result == null) result = caseIfcDistributionElementType(ifcLightFixtureType);
				if (result == null) result = caseIfcElementType(ifcLightFixtureType);
				if (result == null) result = caseIfcTypeProduct(ifcLightFixtureType);
				if (result == null) result = caseIfcTypeObject(ifcLightFixtureType);
				if (result == null) result = caseIfcObjectDefinition(ifcLightFixtureType);
				if (result == null) result = caseIfcRoot(ifcLightFixtureType);
				if (result == null) result = caseEntity(ifcLightFixtureType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_LIGHT_FIXTURE_TYPE_ENUM_TYPE: {
				IfcLightFixtureTypeEnumType ifcLightFixtureTypeEnumType = (IfcLightFixtureTypeEnumType)theEObject;
				T result = caseIfcLightFixtureTypeEnumType(ifcLightFixtureTypeEnumType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_LIGHT_INTENSITY_DISTRIBUTION: {
				IfcLightIntensityDistribution ifcLightIntensityDistribution = (IfcLightIntensityDistribution)theEObject;
				T result = caseIfcLightIntensityDistribution(ifcLightIntensityDistribution);
				if (result == null) result = caseEntity(ifcLightIntensityDistribution);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_LIGHT_SOURCE: {
				IfcLightSource ifcLightSource = (IfcLightSource)theEObject;
				T result = caseIfcLightSource(ifcLightSource);
				if (result == null) result = caseIfcGeometricRepresentationItem(ifcLightSource);
				if (result == null) result = caseIfcRepresentationItem(ifcLightSource);
				if (result == null) result = caseEntity(ifcLightSource);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_LIGHT_SOURCE_AMBIENT: {
				IfcLightSourceAmbient ifcLightSourceAmbient = (IfcLightSourceAmbient)theEObject;
				T result = caseIfcLightSourceAmbient(ifcLightSourceAmbient);
				if (result == null) result = caseIfcLightSource(ifcLightSourceAmbient);
				if (result == null) result = caseIfcGeometricRepresentationItem(ifcLightSourceAmbient);
				if (result == null) result = caseIfcRepresentationItem(ifcLightSourceAmbient);
				if (result == null) result = caseEntity(ifcLightSourceAmbient);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_LIGHT_SOURCE_DIRECTIONAL: {
				IfcLightSourceDirectional ifcLightSourceDirectional = (IfcLightSourceDirectional)theEObject;
				T result = caseIfcLightSourceDirectional(ifcLightSourceDirectional);
				if (result == null) result = caseIfcLightSource(ifcLightSourceDirectional);
				if (result == null) result = caseIfcGeometricRepresentationItem(ifcLightSourceDirectional);
				if (result == null) result = caseIfcRepresentationItem(ifcLightSourceDirectional);
				if (result == null) result = caseEntity(ifcLightSourceDirectional);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_LIGHT_SOURCE_GONIOMETRIC: {
				IfcLightSourceGoniometric ifcLightSourceGoniometric = (IfcLightSourceGoniometric)theEObject;
				T result = caseIfcLightSourceGoniometric(ifcLightSourceGoniometric);
				if (result == null) result = caseIfcLightSource(ifcLightSourceGoniometric);
				if (result == null) result = caseIfcGeometricRepresentationItem(ifcLightSourceGoniometric);
				if (result == null) result = caseIfcRepresentationItem(ifcLightSourceGoniometric);
				if (result == null) result = caseEntity(ifcLightSourceGoniometric);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_LIGHT_SOURCE_POSITIONAL: {
				IfcLightSourcePositional ifcLightSourcePositional = (IfcLightSourcePositional)theEObject;
				T result = caseIfcLightSourcePositional(ifcLightSourcePositional);
				if (result == null) result = caseIfcLightSource(ifcLightSourcePositional);
				if (result == null) result = caseIfcGeometricRepresentationItem(ifcLightSourcePositional);
				if (result == null) result = caseIfcRepresentationItem(ifcLightSourcePositional);
				if (result == null) result = caseEntity(ifcLightSourcePositional);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_LIGHT_SOURCE_SPOT: {
				IfcLightSourceSpot ifcLightSourceSpot = (IfcLightSourceSpot)theEObject;
				T result = caseIfcLightSourceSpot(ifcLightSourceSpot);
				if (result == null) result = caseIfcLightSourcePositional(ifcLightSourceSpot);
				if (result == null) result = caseIfcLightSource(ifcLightSourceSpot);
				if (result == null) result = caseIfcGeometricRepresentationItem(ifcLightSourceSpot);
				if (result == null) result = caseIfcRepresentationItem(ifcLightSourceSpot);
				if (result == null) result = caseEntity(ifcLightSourceSpot);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_LINE: {
				IfcLine ifcLine = (IfcLine)theEObject;
				T result = caseIfcLine(ifcLine);
				if (result == null) result = caseIfcCurve(ifcLine);
				if (result == null) result = caseIfcGeometricRepresentationItem(ifcLine);
				if (result == null) result = caseIfcRepresentationItem(ifcLine);
				if (result == null) result = caseEntity(ifcLine);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_LINEAR_DIMENSION: {
				IfcLinearDimension ifcLinearDimension = (IfcLinearDimension)theEObject;
				T result = caseIfcLinearDimension(ifcLinearDimension);
				if (result == null) result = caseIfcDimensionCurveDirectedCallout(ifcLinearDimension);
				if (result == null) result = caseIfcDraughtingCallout(ifcLinearDimension);
				if (result == null) result = caseIfcGeometricRepresentationItem(ifcLinearDimension);
				if (result == null) result = caseIfcRepresentationItem(ifcLinearDimension);
				if (result == null) result = caseEntity(ifcLinearDimension);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_LINEAR_FORCE_MEASURE_TYPE: {
				IfcLinearForceMeasureType ifcLinearForceMeasureType = (IfcLinearForceMeasureType)theEObject;
				T result = caseIfcLinearForceMeasureType(ifcLinearForceMeasureType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_LINEAR_MOMENT_MEASURE_TYPE: {
				IfcLinearMomentMeasureType ifcLinearMomentMeasureType = (IfcLinearMomentMeasureType)theEObject;
				T result = caseIfcLinearMomentMeasureType(ifcLinearMomentMeasureType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_LINEAR_STIFFNESS_MEASURE_TYPE: {
				IfcLinearStiffnessMeasureType ifcLinearStiffnessMeasureType = (IfcLinearStiffnessMeasureType)theEObject;
				T result = caseIfcLinearStiffnessMeasureType(ifcLinearStiffnessMeasureType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_LINEAR_VELOCITY_MEASURE_TYPE: {
				IfcLinearVelocityMeasureType ifcLinearVelocityMeasureType = (IfcLinearVelocityMeasureType)theEObject;
				T result = caseIfcLinearVelocityMeasureType(ifcLinearVelocityMeasureType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_LOAD_GROUP_TYPE_ENUM_TYPE: {
				IfcLoadGroupTypeEnumType ifcLoadGroupTypeEnumType = (IfcLoadGroupTypeEnumType)theEObject;
				T result = caseIfcLoadGroupTypeEnumType(ifcLoadGroupTypeEnumType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_LOCAL_PLACEMENT: {
				IfcLocalPlacement ifcLocalPlacement = (IfcLocalPlacement)theEObject;
				T result = caseIfcLocalPlacement(ifcLocalPlacement);
				if (result == null) result = caseIfcObjectPlacement(ifcLocalPlacement);
				if (result == null) result = caseEntity(ifcLocalPlacement);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_LOCAL_TIME: {
				IfcLocalTime ifcLocalTime = (IfcLocalTime)theEObject;
				T result = caseIfcLocalTime(ifcLocalTime);
				if (result == null) result = caseEntity(ifcLocalTime);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_LOGICAL_OPERATOR_ENUM_TYPE: {
				IfcLogicalOperatorEnumType ifcLogicalOperatorEnumType = (IfcLogicalOperatorEnumType)theEObject;
				T result = caseIfcLogicalOperatorEnumType(ifcLogicalOperatorEnumType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_LOGICAL_TYPE: {
				IfcLogicalType ifcLogicalType = (IfcLogicalType)theEObject;
				T result = caseIfcLogicalType(ifcLogicalType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_LOOP: {
				IfcLoop ifcLoop = (IfcLoop)theEObject;
				T result = caseIfcLoop(ifcLoop);
				if (result == null) result = caseIfcTopologicalRepresentationItem(ifcLoop);
				if (result == null) result = caseIfcRepresentationItem(ifcLoop);
				if (result == null) result = caseEntity(ifcLoop);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_LSHAPE_PROFILE_DEF: {
				IfcLShapeProfileDef ifcLShapeProfileDef = (IfcLShapeProfileDef)theEObject;
				T result = caseIfcLShapeProfileDef(ifcLShapeProfileDef);
				if (result == null) result = caseIfcParameterizedProfileDef(ifcLShapeProfileDef);
				if (result == null) result = caseIfcProfileDef(ifcLShapeProfileDef);
				if (result == null) result = caseEntity(ifcLShapeProfileDef);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_LUMINOUS_FLUX_MEASURE_TYPE: {
				IfcLuminousFluxMeasureType ifcLuminousFluxMeasureType = (IfcLuminousFluxMeasureType)theEObject;
				T result = caseIfcLuminousFluxMeasureType(ifcLuminousFluxMeasureType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_LUMINOUS_INTENSITY_DISTRIBUTION_MEASURE_TYPE: {
				IfcLuminousIntensityDistributionMeasureType ifcLuminousIntensityDistributionMeasureType = (IfcLuminousIntensityDistributionMeasureType)theEObject;
				T result = caseIfcLuminousIntensityDistributionMeasureType(ifcLuminousIntensityDistributionMeasureType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_LUMINOUS_INTENSITY_MEASURE_TYPE: {
				IfcLuminousIntensityMeasureType ifcLuminousIntensityMeasureType = (IfcLuminousIntensityMeasureType)theEObject;
				T result = caseIfcLuminousIntensityMeasureType(ifcLuminousIntensityMeasureType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_MAGNETIC_FLUX_DENSITY_MEASURE_TYPE: {
				IfcMagneticFluxDensityMeasureType ifcMagneticFluxDensityMeasureType = (IfcMagneticFluxDensityMeasureType)theEObject;
				T result = caseIfcMagneticFluxDensityMeasureType(ifcMagneticFluxDensityMeasureType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_MAGNETIC_FLUX_MEASURE_TYPE: {
				IfcMagneticFluxMeasureType ifcMagneticFluxMeasureType = (IfcMagneticFluxMeasureType)theEObject;
				T result = caseIfcMagneticFluxMeasureType(ifcMagneticFluxMeasureType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_MANIFOLD_SOLID_BREP: {
				IfcManifoldSolidBrep ifcManifoldSolidBrep = (IfcManifoldSolidBrep)theEObject;
				T result = caseIfcManifoldSolidBrep(ifcManifoldSolidBrep);
				if (result == null) result = caseIfcSolidModel(ifcManifoldSolidBrep);
				if (result == null) result = caseIfcGeometricRepresentationItem(ifcManifoldSolidBrep);
				if (result == null) result = caseIfcRepresentationItem(ifcManifoldSolidBrep);
				if (result == null) result = caseEntity(ifcManifoldSolidBrep);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_MAPPED_ITEM: {
				IfcMappedItem ifcMappedItem = (IfcMappedItem)theEObject;
				T result = caseIfcMappedItem(ifcMappedItem);
				if (result == null) result = caseIfcRepresentationItem(ifcMappedItem);
				if (result == null) result = caseEntity(ifcMappedItem);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_MASS_DENSITY_MEASURE_TYPE: {
				IfcMassDensityMeasureType ifcMassDensityMeasureType = (IfcMassDensityMeasureType)theEObject;
				T result = caseIfcMassDensityMeasureType(ifcMassDensityMeasureType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_MASS_FLOW_RATE_MEASURE_TYPE: {
				IfcMassFlowRateMeasureType ifcMassFlowRateMeasureType = (IfcMassFlowRateMeasureType)theEObject;
				T result = caseIfcMassFlowRateMeasureType(ifcMassFlowRateMeasureType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_MASS_MEASURE_TYPE: {
				IfcMassMeasureType ifcMassMeasureType = (IfcMassMeasureType)theEObject;
				T result = caseIfcMassMeasureType(ifcMassMeasureType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_MASS_PER_LENGTH_MEASURE_TYPE: {
				IfcMassPerLengthMeasureType ifcMassPerLengthMeasureType = (IfcMassPerLengthMeasureType)theEObject;
				T result = caseIfcMassPerLengthMeasureType(ifcMassPerLengthMeasureType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_MATERIAL: {
				IfcMaterial ifcMaterial = (IfcMaterial)theEObject;
				T result = caseIfcMaterial(ifcMaterial);
				if (result == null) result = caseEntity(ifcMaterial);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_MATERIAL_CLASSIFICATION_RELATIONSHIP: {
				IfcMaterialClassificationRelationship ifcMaterialClassificationRelationship = (IfcMaterialClassificationRelationship)theEObject;
				T result = caseIfcMaterialClassificationRelationship(ifcMaterialClassificationRelationship);
				if (result == null) result = caseEntity(ifcMaterialClassificationRelationship);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_MATERIAL_DEFINITION_REPRESENTATION: {
				IfcMaterialDefinitionRepresentation ifcMaterialDefinitionRepresentation = (IfcMaterialDefinitionRepresentation)theEObject;
				T result = caseIfcMaterialDefinitionRepresentation(ifcMaterialDefinitionRepresentation);
				if (result == null) result = caseIfcProductRepresentation(ifcMaterialDefinitionRepresentation);
				if (result == null) result = caseEntity(ifcMaterialDefinitionRepresentation);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_MATERIAL_LAYER: {
				IfcMaterialLayer ifcMaterialLayer = (IfcMaterialLayer)theEObject;
				T result = caseIfcMaterialLayer(ifcMaterialLayer);
				if (result == null) result = caseEntity(ifcMaterialLayer);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_MATERIAL_LAYER_SET: {
				IfcMaterialLayerSet ifcMaterialLayerSet = (IfcMaterialLayerSet)theEObject;
				T result = caseIfcMaterialLayerSet(ifcMaterialLayerSet);
				if (result == null) result = caseEntity(ifcMaterialLayerSet);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_MATERIAL_LAYER_SET_USAGE: {
				IfcMaterialLayerSetUsage ifcMaterialLayerSetUsage = (IfcMaterialLayerSetUsage)theEObject;
				T result = caseIfcMaterialLayerSetUsage(ifcMaterialLayerSetUsage);
				if (result == null) result = caseEntity(ifcMaterialLayerSetUsage);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_MATERIAL_LIST: {
				IfcMaterialList ifcMaterialList = (IfcMaterialList)theEObject;
				T result = caseIfcMaterialList(ifcMaterialList);
				if (result == null) result = caseEntity(ifcMaterialList);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_MATERIAL_PROPERTIES: {
				IfcMaterialProperties ifcMaterialProperties = (IfcMaterialProperties)theEObject;
				T result = caseIfcMaterialProperties(ifcMaterialProperties);
				if (result == null) result = caseEntity(ifcMaterialProperties);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_MATERIAL_SELECT: {
				IfcMaterialSelect ifcMaterialSelect = (IfcMaterialSelect)theEObject;
				T result = caseIfcMaterialSelect(ifcMaterialSelect);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_MEASURE_VALUE: {
				IfcMeasureValue ifcMeasureValue = (IfcMeasureValue)theEObject;
				T result = caseIfcMeasureValue(ifcMeasureValue);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case FinalPackage.IFC_MEASURE_WITH_UNIT: {
				IfcMeasureWithUnit ifcMeasureWithUnit = (IfcMeasureWithUnit)theEObject;
				T result = caseIfcMeasureWithUnit(ifcMeasureWithUnit);
				if (result == null) result = caseEntity(ifcMeasureWithUnit);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			default: return doSwitch2(classifierID, theEObject);
		}
	}
	
	protected T doSwitch2(int classifierID, EObject theEObject) {
		switch (classifierID) {
		case FinalPackage.IFC_MECHANICAL_CONCRETE_MATERIAL_PROPERTIES: {
			IfcMechanicalConcreteMaterialProperties ifcMechanicalConcreteMaterialProperties = (IfcMechanicalConcreteMaterialProperties)theEObject;
			T result = caseIfcMechanicalConcreteMaterialProperties(ifcMechanicalConcreteMaterialProperties);
			if (result == null) result = caseIfcMechanicalMaterialProperties(ifcMechanicalConcreteMaterialProperties);
			if (result == null) result = caseIfcMaterialProperties(ifcMechanicalConcreteMaterialProperties);
			if (result == null) result = caseEntity(ifcMechanicalConcreteMaterialProperties);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_MECHANICAL_FASTENER: {
			IfcMechanicalFastener ifcMechanicalFastener = (IfcMechanicalFastener)theEObject;
			T result = caseIfcMechanicalFastener(ifcMechanicalFastener);
			if (result == null) result = caseIfcFastener(ifcMechanicalFastener);
			if (result == null) result = caseIfcElementComponent(ifcMechanicalFastener);
			if (result == null) result = caseIfcElement(ifcMechanicalFastener);
			if (result == null) result = caseIfcProduct(ifcMechanicalFastener);
			if (result == null) result = caseIfcObject(ifcMechanicalFastener);
			if (result == null) result = caseIfcObjectDefinition(ifcMechanicalFastener);
			if (result == null) result = caseIfcRoot(ifcMechanicalFastener);
			if (result == null) result = caseEntity(ifcMechanicalFastener);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_MECHANICAL_FASTENER_TYPE: {
			IfcMechanicalFastenerType ifcMechanicalFastenerType = (IfcMechanicalFastenerType)theEObject;
			T result = caseIfcMechanicalFastenerType(ifcMechanicalFastenerType);
			if (result == null) result = caseIfcFastenerType(ifcMechanicalFastenerType);
			if (result == null) result = caseIfcElementComponentType(ifcMechanicalFastenerType);
			if (result == null) result = caseIfcElementType(ifcMechanicalFastenerType);
			if (result == null) result = caseIfcTypeProduct(ifcMechanicalFastenerType);
			if (result == null) result = caseIfcTypeObject(ifcMechanicalFastenerType);
			if (result == null) result = caseIfcObjectDefinition(ifcMechanicalFastenerType);
			if (result == null) result = caseIfcRoot(ifcMechanicalFastenerType);
			if (result == null) result = caseEntity(ifcMechanicalFastenerType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_MECHANICAL_MATERIAL_PROPERTIES: {
			IfcMechanicalMaterialProperties ifcMechanicalMaterialProperties = (IfcMechanicalMaterialProperties)theEObject;
			T result = caseIfcMechanicalMaterialProperties(ifcMechanicalMaterialProperties);
			if (result == null) result = caseIfcMaterialProperties(ifcMechanicalMaterialProperties);
			if (result == null) result = caseEntity(ifcMechanicalMaterialProperties);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_MECHANICAL_STEEL_MATERIAL_PROPERTIES: {
			IfcMechanicalSteelMaterialProperties ifcMechanicalSteelMaterialProperties = (IfcMechanicalSteelMaterialProperties)theEObject;
			T result = caseIfcMechanicalSteelMaterialProperties(ifcMechanicalSteelMaterialProperties);
			if (result == null) result = caseIfcMechanicalMaterialProperties(ifcMechanicalSteelMaterialProperties);
			if (result == null) result = caseIfcMaterialProperties(ifcMechanicalSteelMaterialProperties);
			if (result == null) result = caseEntity(ifcMechanicalSteelMaterialProperties);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_MEMBER: {
			IfcMember ifcMember = (IfcMember)theEObject;
			T result = caseIfcMember(ifcMember);
			if (result == null) result = caseIfcBuildingElement(ifcMember);
			if (result == null) result = caseIfcElement(ifcMember);
			if (result == null) result = caseIfcProduct(ifcMember);
			if (result == null) result = caseIfcObject(ifcMember);
			if (result == null) result = caseIfcObjectDefinition(ifcMember);
			if (result == null) result = caseIfcRoot(ifcMember);
			if (result == null) result = caseEntity(ifcMember);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_MEMBER_TYPE: {
			IfcMemberType ifcMemberType = (IfcMemberType)theEObject;
			T result = caseIfcMemberType(ifcMemberType);
			if (result == null) result = caseIfcBuildingElementType(ifcMemberType);
			if (result == null) result = caseIfcElementType(ifcMemberType);
			if (result == null) result = caseIfcTypeProduct(ifcMemberType);
			if (result == null) result = caseIfcTypeObject(ifcMemberType);
			if (result == null) result = caseIfcObjectDefinition(ifcMemberType);
			if (result == null) result = caseIfcRoot(ifcMemberType);
			if (result == null) result = caseEntity(ifcMemberType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_MEMBER_TYPE_ENUM_TYPE: {
			IfcMemberTypeEnumType ifcMemberTypeEnumType = (IfcMemberTypeEnumType)theEObject;
			T result = caseIfcMemberTypeEnumType(ifcMemberTypeEnumType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_METRIC: {
			IfcMetric ifcMetric = (IfcMetric)theEObject;
			T result = caseIfcMetric(ifcMetric);
			if (result == null) result = caseIfcConstraint(ifcMetric);
			if (result == null) result = caseEntity(ifcMetric);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_METRIC_VALUE_SELECT: {
			IfcMetricValueSelect ifcMetricValueSelect = (IfcMetricValueSelect)theEObject;
			T result = caseIfcMetricValueSelect(ifcMetricValueSelect);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_MINUTE_IN_HOUR_TYPE: {
			IfcMinuteInHourType ifcMinuteInHourType = (IfcMinuteInHourType)theEObject;
			T result = caseIfcMinuteInHourType(ifcMinuteInHourType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_MODULUS_OF_ELASTICITY_MEASURE_TYPE: {
			IfcModulusOfElasticityMeasureType ifcModulusOfElasticityMeasureType = (IfcModulusOfElasticityMeasureType)theEObject;
			T result = caseIfcModulusOfElasticityMeasureType(ifcModulusOfElasticityMeasureType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_MODULUS_OF_LINEAR_SUBGRADE_REACTION_MEASURE_TYPE: {
			IfcModulusOfLinearSubgradeReactionMeasureType ifcModulusOfLinearSubgradeReactionMeasureType = (IfcModulusOfLinearSubgradeReactionMeasureType)theEObject;
			T result = caseIfcModulusOfLinearSubgradeReactionMeasureType(ifcModulusOfLinearSubgradeReactionMeasureType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_MODULUS_OF_ROTATIONAL_SUBGRADE_REACTION_MEASURE_TYPE: {
			IfcModulusOfRotationalSubgradeReactionMeasureType ifcModulusOfRotationalSubgradeReactionMeasureType = (IfcModulusOfRotationalSubgradeReactionMeasureType)theEObject;
			T result = caseIfcModulusOfRotationalSubgradeReactionMeasureType(ifcModulusOfRotationalSubgradeReactionMeasureType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_MODULUS_OF_SUBGRADE_REACTION_MEASURE_TYPE: {
			IfcModulusOfSubgradeReactionMeasureType ifcModulusOfSubgradeReactionMeasureType = (IfcModulusOfSubgradeReactionMeasureType)theEObject;
			T result = caseIfcModulusOfSubgradeReactionMeasureType(ifcModulusOfSubgradeReactionMeasureType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_MOISTURE_DIFFUSIVITY_MEASURE_TYPE: {
			IfcMoistureDiffusivityMeasureType ifcMoistureDiffusivityMeasureType = (IfcMoistureDiffusivityMeasureType)theEObject;
			T result = caseIfcMoistureDiffusivityMeasureType(ifcMoistureDiffusivityMeasureType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_MOLECULAR_WEIGHT_MEASURE_TYPE: {
			IfcMolecularWeightMeasureType ifcMolecularWeightMeasureType = (IfcMolecularWeightMeasureType)theEObject;
			T result = caseIfcMolecularWeightMeasureType(ifcMolecularWeightMeasureType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_MOMENT_OF_INERTIA_MEASURE_TYPE: {
			IfcMomentOfInertiaMeasureType ifcMomentOfInertiaMeasureType = (IfcMomentOfInertiaMeasureType)theEObject;
			T result = caseIfcMomentOfInertiaMeasureType(ifcMomentOfInertiaMeasureType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_MONETARY_MEASURE_TYPE: {
			IfcMonetaryMeasureType ifcMonetaryMeasureType = (IfcMonetaryMeasureType)theEObject;
			T result = caseIfcMonetaryMeasureType(ifcMonetaryMeasureType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_MONETARY_UNIT: {
			IfcMonetaryUnit ifcMonetaryUnit = (IfcMonetaryUnit)theEObject;
			T result = caseIfcMonetaryUnit(ifcMonetaryUnit);
			if (result == null) result = caseEntity(ifcMonetaryUnit);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_MONTH_IN_YEAR_NUMBER_TYPE: {
			IfcMonthInYearNumberType ifcMonthInYearNumberType = (IfcMonthInYearNumberType)theEObject;
			T result = caseIfcMonthInYearNumberType(ifcMonthInYearNumberType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_MOTOR_CONNECTION_TYPE: {
			IfcMotorConnectionType ifcMotorConnectionType = (IfcMotorConnectionType)theEObject;
			T result = caseIfcMotorConnectionType(ifcMotorConnectionType);
			if (result == null) result = caseIfcEnergyConversionDeviceType(ifcMotorConnectionType);
			if (result == null) result = caseIfcDistributionFlowElementType(ifcMotorConnectionType);
			if (result == null) result = caseIfcDistributionElementType(ifcMotorConnectionType);
			if (result == null) result = caseIfcElementType(ifcMotorConnectionType);
			if (result == null) result = caseIfcTypeProduct(ifcMotorConnectionType);
			if (result == null) result = caseIfcTypeObject(ifcMotorConnectionType);
			if (result == null) result = caseIfcObjectDefinition(ifcMotorConnectionType);
			if (result == null) result = caseIfcRoot(ifcMotorConnectionType);
			if (result == null) result = caseEntity(ifcMotorConnectionType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_MOTOR_CONNECTION_TYPE_ENUM_TYPE: {
			IfcMotorConnectionTypeEnumType ifcMotorConnectionTypeEnumType = (IfcMotorConnectionTypeEnumType)theEObject;
			T result = caseIfcMotorConnectionTypeEnumType(ifcMotorConnectionTypeEnumType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_MOVE: {
			IfcMove ifcMove = (IfcMove)theEObject;
			T result = caseIfcMove(ifcMove);
			if (result == null) result = caseIfcTask(ifcMove);
			if (result == null) result = caseIfcProcess(ifcMove);
			if (result == null) result = caseIfcObject(ifcMove);
			if (result == null) result = caseIfcObjectDefinition(ifcMove);
			if (result == null) result = caseIfcRoot(ifcMove);
			if (result == null) result = caseEntity(ifcMove);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_NAMED_UNIT: {
			IfcNamedUnit ifcNamedUnit = (IfcNamedUnit)theEObject;
			T result = caseIfcNamedUnit(ifcNamedUnit);
			if (result == null) result = caseEntity(ifcNamedUnit);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_NORMALISED_RATIO_MEASURE_TYPE: {
			IfcNormalisedRatioMeasureType ifcNormalisedRatioMeasureType = (IfcNormalisedRatioMeasureType)theEObject;
			T result = caseIfcNormalisedRatioMeasureType(ifcNormalisedRatioMeasureType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_NULL_STYLE_TYPE: {
			IfcNullStyleType ifcNullStyleType = (IfcNullStyleType)theEObject;
			T result = caseIfcNullStyleType(ifcNullStyleType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_NUMERIC_MEASURE_TYPE: {
			IfcNumericMeasureType ifcNumericMeasureType = (IfcNumericMeasureType)theEObject;
			T result = caseIfcNumericMeasureType(ifcNumericMeasureType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_OBJECT: {
			IfcObject ifcObject = (IfcObject)theEObject;
			T result = caseIfcObject(ifcObject);
			if (result == null) result = caseIfcObjectDefinition(ifcObject);
			if (result == null) result = caseIfcRoot(ifcObject);
			if (result == null) result = caseEntity(ifcObject);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_OBJECT_DEFINITION: {
			IfcObjectDefinition ifcObjectDefinition = (IfcObjectDefinition)theEObject;
			T result = caseIfcObjectDefinition(ifcObjectDefinition);
			if (result == null) result = caseIfcRoot(ifcObjectDefinition);
			if (result == null) result = caseEntity(ifcObjectDefinition);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_OBJECTIVE: {
			IfcObjective ifcObjective = (IfcObjective)theEObject;
			T result = caseIfcObjective(ifcObjective);
			if (result == null) result = caseIfcConstraint(ifcObjective);
			if (result == null) result = caseEntity(ifcObjective);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_OBJECTIVE_ENUM_TYPE: {
			IfcObjectiveEnumType ifcObjectiveEnumType = (IfcObjectiveEnumType)theEObject;
			T result = caseIfcObjectiveEnumType(ifcObjectiveEnumType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_OBJECT_PLACEMENT: {
			IfcObjectPlacement ifcObjectPlacement = (IfcObjectPlacement)theEObject;
			T result = caseIfcObjectPlacement(ifcObjectPlacement);
			if (result == null) result = caseEntity(ifcObjectPlacement);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_OBJECT_REFERENCE_SELECT: {
			IfcObjectReferenceSelect ifcObjectReferenceSelect = (IfcObjectReferenceSelect)theEObject;
			T result = caseIfcObjectReferenceSelect(ifcObjectReferenceSelect);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_OBJECT_TYPE_ENUM_TYPE: {
			IfcObjectTypeEnumType ifcObjectTypeEnumType = (IfcObjectTypeEnumType)theEObject;
			T result = caseIfcObjectTypeEnumType(ifcObjectTypeEnumType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_OCCUPANT: {
			IfcOccupant ifcOccupant = (IfcOccupant)theEObject;
			T result = caseIfcOccupant(ifcOccupant);
			if (result == null) result = caseIfcActor(ifcOccupant);
			if (result == null) result = caseIfcObject(ifcOccupant);
			if (result == null) result = caseIfcObjectDefinition(ifcOccupant);
			if (result == null) result = caseIfcRoot(ifcOccupant);
			if (result == null) result = caseEntity(ifcOccupant);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_OCCUPANT_TYPE_ENUM_TYPE: {
			IfcOccupantTypeEnumType ifcOccupantTypeEnumType = (IfcOccupantTypeEnumType)theEObject;
			T result = caseIfcOccupantTypeEnumType(ifcOccupantTypeEnumType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_OFFSET_CURVE2_D: {
			IfcOffsetCurve2D ifcOffsetCurve2D = (IfcOffsetCurve2D)theEObject;
			T result = caseIfcOffsetCurve2D(ifcOffsetCurve2D);
			if (result == null) result = caseIfcCurve(ifcOffsetCurve2D);
			if (result == null) result = caseIfcGeometricRepresentationItem(ifcOffsetCurve2D);
			if (result == null) result = caseIfcRepresentationItem(ifcOffsetCurve2D);
			if (result == null) result = caseEntity(ifcOffsetCurve2D);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_OFFSET_CURVE3_D: {
			IfcOffsetCurve3D ifcOffsetCurve3D = (IfcOffsetCurve3D)theEObject;
			T result = caseIfcOffsetCurve3D(ifcOffsetCurve3D);
			if (result == null) result = caseIfcCurve(ifcOffsetCurve3D);
			if (result == null) result = caseIfcGeometricRepresentationItem(ifcOffsetCurve3D);
			if (result == null) result = caseIfcRepresentationItem(ifcOffsetCurve3D);
			if (result == null) result = caseEntity(ifcOffsetCurve3D);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_ONE_DIRECTION_REPEAT_FACTOR: {
			IfcOneDirectionRepeatFactor ifcOneDirectionRepeatFactor = (IfcOneDirectionRepeatFactor)theEObject;
			T result = caseIfcOneDirectionRepeatFactor(ifcOneDirectionRepeatFactor);
			if (result == null) result = caseIfcGeometricRepresentationItem(ifcOneDirectionRepeatFactor);
			if (result == null) result = caseIfcRepresentationItem(ifcOneDirectionRepeatFactor);
			if (result == null) result = caseEntity(ifcOneDirectionRepeatFactor);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_OPENING_ELEMENT: {
			IfcOpeningElement ifcOpeningElement = (IfcOpeningElement)theEObject;
			T result = caseIfcOpeningElement(ifcOpeningElement);
			if (result == null) result = caseIfcFeatureElementSubtraction(ifcOpeningElement);
			if (result == null) result = caseIfcFeatureElement(ifcOpeningElement);
			if (result == null) result = caseIfcElement(ifcOpeningElement);
			if (result == null) result = caseIfcProduct(ifcOpeningElement);
			if (result == null) result = caseIfcObject(ifcOpeningElement);
			if (result == null) result = caseIfcObjectDefinition(ifcOpeningElement);
			if (result == null) result = caseIfcRoot(ifcOpeningElement);
			if (result == null) result = caseEntity(ifcOpeningElement);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_OPEN_SHELL: {
			IfcOpenShell ifcOpenShell = (IfcOpenShell)theEObject;
			T result = caseIfcOpenShell(ifcOpenShell);
			if (result == null) result = caseIfcConnectedFaceSet(ifcOpenShell);
			if (result == null) result = caseIfcTopologicalRepresentationItem(ifcOpenShell);
			if (result == null) result = caseIfcRepresentationItem(ifcOpenShell);
			if (result == null) result = caseEntity(ifcOpenShell);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_OPTICAL_MATERIAL_PROPERTIES: {
			IfcOpticalMaterialProperties ifcOpticalMaterialProperties = (IfcOpticalMaterialProperties)theEObject;
			T result = caseIfcOpticalMaterialProperties(ifcOpticalMaterialProperties);
			if (result == null) result = caseIfcMaterialProperties(ifcOpticalMaterialProperties);
			if (result == null) result = caseEntity(ifcOpticalMaterialProperties);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_ORDER_ACTION: {
			IfcOrderAction ifcOrderAction = (IfcOrderAction)theEObject;
			T result = caseIfcOrderAction(ifcOrderAction);
			if (result == null) result = caseIfcTask(ifcOrderAction);
			if (result == null) result = caseIfcProcess(ifcOrderAction);
			if (result == null) result = caseIfcObject(ifcOrderAction);
			if (result == null) result = caseIfcObjectDefinition(ifcOrderAction);
			if (result == null) result = caseIfcRoot(ifcOrderAction);
			if (result == null) result = caseEntity(ifcOrderAction);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_ORGANIZATION: {
			IfcOrganization ifcOrganization = (IfcOrganization)theEObject;
			T result = caseIfcOrganization(ifcOrganization);
			if (result == null) result = caseEntity(ifcOrganization);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_ORGANIZATION_RELATIONSHIP: {
			IfcOrganizationRelationship ifcOrganizationRelationship = (IfcOrganizationRelationship)theEObject;
			T result = caseIfcOrganizationRelationship(ifcOrganizationRelationship);
			if (result == null) result = caseEntity(ifcOrganizationRelationship);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_ORIENTATION_SELECT: {
			IfcOrientationSelect ifcOrientationSelect = (IfcOrientationSelect)theEObject;
			T result = caseIfcOrientationSelect(ifcOrientationSelect);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_ORIENTED_EDGE: {
			IfcOrientedEdge ifcOrientedEdge = (IfcOrientedEdge)theEObject;
			T result = caseIfcOrientedEdge(ifcOrientedEdge);
			if (result == null) result = caseIfcOrientedEdgeTemp(ifcOrientedEdge);
			if (result == null) result = caseIfcEdge(ifcOrientedEdge);
			if (result == null) result = caseIfcTopologicalRepresentationItem(ifcOrientedEdge);
			if (result == null) result = caseIfcRepresentationItem(ifcOrientedEdge);
			if (result == null) result = caseEntity(ifcOrientedEdge);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_ORIENTED_EDGE_TEMP: {
			IfcOrientedEdgeTemp ifcOrientedEdgeTemp = (IfcOrientedEdgeTemp)theEObject;
			T result = caseIfcOrientedEdgeTemp(ifcOrientedEdgeTemp);
			if (result == null) result = caseIfcEdge(ifcOrientedEdgeTemp);
			if (result == null) result = caseIfcTopologicalRepresentationItem(ifcOrientedEdgeTemp);
			if (result == null) result = caseIfcRepresentationItem(ifcOrientedEdgeTemp);
			if (result == null) result = caseEntity(ifcOrientedEdgeTemp);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_OUTLET_TYPE: {
			IfcOutletType ifcOutletType = (IfcOutletType)theEObject;
			T result = caseIfcOutletType(ifcOutletType);
			if (result == null) result = caseIfcFlowTerminalType(ifcOutletType);
			if (result == null) result = caseIfcDistributionFlowElementType(ifcOutletType);
			if (result == null) result = caseIfcDistributionElementType(ifcOutletType);
			if (result == null) result = caseIfcElementType(ifcOutletType);
			if (result == null) result = caseIfcTypeProduct(ifcOutletType);
			if (result == null) result = caseIfcTypeObject(ifcOutletType);
			if (result == null) result = caseIfcObjectDefinition(ifcOutletType);
			if (result == null) result = caseIfcRoot(ifcOutletType);
			if (result == null) result = caseEntity(ifcOutletType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_OUTLET_TYPE_ENUM_TYPE: {
			IfcOutletTypeEnumType ifcOutletTypeEnumType = (IfcOutletTypeEnumType)theEObject;
			T result = caseIfcOutletTypeEnumType(ifcOutletTypeEnumType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_OWNER_HISTORY: {
			IfcOwnerHistory ifcOwnerHistory = (IfcOwnerHistory)theEObject;
			T result = caseIfcOwnerHistory(ifcOwnerHistory);
			if (result == null) result = caseEntity(ifcOwnerHistory);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_PARAMETERIZED_PROFILE_DEF: {
			IfcParameterizedProfileDef ifcParameterizedProfileDef = (IfcParameterizedProfileDef)theEObject;
			T result = caseIfcParameterizedProfileDef(ifcParameterizedProfileDef);
			if (result == null) result = caseIfcProfileDef(ifcParameterizedProfileDef);
			if (result == null) result = caseEntity(ifcParameterizedProfileDef);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_PARAMETER_VALUE_TYPE: {
			IfcParameterValueType ifcParameterValueType = (IfcParameterValueType)theEObject;
			T result = caseIfcParameterValueType(ifcParameterValueType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_PATH: {
			IfcPath ifcPath = (IfcPath)theEObject;
			T result = caseIfcPath(ifcPath);
			if (result == null) result = caseIfcTopologicalRepresentationItem(ifcPath);
			if (result == null) result = caseIfcRepresentationItem(ifcPath);
			if (result == null) result = caseEntity(ifcPath);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_PERFORMANCE_HISTORY: {
			IfcPerformanceHistory ifcPerformanceHistory = (IfcPerformanceHistory)theEObject;
			T result = caseIfcPerformanceHistory(ifcPerformanceHistory);
			if (result == null) result = caseIfcControl(ifcPerformanceHistory);
			if (result == null) result = caseIfcObject(ifcPerformanceHistory);
			if (result == null) result = caseIfcObjectDefinition(ifcPerformanceHistory);
			if (result == null) result = caseIfcRoot(ifcPerformanceHistory);
			if (result == null) result = caseEntity(ifcPerformanceHistory);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_PERMEABLE_COVERING_OPERATION_ENUM_TYPE: {
			IfcPermeableCoveringOperationEnumType ifcPermeableCoveringOperationEnumType = (IfcPermeableCoveringOperationEnumType)theEObject;
			T result = caseIfcPermeableCoveringOperationEnumType(ifcPermeableCoveringOperationEnumType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_PERMEABLE_COVERING_PROPERTIES: {
			IfcPermeableCoveringProperties ifcPermeableCoveringProperties = (IfcPermeableCoveringProperties)theEObject;
			T result = caseIfcPermeableCoveringProperties(ifcPermeableCoveringProperties);
			if (result == null) result = caseIfcPropertySetDefinition(ifcPermeableCoveringProperties);
			if (result == null) result = caseIfcPropertyDefinition(ifcPermeableCoveringProperties);
			if (result == null) result = caseIfcRoot(ifcPermeableCoveringProperties);
			if (result == null) result = caseEntity(ifcPermeableCoveringProperties);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_PERMIT: {
			IfcPermit ifcPermit = (IfcPermit)theEObject;
			T result = caseIfcPermit(ifcPermit);
			if (result == null) result = caseIfcControl(ifcPermit);
			if (result == null) result = caseIfcObject(ifcPermit);
			if (result == null) result = caseIfcObjectDefinition(ifcPermit);
			if (result == null) result = caseIfcRoot(ifcPermit);
			if (result == null) result = caseEntity(ifcPermit);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_PERSON: {
			IfcPerson ifcPerson = (IfcPerson)theEObject;
			T result = caseIfcPerson(ifcPerson);
			if (result == null) result = caseEntity(ifcPerson);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_PERSON_AND_ORGANIZATION: {
			IfcPersonAndOrganization ifcPersonAndOrganization = (IfcPersonAndOrganization)theEObject;
			T result = caseIfcPersonAndOrganization(ifcPersonAndOrganization);
			if (result == null) result = caseEntity(ifcPersonAndOrganization);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_PH_MEASURE_TYPE: {
			IfcPHMeasureType ifcPHMeasureType = (IfcPHMeasureType)theEObject;
			T result = caseIfcPHMeasureType(ifcPHMeasureType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_PHYSICAL_COMPLEX_QUANTITY: {
			IfcPhysicalComplexQuantity ifcPhysicalComplexQuantity = (IfcPhysicalComplexQuantity)theEObject;
			T result = caseIfcPhysicalComplexQuantity(ifcPhysicalComplexQuantity);
			if (result == null) result = caseIfcPhysicalQuantity(ifcPhysicalComplexQuantity);
			if (result == null) result = caseEntity(ifcPhysicalComplexQuantity);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_PHYSICAL_OR_VIRTUAL_ENUM_TYPE: {
			IfcPhysicalOrVirtualEnumType ifcPhysicalOrVirtualEnumType = (IfcPhysicalOrVirtualEnumType)theEObject;
			T result = caseIfcPhysicalOrVirtualEnumType(ifcPhysicalOrVirtualEnumType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_PHYSICAL_QUANTITY: {
			IfcPhysicalQuantity ifcPhysicalQuantity = (IfcPhysicalQuantity)theEObject;
			T result = caseIfcPhysicalQuantity(ifcPhysicalQuantity);
			if (result == null) result = caseEntity(ifcPhysicalQuantity);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_PHYSICAL_SIMPLE_QUANTITY: {
			IfcPhysicalSimpleQuantity ifcPhysicalSimpleQuantity = (IfcPhysicalSimpleQuantity)theEObject;
			T result = caseIfcPhysicalSimpleQuantity(ifcPhysicalSimpleQuantity);
			if (result == null) result = caseIfcPhysicalQuantity(ifcPhysicalSimpleQuantity);
			if (result == null) result = caseEntity(ifcPhysicalSimpleQuantity);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_PILE: {
			IfcPile ifcPile = (IfcPile)theEObject;
			T result = caseIfcPile(ifcPile);
			if (result == null) result = caseIfcBuildingElement(ifcPile);
			if (result == null) result = caseIfcElement(ifcPile);
			if (result == null) result = caseIfcProduct(ifcPile);
			if (result == null) result = caseIfcObject(ifcPile);
			if (result == null) result = caseIfcObjectDefinition(ifcPile);
			if (result == null) result = caseIfcRoot(ifcPile);
			if (result == null) result = caseEntity(ifcPile);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_PILE_CONSTRUCTION_ENUM_TYPE: {
			IfcPileConstructionEnumType ifcPileConstructionEnumType = (IfcPileConstructionEnumType)theEObject;
			T result = caseIfcPileConstructionEnumType(ifcPileConstructionEnumType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_PILE_TYPE_ENUM_TYPE: {
			IfcPileTypeEnumType ifcPileTypeEnumType = (IfcPileTypeEnumType)theEObject;
			T result = caseIfcPileTypeEnumType(ifcPileTypeEnumType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_PIPE_FITTING_TYPE: {
			IfcPipeFittingType ifcPipeFittingType = (IfcPipeFittingType)theEObject;
			T result = caseIfcPipeFittingType(ifcPipeFittingType);
			if (result == null) result = caseIfcFlowFittingType(ifcPipeFittingType);
			if (result == null) result = caseIfcDistributionFlowElementType(ifcPipeFittingType);
			if (result == null) result = caseIfcDistributionElementType(ifcPipeFittingType);
			if (result == null) result = caseIfcElementType(ifcPipeFittingType);
			if (result == null) result = caseIfcTypeProduct(ifcPipeFittingType);
			if (result == null) result = caseIfcTypeObject(ifcPipeFittingType);
			if (result == null) result = caseIfcObjectDefinition(ifcPipeFittingType);
			if (result == null) result = caseIfcRoot(ifcPipeFittingType);
			if (result == null) result = caseEntity(ifcPipeFittingType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_PIPE_FITTING_TYPE_ENUM_TYPE: {
			IfcPipeFittingTypeEnumType ifcPipeFittingTypeEnumType = (IfcPipeFittingTypeEnumType)theEObject;
			T result = caseIfcPipeFittingTypeEnumType(ifcPipeFittingTypeEnumType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_PIPE_SEGMENT_TYPE: {
			IfcPipeSegmentType ifcPipeSegmentType = (IfcPipeSegmentType)theEObject;
			T result = caseIfcPipeSegmentType(ifcPipeSegmentType);
			if (result == null) result = caseIfcFlowSegmentType(ifcPipeSegmentType);
			if (result == null) result = caseIfcDistributionFlowElementType(ifcPipeSegmentType);
			if (result == null) result = caseIfcDistributionElementType(ifcPipeSegmentType);
			if (result == null) result = caseIfcElementType(ifcPipeSegmentType);
			if (result == null) result = caseIfcTypeProduct(ifcPipeSegmentType);
			if (result == null) result = caseIfcTypeObject(ifcPipeSegmentType);
			if (result == null) result = caseIfcObjectDefinition(ifcPipeSegmentType);
			if (result == null) result = caseIfcRoot(ifcPipeSegmentType);
			if (result == null) result = caseEntity(ifcPipeSegmentType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_PIPE_SEGMENT_TYPE_ENUM_TYPE: {
			IfcPipeSegmentTypeEnumType ifcPipeSegmentTypeEnumType = (IfcPipeSegmentTypeEnumType)theEObject;
			T result = caseIfcPipeSegmentTypeEnumType(ifcPipeSegmentTypeEnumType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_PIXEL_TEXTURE: {
			IfcPixelTexture ifcPixelTexture = (IfcPixelTexture)theEObject;
			T result = caseIfcPixelTexture(ifcPixelTexture);
			if (result == null) result = caseIfcSurfaceTexture(ifcPixelTexture);
			if (result == null) result = caseEntity(ifcPixelTexture);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_PLACEMENT: {
			IfcPlacement ifcPlacement = (IfcPlacement)theEObject;
			T result = caseIfcPlacement(ifcPlacement);
			if (result == null) result = caseIfcGeometricRepresentationItem(ifcPlacement);
			if (result == null) result = caseIfcRepresentationItem(ifcPlacement);
			if (result == null) result = caseEntity(ifcPlacement);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_PLANAR_BOX: {
			IfcPlanarBox ifcPlanarBox = (IfcPlanarBox)theEObject;
			T result = caseIfcPlanarBox(ifcPlanarBox);
			if (result == null) result = caseIfcPlanarExtent(ifcPlanarBox);
			if (result == null) result = caseIfcGeometricRepresentationItem(ifcPlanarBox);
			if (result == null) result = caseIfcRepresentationItem(ifcPlanarBox);
			if (result == null) result = caseEntity(ifcPlanarBox);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_PLANAR_EXTENT: {
			IfcPlanarExtent ifcPlanarExtent = (IfcPlanarExtent)theEObject;
			T result = caseIfcPlanarExtent(ifcPlanarExtent);
			if (result == null) result = caseIfcGeometricRepresentationItem(ifcPlanarExtent);
			if (result == null) result = caseIfcRepresentationItem(ifcPlanarExtent);
			if (result == null) result = caseEntity(ifcPlanarExtent);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_PLANAR_FORCE_MEASURE_TYPE: {
			IfcPlanarForceMeasureType ifcPlanarForceMeasureType = (IfcPlanarForceMeasureType)theEObject;
			T result = caseIfcPlanarForceMeasureType(ifcPlanarForceMeasureType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_PLANE: {
			IfcPlane ifcPlane = (IfcPlane)theEObject;
			T result = caseIfcPlane(ifcPlane);
			if (result == null) result = caseIfcElementarySurface(ifcPlane);
			if (result == null) result = caseIfcSurface(ifcPlane);
			if (result == null) result = caseIfcGeometricRepresentationItem(ifcPlane);
			if (result == null) result = caseIfcRepresentationItem(ifcPlane);
			if (result == null) result = caseEntity(ifcPlane);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_PLANE_ANGLE_MEASURE_TYPE: {
			IfcPlaneAngleMeasureType ifcPlaneAngleMeasureType = (IfcPlaneAngleMeasureType)theEObject;
			T result = caseIfcPlaneAngleMeasureType(ifcPlaneAngleMeasureType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_PLATE: {
			IfcPlate ifcPlate = (IfcPlate)theEObject;
			T result = caseIfcPlate(ifcPlate);
			if (result == null) result = caseIfcBuildingElement(ifcPlate);
			if (result == null) result = caseIfcElement(ifcPlate);
			if (result == null) result = caseIfcProduct(ifcPlate);
			if (result == null) result = caseIfcObject(ifcPlate);
			if (result == null) result = caseIfcObjectDefinition(ifcPlate);
			if (result == null) result = caseIfcRoot(ifcPlate);
			if (result == null) result = caseEntity(ifcPlate);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_PLATE_TYPE: {
			IfcPlateType ifcPlateType = (IfcPlateType)theEObject;
			T result = caseIfcPlateType(ifcPlateType);
			if (result == null) result = caseIfcBuildingElementType(ifcPlateType);
			if (result == null) result = caseIfcElementType(ifcPlateType);
			if (result == null) result = caseIfcTypeProduct(ifcPlateType);
			if (result == null) result = caseIfcTypeObject(ifcPlateType);
			if (result == null) result = caseIfcObjectDefinition(ifcPlateType);
			if (result == null) result = caseIfcRoot(ifcPlateType);
			if (result == null) result = caseEntity(ifcPlateType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_PLATE_TYPE_ENUM_TYPE: {
			IfcPlateTypeEnumType ifcPlateTypeEnumType = (IfcPlateTypeEnumType)theEObject;
			T result = caseIfcPlateTypeEnumType(ifcPlateTypeEnumType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_POINT: {
			IfcPoint ifcPoint = (IfcPoint)theEObject;
			T result = caseIfcPoint(ifcPoint);
			if (result == null) result = caseIfcGeometricRepresentationItem(ifcPoint);
			if (result == null) result = caseIfcRepresentationItem(ifcPoint);
			if (result == null) result = caseEntity(ifcPoint);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_POINT_ON_CURVE: {
			IfcPointOnCurve ifcPointOnCurve = (IfcPointOnCurve)theEObject;
			T result = caseIfcPointOnCurve(ifcPointOnCurve);
			if (result == null) result = caseIfcPoint(ifcPointOnCurve);
			if (result == null) result = caseIfcGeometricRepresentationItem(ifcPointOnCurve);
			if (result == null) result = caseIfcRepresentationItem(ifcPointOnCurve);
			if (result == null) result = caseEntity(ifcPointOnCurve);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_POINT_ON_SURFACE: {
			IfcPointOnSurface ifcPointOnSurface = (IfcPointOnSurface)theEObject;
			T result = caseIfcPointOnSurface(ifcPointOnSurface);
			if (result == null) result = caseIfcPoint(ifcPointOnSurface);
			if (result == null) result = caseIfcGeometricRepresentationItem(ifcPointOnSurface);
			if (result == null) result = caseIfcRepresentationItem(ifcPointOnSurface);
			if (result == null) result = caseEntity(ifcPointOnSurface);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_POINT_OR_VERTEX_POINT: {
			IfcPointOrVertexPoint ifcPointOrVertexPoint = (IfcPointOrVertexPoint)theEObject;
			T result = caseIfcPointOrVertexPoint(ifcPointOrVertexPoint);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_POLYGONAL_BOUNDED_HALF_SPACE: {
			IfcPolygonalBoundedHalfSpace ifcPolygonalBoundedHalfSpace = (IfcPolygonalBoundedHalfSpace)theEObject;
			T result = caseIfcPolygonalBoundedHalfSpace(ifcPolygonalBoundedHalfSpace);
			if (result == null) result = caseIfcHalfSpaceSolid(ifcPolygonalBoundedHalfSpace);
			if (result == null) result = caseIfcGeometricRepresentationItem(ifcPolygonalBoundedHalfSpace);
			if (result == null) result = caseIfcRepresentationItem(ifcPolygonalBoundedHalfSpace);
			if (result == null) result = caseEntity(ifcPolygonalBoundedHalfSpace);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_POLYLINE: {
			IfcPolyline ifcPolyline = (IfcPolyline)theEObject;
			T result = caseIfcPolyline(ifcPolyline);
			if (result == null) result = caseIfcBoundedCurve(ifcPolyline);
			if (result == null) result = caseIfcCurve(ifcPolyline);
			if (result == null) result = caseIfcGeometricRepresentationItem(ifcPolyline);
			if (result == null) result = caseIfcRepresentationItem(ifcPolyline);
			if (result == null) result = caseEntity(ifcPolyline);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_POLY_LOOP: {
			IfcPolyLoop ifcPolyLoop = (IfcPolyLoop)theEObject;
			T result = caseIfcPolyLoop(ifcPolyLoop);
			if (result == null) result = caseIfcLoop(ifcPolyLoop);
			if (result == null) result = caseIfcTopologicalRepresentationItem(ifcPolyLoop);
			if (result == null) result = caseIfcRepresentationItem(ifcPolyLoop);
			if (result == null) result = caseEntity(ifcPolyLoop);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_PORT: {
			IfcPort ifcPort = (IfcPort)theEObject;
			T result = caseIfcPort(ifcPort);
			if (result == null) result = caseIfcProduct(ifcPort);
			if (result == null) result = caseIfcObject(ifcPort);
			if (result == null) result = caseIfcObjectDefinition(ifcPort);
			if (result == null) result = caseIfcRoot(ifcPort);
			if (result == null) result = caseEntity(ifcPort);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_POSITIVE_LENGTH_MEASURE_TYPE: {
			IfcPositiveLengthMeasureType ifcPositiveLengthMeasureType = (IfcPositiveLengthMeasureType)theEObject;
			T result = caseIfcPositiveLengthMeasureType(ifcPositiveLengthMeasureType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_POSITIVE_PLANE_ANGLE_MEASURE_TYPE: {
			IfcPositivePlaneAngleMeasureType ifcPositivePlaneAngleMeasureType = (IfcPositivePlaneAngleMeasureType)theEObject;
			T result = caseIfcPositivePlaneAngleMeasureType(ifcPositivePlaneAngleMeasureType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_POSITIVE_RATIO_MEASURE_TYPE: {
			IfcPositiveRatioMeasureType ifcPositiveRatioMeasureType = (IfcPositiveRatioMeasureType)theEObject;
			T result = caseIfcPositiveRatioMeasureType(ifcPositiveRatioMeasureType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_POSTAL_ADDRESS: {
			IfcPostalAddress ifcPostalAddress = (IfcPostalAddress)theEObject;
			T result = caseIfcPostalAddress(ifcPostalAddress);
			if (result == null) result = caseIfcAddress(ifcPostalAddress);
			if (result == null) result = caseEntity(ifcPostalAddress);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_POWER_MEASURE_TYPE: {
			IfcPowerMeasureType ifcPowerMeasureType = (IfcPowerMeasureType)theEObject;
			T result = caseIfcPowerMeasureType(ifcPowerMeasureType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_PRE_DEFINED_COLOUR: {
			IfcPreDefinedColour ifcPreDefinedColour = (IfcPreDefinedColour)theEObject;
			T result = caseIfcPreDefinedColour(ifcPreDefinedColour);
			if (result == null) result = caseIfcPreDefinedItem(ifcPreDefinedColour);
			if (result == null) result = caseEntity(ifcPreDefinedColour);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_PRE_DEFINED_CURVE_FONT: {
			IfcPreDefinedCurveFont ifcPreDefinedCurveFont = (IfcPreDefinedCurveFont)theEObject;
			T result = caseIfcPreDefinedCurveFont(ifcPreDefinedCurveFont);
			if (result == null) result = caseIfcPreDefinedItem(ifcPreDefinedCurveFont);
			if (result == null) result = caseEntity(ifcPreDefinedCurveFont);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_PRE_DEFINED_DIMENSION_SYMBOL: {
			IfcPreDefinedDimensionSymbol ifcPreDefinedDimensionSymbol = (IfcPreDefinedDimensionSymbol)theEObject;
			T result = caseIfcPreDefinedDimensionSymbol(ifcPreDefinedDimensionSymbol);
			if (result == null) result = caseIfcPreDefinedSymbol(ifcPreDefinedDimensionSymbol);
			if (result == null) result = caseIfcPreDefinedItem(ifcPreDefinedDimensionSymbol);
			if (result == null) result = caseEntity(ifcPreDefinedDimensionSymbol);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_PRE_DEFINED_ITEM: {
			IfcPreDefinedItem ifcPreDefinedItem = (IfcPreDefinedItem)theEObject;
			T result = caseIfcPreDefinedItem(ifcPreDefinedItem);
			if (result == null) result = caseEntity(ifcPreDefinedItem);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_PRE_DEFINED_POINT_MARKER_SYMBOL: {
			IfcPreDefinedPointMarkerSymbol ifcPreDefinedPointMarkerSymbol = (IfcPreDefinedPointMarkerSymbol)theEObject;
			T result = caseIfcPreDefinedPointMarkerSymbol(ifcPreDefinedPointMarkerSymbol);
			if (result == null) result = caseIfcPreDefinedSymbol(ifcPreDefinedPointMarkerSymbol);
			if (result == null) result = caseIfcPreDefinedItem(ifcPreDefinedPointMarkerSymbol);
			if (result == null) result = caseEntity(ifcPreDefinedPointMarkerSymbol);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_PRE_DEFINED_SYMBOL: {
			IfcPreDefinedSymbol ifcPreDefinedSymbol = (IfcPreDefinedSymbol)theEObject;
			T result = caseIfcPreDefinedSymbol(ifcPreDefinedSymbol);
			if (result == null) result = caseIfcPreDefinedItem(ifcPreDefinedSymbol);
			if (result == null) result = caseEntity(ifcPreDefinedSymbol);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_PRE_DEFINED_TERMINATOR_SYMBOL: {
			IfcPreDefinedTerminatorSymbol ifcPreDefinedTerminatorSymbol = (IfcPreDefinedTerminatorSymbol)theEObject;
			T result = caseIfcPreDefinedTerminatorSymbol(ifcPreDefinedTerminatorSymbol);
			if (result == null) result = caseIfcPreDefinedSymbol(ifcPreDefinedTerminatorSymbol);
			if (result == null) result = caseIfcPreDefinedItem(ifcPreDefinedTerminatorSymbol);
			if (result == null) result = caseEntity(ifcPreDefinedTerminatorSymbol);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_PRE_DEFINED_TEXT_FONT: {
			IfcPreDefinedTextFont ifcPreDefinedTextFont = (IfcPreDefinedTextFont)theEObject;
			T result = caseIfcPreDefinedTextFont(ifcPreDefinedTextFont);
			if (result == null) result = caseIfcPreDefinedItem(ifcPreDefinedTextFont);
			if (result == null) result = caseEntity(ifcPreDefinedTextFont);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_PRESENTABLE_TEXT_TYPE: {
			IfcPresentableTextType ifcPresentableTextType = (IfcPresentableTextType)theEObject;
			T result = caseIfcPresentableTextType(ifcPresentableTextType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_PRESENTATION_LAYER_ASSIGNMENT: {
			IfcPresentationLayerAssignment ifcPresentationLayerAssignment = (IfcPresentationLayerAssignment)theEObject;
			T result = caseIfcPresentationLayerAssignment(ifcPresentationLayerAssignment);
			if (result == null) result = caseEntity(ifcPresentationLayerAssignment);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_PRESENTATION_LAYER_WITH_STYLE: {
			IfcPresentationLayerWithStyle ifcPresentationLayerWithStyle = (IfcPresentationLayerWithStyle)theEObject;
			T result = caseIfcPresentationLayerWithStyle(ifcPresentationLayerWithStyle);
			if (result == null) result = caseIfcPresentationLayerAssignment(ifcPresentationLayerWithStyle);
			if (result == null) result = caseEntity(ifcPresentationLayerWithStyle);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_PRESENTATION_STYLE: {
			IfcPresentationStyle ifcPresentationStyle = (IfcPresentationStyle)theEObject;
			T result = caseIfcPresentationStyle(ifcPresentationStyle);
			if (result == null) result = caseEntity(ifcPresentationStyle);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_PRESENTATION_STYLE_ASSIGNMENT: {
			IfcPresentationStyleAssignment ifcPresentationStyleAssignment = (IfcPresentationStyleAssignment)theEObject;
			T result = caseIfcPresentationStyleAssignment(ifcPresentationStyleAssignment);
			if (result == null) result = caseEntity(ifcPresentationStyleAssignment);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_PRESENTATION_STYLE_SELECT: {
			IfcPresentationStyleSelect ifcPresentationStyleSelect = (IfcPresentationStyleSelect)theEObject;
			T result = caseIfcPresentationStyleSelect(ifcPresentationStyleSelect);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_PRESSURE_MEASURE_TYPE: {
			IfcPressureMeasureType ifcPressureMeasureType = (IfcPressureMeasureType)theEObject;
			T result = caseIfcPressureMeasureType(ifcPressureMeasureType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_PROCEDURE: {
			IfcProcedure ifcProcedure = (IfcProcedure)theEObject;
			T result = caseIfcProcedure(ifcProcedure);
			if (result == null) result = caseIfcProcess(ifcProcedure);
			if (result == null) result = caseIfcObject(ifcProcedure);
			if (result == null) result = caseIfcObjectDefinition(ifcProcedure);
			if (result == null) result = caseIfcRoot(ifcProcedure);
			if (result == null) result = caseEntity(ifcProcedure);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_PROCEDURE_TYPE_ENUM_TYPE: {
			IfcProcedureTypeEnumType ifcProcedureTypeEnumType = (IfcProcedureTypeEnumType)theEObject;
			T result = caseIfcProcedureTypeEnumType(ifcProcedureTypeEnumType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_PROCESS: {
			IfcProcess ifcProcess = (IfcProcess)theEObject;
			T result = caseIfcProcess(ifcProcess);
			if (result == null) result = caseIfcObject(ifcProcess);
			if (result == null) result = caseIfcObjectDefinition(ifcProcess);
			if (result == null) result = caseIfcRoot(ifcProcess);
			if (result == null) result = caseEntity(ifcProcess);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_PRODUCT: {
			IfcProduct ifcProduct = (IfcProduct)theEObject;
			T result = caseIfcProduct(ifcProduct);
			if (result == null) result = caseIfcObject(ifcProduct);
			if (result == null) result = caseIfcObjectDefinition(ifcProduct);
			if (result == null) result = caseIfcRoot(ifcProduct);
			if (result == null) result = caseEntity(ifcProduct);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_PRODUCT_DEFINITION_SHAPE: {
			IfcProductDefinitionShape ifcProductDefinitionShape = (IfcProductDefinitionShape)theEObject;
			T result = caseIfcProductDefinitionShape(ifcProductDefinitionShape);
			if (result == null) result = caseIfcProductRepresentation(ifcProductDefinitionShape);
			if (result == null) result = caseEntity(ifcProductDefinitionShape);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_PRODUCT_REPRESENTATION: {
			IfcProductRepresentation ifcProductRepresentation = (IfcProductRepresentation)theEObject;
			T result = caseIfcProductRepresentation(ifcProductRepresentation);
			if (result == null) result = caseEntity(ifcProductRepresentation);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_PRODUCTS_OF_COMBUSTION_PROPERTIES: {
			IfcProductsOfCombustionProperties ifcProductsOfCombustionProperties = (IfcProductsOfCombustionProperties)theEObject;
			T result = caseIfcProductsOfCombustionProperties(ifcProductsOfCombustionProperties);
			if (result == null) result = caseIfcMaterialProperties(ifcProductsOfCombustionProperties);
			if (result == null) result = caseEntity(ifcProductsOfCombustionProperties);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_PROFILE_DEF: {
			IfcProfileDef ifcProfileDef = (IfcProfileDef)theEObject;
			T result = caseIfcProfileDef(ifcProfileDef);
			if (result == null) result = caseEntity(ifcProfileDef);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_PROFILE_PROPERTIES: {
			IfcProfileProperties ifcProfileProperties = (IfcProfileProperties)theEObject;
			T result = caseIfcProfileProperties(ifcProfileProperties);
			if (result == null) result = caseEntity(ifcProfileProperties);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_PROFILE_TYPE_ENUM_TYPE: {
			IfcProfileTypeEnumType ifcProfileTypeEnumType = (IfcProfileTypeEnumType)theEObject;
			T result = caseIfcProfileTypeEnumType(ifcProfileTypeEnumType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_PROJECT: {
			IfcProject ifcProject = (IfcProject)theEObject;
			T result = caseIfcProject(ifcProject);
			if (result == null) result = caseIfcObject(ifcProject);
			if (result == null) result = caseIfcObjectDefinition(ifcProject);
			if (result == null) result = caseIfcRoot(ifcProject);
			if (result == null) result = caseEntity(ifcProject);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_PROJECTED_OR_TRUE_LENGTH_ENUM_TYPE: {
			IfcProjectedOrTrueLengthEnumType ifcProjectedOrTrueLengthEnumType = (IfcProjectedOrTrueLengthEnumType)theEObject;
			T result = caseIfcProjectedOrTrueLengthEnumType(ifcProjectedOrTrueLengthEnumType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_PROJECTION_CURVE: {
			IfcProjectionCurve ifcProjectionCurve = (IfcProjectionCurve)theEObject;
			T result = caseIfcProjectionCurve(ifcProjectionCurve);
			if (result == null) result = caseIfcAnnotationCurveOccurrence(ifcProjectionCurve);
			if (result == null) result = caseIfcAnnotationOccurrence(ifcProjectionCurve);
			if (result == null) result = caseIfcStyledItem(ifcProjectionCurve);
			if (result == null) result = caseIfcRepresentationItem(ifcProjectionCurve);
			if (result == null) result = caseEntity(ifcProjectionCurve);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_PROJECTION_ELEMENT: {
			IfcProjectionElement ifcProjectionElement = (IfcProjectionElement)theEObject;
			T result = caseIfcProjectionElement(ifcProjectionElement);
			if (result == null) result = caseIfcFeatureElementAddition(ifcProjectionElement);
			if (result == null) result = caseIfcFeatureElement(ifcProjectionElement);
			if (result == null) result = caseIfcElement(ifcProjectionElement);
			if (result == null) result = caseIfcProduct(ifcProjectionElement);
			if (result == null) result = caseIfcObject(ifcProjectionElement);
			if (result == null) result = caseIfcObjectDefinition(ifcProjectionElement);
			if (result == null) result = caseIfcRoot(ifcProjectionElement);
			if (result == null) result = caseEntity(ifcProjectionElement);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_PROJECT_ORDER: {
			IfcProjectOrder ifcProjectOrder = (IfcProjectOrder)theEObject;
			T result = caseIfcProjectOrder(ifcProjectOrder);
			if (result == null) result = caseIfcControl(ifcProjectOrder);
			if (result == null) result = caseIfcObject(ifcProjectOrder);
			if (result == null) result = caseIfcObjectDefinition(ifcProjectOrder);
			if (result == null) result = caseIfcRoot(ifcProjectOrder);
			if (result == null) result = caseEntity(ifcProjectOrder);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_PROJECT_ORDER_RECORD: {
			IfcProjectOrderRecord ifcProjectOrderRecord = (IfcProjectOrderRecord)theEObject;
			T result = caseIfcProjectOrderRecord(ifcProjectOrderRecord);
			if (result == null) result = caseIfcControl(ifcProjectOrderRecord);
			if (result == null) result = caseIfcObject(ifcProjectOrderRecord);
			if (result == null) result = caseIfcObjectDefinition(ifcProjectOrderRecord);
			if (result == null) result = caseIfcRoot(ifcProjectOrderRecord);
			if (result == null) result = caseEntity(ifcProjectOrderRecord);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_PROJECT_ORDER_RECORD_TYPE_ENUM_TYPE: {
			IfcProjectOrderRecordTypeEnumType ifcProjectOrderRecordTypeEnumType = (IfcProjectOrderRecordTypeEnumType)theEObject;
			T result = caseIfcProjectOrderRecordTypeEnumType(ifcProjectOrderRecordTypeEnumType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_PROJECT_ORDER_TYPE_ENUM_TYPE: {
			IfcProjectOrderTypeEnumType ifcProjectOrderTypeEnumType = (IfcProjectOrderTypeEnumType)theEObject;
			T result = caseIfcProjectOrderTypeEnumType(ifcProjectOrderTypeEnumType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_PROPERTY: {
			IfcProperty ifcProperty = (IfcProperty)theEObject;
			T result = caseIfcProperty(ifcProperty);
			if (result == null) result = caseEntity(ifcProperty);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_PROPERTY_BOUNDED_VALUE: {
			IfcPropertyBoundedValue ifcPropertyBoundedValue = (IfcPropertyBoundedValue)theEObject;
			T result = caseIfcPropertyBoundedValue(ifcPropertyBoundedValue);
			if (result == null) result = caseIfcSimpleProperty(ifcPropertyBoundedValue);
			if (result == null) result = caseIfcProperty(ifcPropertyBoundedValue);
			if (result == null) result = caseEntity(ifcPropertyBoundedValue);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_PROPERTY_CONSTRAINT_RELATIONSHIP: {
			IfcPropertyConstraintRelationship ifcPropertyConstraintRelationship = (IfcPropertyConstraintRelationship)theEObject;
			T result = caseIfcPropertyConstraintRelationship(ifcPropertyConstraintRelationship);
			if (result == null) result = caseEntity(ifcPropertyConstraintRelationship);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_PROPERTY_DEFINITION: {
			IfcPropertyDefinition ifcPropertyDefinition = (IfcPropertyDefinition)theEObject;
			T result = caseIfcPropertyDefinition(ifcPropertyDefinition);
			if (result == null) result = caseIfcRoot(ifcPropertyDefinition);
			if (result == null) result = caseEntity(ifcPropertyDefinition);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_PROPERTY_DEPENDENCY_RELATIONSHIP: {
			IfcPropertyDependencyRelationship ifcPropertyDependencyRelationship = (IfcPropertyDependencyRelationship)theEObject;
			T result = caseIfcPropertyDependencyRelationship(ifcPropertyDependencyRelationship);
			if (result == null) result = caseEntity(ifcPropertyDependencyRelationship);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_PROPERTY_ENUMERATED_VALUE: {
			IfcPropertyEnumeratedValue ifcPropertyEnumeratedValue = (IfcPropertyEnumeratedValue)theEObject;
			T result = caseIfcPropertyEnumeratedValue(ifcPropertyEnumeratedValue);
			if (result == null) result = caseIfcSimpleProperty(ifcPropertyEnumeratedValue);
			if (result == null) result = caseIfcProperty(ifcPropertyEnumeratedValue);
			if (result == null) result = caseEntity(ifcPropertyEnumeratedValue);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_PROPERTY_ENUMERATION: {
			IfcPropertyEnumeration ifcPropertyEnumeration = (IfcPropertyEnumeration)theEObject;
			T result = caseIfcPropertyEnumeration(ifcPropertyEnumeration);
			if (result == null) result = caseEntity(ifcPropertyEnumeration);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_PROPERTY_LIST_VALUE: {
			IfcPropertyListValue ifcPropertyListValue = (IfcPropertyListValue)theEObject;
			T result = caseIfcPropertyListValue(ifcPropertyListValue);
			if (result == null) result = caseIfcSimpleProperty(ifcPropertyListValue);
			if (result == null) result = caseIfcProperty(ifcPropertyListValue);
			if (result == null) result = caseEntity(ifcPropertyListValue);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_PROPERTY_REFERENCE_VALUE: {
			IfcPropertyReferenceValue ifcPropertyReferenceValue = (IfcPropertyReferenceValue)theEObject;
			T result = caseIfcPropertyReferenceValue(ifcPropertyReferenceValue);
			if (result == null) result = caseIfcSimpleProperty(ifcPropertyReferenceValue);
			if (result == null) result = caseIfcProperty(ifcPropertyReferenceValue);
			if (result == null) result = caseEntity(ifcPropertyReferenceValue);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_PROPERTY_SET: {
			IfcPropertySet ifcPropertySet = (IfcPropertySet)theEObject;
			T result = caseIfcPropertySet(ifcPropertySet);
			if (result == null) result = caseIfcPropertySetDefinition(ifcPropertySet);
			if (result == null) result = caseIfcPropertyDefinition(ifcPropertySet);
			if (result == null) result = caseIfcRoot(ifcPropertySet);
			if (result == null) result = caseEntity(ifcPropertySet);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_PROPERTY_SET_DEFINITION: {
			IfcPropertySetDefinition ifcPropertySetDefinition = (IfcPropertySetDefinition)theEObject;
			T result = caseIfcPropertySetDefinition(ifcPropertySetDefinition);
			if (result == null) result = caseIfcPropertyDefinition(ifcPropertySetDefinition);
			if (result == null) result = caseIfcRoot(ifcPropertySetDefinition);
			if (result == null) result = caseEntity(ifcPropertySetDefinition);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_PROPERTY_SINGLE_VALUE: {
			IfcPropertySingleValue ifcPropertySingleValue = (IfcPropertySingleValue)theEObject;
			T result = caseIfcPropertySingleValue(ifcPropertySingleValue);
			if (result == null) result = caseIfcSimpleProperty(ifcPropertySingleValue);
			if (result == null) result = caseIfcProperty(ifcPropertySingleValue);
			if (result == null) result = caseEntity(ifcPropertySingleValue);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_PROPERTY_SOURCE_ENUM_TYPE: {
			IfcPropertySourceEnumType ifcPropertySourceEnumType = (IfcPropertySourceEnumType)theEObject;
			T result = caseIfcPropertySourceEnumType(ifcPropertySourceEnumType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_PROPERTY_TABLE_VALUE: {
			IfcPropertyTableValue ifcPropertyTableValue = (IfcPropertyTableValue)theEObject;
			T result = caseIfcPropertyTableValue(ifcPropertyTableValue);
			if (result == null) result = caseIfcSimpleProperty(ifcPropertyTableValue);
			if (result == null) result = caseIfcProperty(ifcPropertyTableValue);
			if (result == null) result = caseEntity(ifcPropertyTableValue);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_PROTECTIVE_DEVICE_TYPE: {
			IfcProtectiveDeviceType ifcProtectiveDeviceType = (IfcProtectiveDeviceType)theEObject;
			T result = caseIfcProtectiveDeviceType(ifcProtectiveDeviceType);
			if (result == null) result = caseIfcFlowControllerType(ifcProtectiveDeviceType);
			if (result == null) result = caseIfcDistributionFlowElementType(ifcProtectiveDeviceType);
			if (result == null) result = caseIfcDistributionElementType(ifcProtectiveDeviceType);
			if (result == null) result = caseIfcElementType(ifcProtectiveDeviceType);
			if (result == null) result = caseIfcTypeProduct(ifcProtectiveDeviceType);
			if (result == null) result = caseIfcTypeObject(ifcProtectiveDeviceType);
			if (result == null) result = caseIfcObjectDefinition(ifcProtectiveDeviceType);
			if (result == null) result = caseIfcRoot(ifcProtectiveDeviceType);
			if (result == null) result = caseEntity(ifcProtectiveDeviceType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_PROTECTIVE_DEVICE_TYPE_ENUM_TYPE: {
			IfcProtectiveDeviceTypeEnumType ifcProtectiveDeviceTypeEnumType = (IfcProtectiveDeviceTypeEnumType)theEObject;
			T result = caseIfcProtectiveDeviceTypeEnumType(ifcProtectiveDeviceTypeEnumType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_PROXY: {
			IfcProxy ifcProxy = (IfcProxy)theEObject;
			T result = caseIfcProxy(ifcProxy);
			if (result == null) result = caseIfcProduct(ifcProxy);
			if (result == null) result = caseIfcObject(ifcProxy);
			if (result == null) result = caseIfcObjectDefinition(ifcProxy);
			if (result == null) result = caseIfcRoot(ifcProxy);
			if (result == null) result = caseEntity(ifcProxy);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_PUMP_TYPE: {
			IfcPumpType ifcPumpType = (IfcPumpType)theEObject;
			T result = caseIfcPumpType(ifcPumpType);
			if (result == null) result = caseIfcFlowMovingDeviceType(ifcPumpType);
			if (result == null) result = caseIfcDistributionFlowElementType(ifcPumpType);
			if (result == null) result = caseIfcDistributionElementType(ifcPumpType);
			if (result == null) result = caseIfcElementType(ifcPumpType);
			if (result == null) result = caseIfcTypeProduct(ifcPumpType);
			if (result == null) result = caseIfcTypeObject(ifcPumpType);
			if (result == null) result = caseIfcObjectDefinition(ifcPumpType);
			if (result == null) result = caseIfcRoot(ifcPumpType);
			if (result == null) result = caseEntity(ifcPumpType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_PUMP_TYPE_ENUM_TYPE: {
			IfcPumpTypeEnumType ifcPumpTypeEnumType = (IfcPumpTypeEnumType)theEObject;
			T result = caseIfcPumpTypeEnumType(ifcPumpTypeEnumType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_QUANTITY_AREA: {
			IfcQuantityArea ifcQuantityArea = (IfcQuantityArea)theEObject;
			T result = caseIfcQuantityArea(ifcQuantityArea);
			if (result == null) result = caseIfcPhysicalSimpleQuantity(ifcQuantityArea);
			if (result == null) result = caseIfcPhysicalQuantity(ifcQuantityArea);
			if (result == null) result = caseEntity(ifcQuantityArea);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_QUANTITY_COUNT: {
			IfcQuantityCount ifcQuantityCount = (IfcQuantityCount)theEObject;
			T result = caseIfcQuantityCount(ifcQuantityCount);
			if (result == null) result = caseIfcPhysicalSimpleQuantity(ifcQuantityCount);
			if (result == null) result = caseIfcPhysicalQuantity(ifcQuantityCount);
			if (result == null) result = caseEntity(ifcQuantityCount);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_QUANTITY_LENGTH: {
			IfcQuantityLength ifcQuantityLength = (IfcQuantityLength)theEObject;
			T result = caseIfcQuantityLength(ifcQuantityLength);
			if (result == null) result = caseIfcPhysicalSimpleQuantity(ifcQuantityLength);
			if (result == null) result = caseIfcPhysicalQuantity(ifcQuantityLength);
			if (result == null) result = caseEntity(ifcQuantityLength);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_QUANTITY_TIME: {
			IfcQuantityTime ifcQuantityTime = (IfcQuantityTime)theEObject;
			T result = caseIfcQuantityTime(ifcQuantityTime);
			if (result == null) result = caseIfcPhysicalSimpleQuantity(ifcQuantityTime);
			if (result == null) result = caseIfcPhysicalQuantity(ifcQuantityTime);
			if (result == null) result = caseEntity(ifcQuantityTime);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_QUANTITY_VOLUME: {
			IfcQuantityVolume ifcQuantityVolume = (IfcQuantityVolume)theEObject;
			T result = caseIfcQuantityVolume(ifcQuantityVolume);
			if (result == null) result = caseIfcPhysicalSimpleQuantity(ifcQuantityVolume);
			if (result == null) result = caseIfcPhysicalQuantity(ifcQuantityVolume);
			if (result == null) result = caseEntity(ifcQuantityVolume);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_QUANTITY_WEIGHT: {
			IfcQuantityWeight ifcQuantityWeight = (IfcQuantityWeight)theEObject;
			T result = caseIfcQuantityWeight(ifcQuantityWeight);
			if (result == null) result = caseIfcPhysicalSimpleQuantity(ifcQuantityWeight);
			if (result == null) result = caseIfcPhysicalQuantity(ifcQuantityWeight);
			if (result == null) result = caseEntity(ifcQuantityWeight);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_RADIO_ACTIVITY_MEASURE_TYPE: {
			IfcRadioActivityMeasureType ifcRadioActivityMeasureType = (IfcRadioActivityMeasureType)theEObject;
			T result = caseIfcRadioActivityMeasureType(ifcRadioActivityMeasureType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_RADIUS_DIMENSION: {
			IfcRadiusDimension ifcRadiusDimension = (IfcRadiusDimension)theEObject;
			T result = caseIfcRadiusDimension(ifcRadiusDimension);
			if (result == null) result = caseIfcDimensionCurveDirectedCallout(ifcRadiusDimension);
			if (result == null) result = caseIfcDraughtingCallout(ifcRadiusDimension);
			if (result == null) result = caseIfcGeometricRepresentationItem(ifcRadiusDimension);
			if (result == null) result = caseIfcRepresentationItem(ifcRadiusDimension);
			if (result == null) result = caseEntity(ifcRadiusDimension);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_RAILING: {
			IfcRailing ifcRailing = (IfcRailing)theEObject;
			T result = caseIfcRailing(ifcRailing);
			if (result == null) result = caseIfcBuildingElement(ifcRailing);
			if (result == null) result = caseIfcElement(ifcRailing);
			if (result == null) result = caseIfcProduct(ifcRailing);
			if (result == null) result = caseIfcObject(ifcRailing);
			if (result == null) result = caseIfcObjectDefinition(ifcRailing);
			if (result == null) result = caseIfcRoot(ifcRailing);
			if (result == null) result = caseEntity(ifcRailing);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_RAILING_TYPE: {
			IfcRailingType ifcRailingType = (IfcRailingType)theEObject;
			T result = caseIfcRailingType(ifcRailingType);
			if (result == null) result = caseIfcBuildingElementType(ifcRailingType);
			if (result == null) result = caseIfcElementType(ifcRailingType);
			if (result == null) result = caseIfcTypeProduct(ifcRailingType);
			if (result == null) result = caseIfcTypeObject(ifcRailingType);
			if (result == null) result = caseIfcObjectDefinition(ifcRailingType);
			if (result == null) result = caseIfcRoot(ifcRailingType);
			if (result == null) result = caseEntity(ifcRailingType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_RAILING_TYPE_ENUM_TYPE: {
			IfcRailingTypeEnumType ifcRailingTypeEnumType = (IfcRailingTypeEnumType)theEObject;
			T result = caseIfcRailingTypeEnumType(ifcRailingTypeEnumType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_RAMP: {
			IfcRamp ifcRamp = (IfcRamp)theEObject;
			T result = caseIfcRamp(ifcRamp);
			if (result == null) result = caseIfcBuildingElement(ifcRamp);
			if (result == null) result = caseIfcElement(ifcRamp);
			if (result == null) result = caseIfcProduct(ifcRamp);
			if (result == null) result = caseIfcObject(ifcRamp);
			if (result == null) result = caseIfcObjectDefinition(ifcRamp);
			if (result == null) result = caseIfcRoot(ifcRamp);
			if (result == null) result = caseEntity(ifcRamp);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_RAMP_FLIGHT: {
			IfcRampFlight ifcRampFlight = (IfcRampFlight)theEObject;
			T result = caseIfcRampFlight(ifcRampFlight);
			if (result == null) result = caseIfcBuildingElement(ifcRampFlight);
			if (result == null) result = caseIfcElement(ifcRampFlight);
			if (result == null) result = caseIfcProduct(ifcRampFlight);
			if (result == null) result = caseIfcObject(ifcRampFlight);
			if (result == null) result = caseIfcObjectDefinition(ifcRampFlight);
			if (result == null) result = caseIfcRoot(ifcRampFlight);
			if (result == null) result = caseEntity(ifcRampFlight);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_RAMP_FLIGHT_TYPE: {
			IfcRampFlightType ifcRampFlightType = (IfcRampFlightType)theEObject;
			T result = caseIfcRampFlightType(ifcRampFlightType);
			if (result == null) result = caseIfcBuildingElementType(ifcRampFlightType);
			if (result == null) result = caseIfcElementType(ifcRampFlightType);
			if (result == null) result = caseIfcTypeProduct(ifcRampFlightType);
			if (result == null) result = caseIfcTypeObject(ifcRampFlightType);
			if (result == null) result = caseIfcObjectDefinition(ifcRampFlightType);
			if (result == null) result = caseIfcRoot(ifcRampFlightType);
			if (result == null) result = caseEntity(ifcRampFlightType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_RAMP_FLIGHT_TYPE_ENUM_TYPE: {
			IfcRampFlightTypeEnumType ifcRampFlightTypeEnumType = (IfcRampFlightTypeEnumType)theEObject;
			T result = caseIfcRampFlightTypeEnumType(ifcRampFlightTypeEnumType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_RAMP_TYPE_ENUM_TYPE: {
			IfcRampTypeEnumType ifcRampTypeEnumType = (IfcRampTypeEnumType)theEObject;
			T result = caseIfcRampTypeEnumType(ifcRampTypeEnumType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_RATIO_MEASURE_TYPE: {
			IfcRatioMeasureType ifcRatioMeasureType = (IfcRatioMeasureType)theEObject;
			T result = caseIfcRatioMeasureType(ifcRatioMeasureType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_RATIONAL_BEZIER_CURVE: {
			IfcRationalBezierCurve ifcRationalBezierCurve = (IfcRationalBezierCurve)theEObject;
			T result = caseIfcRationalBezierCurve(ifcRationalBezierCurve);
			if (result == null) result = caseIfcBezierCurve(ifcRationalBezierCurve);
			if (result == null) result = caseIfcBSplineCurve(ifcRationalBezierCurve);
			if (result == null) result = caseIfcBoundedCurve(ifcRationalBezierCurve);
			if (result == null) result = caseIfcCurve(ifcRationalBezierCurve);
			if (result == null) result = caseIfcGeometricRepresentationItem(ifcRationalBezierCurve);
			if (result == null) result = caseIfcRepresentationItem(ifcRationalBezierCurve);
			if (result == null) result = caseEntity(ifcRationalBezierCurve);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_REAL_TYPE: {
			IfcRealType ifcRealType = (IfcRealType)theEObject;
			T result = caseIfcRealType(ifcRealType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_RECTANGLE_HOLLOW_PROFILE_DEF: {
			IfcRectangleHollowProfileDef ifcRectangleHollowProfileDef = (IfcRectangleHollowProfileDef)theEObject;
			T result = caseIfcRectangleHollowProfileDef(ifcRectangleHollowProfileDef);
			if (result == null) result = caseIfcRectangleProfileDef(ifcRectangleHollowProfileDef);
			if (result == null) result = caseIfcParameterizedProfileDef(ifcRectangleHollowProfileDef);
			if (result == null) result = caseIfcProfileDef(ifcRectangleHollowProfileDef);
			if (result == null) result = caseEntity(ifcRectangleHollowProfileDef);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_RECTANGLE_PROFILE_DEF: {
			IfcRectangleProfileDef ifcRectangleProfileDef = (IfcRectangleProfileDef)theEObject;
			T result = caseIfcRectangleProfileDef(ifcRectangleProfileDef);
			if (result == null) result = caseIfcParameterizedProfileDef(ifcRectangleProfileDef);
			if (result == null) result = caseIfcProfileDef(ifcRectangleProfileDef);
			if (result == null) result = caseEntity(ifcRectangleProfileDef);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_RECTANGULAR_PYRAMID: {
			IfcRectangularPyramid ifcRectangularPyramid = (IfcRectangularPyramid)theEObject;
			T result = caseIfcRectangularPyramid(ifcRectangularPyramid);
			if (result == null) result = caseIfcCsgPrimitive3D(ifcRectangularPyramid);
			if (result == null) result = caseIfcGeometricRepresentationItem(ifcRectangularPyramid);
			if (result == null) result = caseIfcRepresentationItem(ifcRectangularPyramid);
			if (result == null) result = caseEntity(ifcRectangularPyramid);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_RECTANGULAR_TRIMMED_SURFACE: {
			IfcRectangularTrimmedSurface ifcRectangularTrimmedSurface = (IfcRectangularTrimmedSurface)theEObject;
			T result = caseIfcRectangularTrimmedSurface(ifcRectangularTrimmedSurface);
			if (result == null) result = caseIfcBoundedSurface(ifcRectangularTrimmedSurface);
			if (result == null) result = caseIfcSurface(ifcRectangularTrimmedSurface);
			if (result == null) result = caseIfcGeometricRepresentationItem(ifcRectangularTrimmedSurface);
			if (result == null) result = caseIfcRepresentationItem(ifcRectangularTrimmedSurface);
			if (result == null) result = caseEntity(ifcRectangularTrimmedSurface);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_REFERENCES_VALUE_DOCUMENT: {
			IfcReferencesValueDocument ifcReferencesValueDocument = (IfcReferencesValueDocument)theEObject;
			T result = caseIfcReferencesValueDocument(ifcReferencesValueDocument);
			if (result == null) result = caseEntity(ifcReferencesValueDocument);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_REFLECTANCE_METHOD_ENUM_TYPE: {
			IfcReflectanceMethodEnumType ifcReflectanceMethodEnumType = (IfcReflectanceMethodEnumType)theEObject;
			T result = caseIfcReflectanceMethodEnumType(ifcReflectanceMethodEnumType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_REGULAR_TIME_SERIES: {
			IfcRegularTimeSeries ifcRegularTimeSeries = (IfcRegularTimeSeries)theEObject;
			T result = caseIfcRegularTimeSeries(ifcRegularTimeSeries);
			if (result == null) result = caseIfcTimeSeries(ifcRegularTimeSeries);
			if (result == null) result = caseEntity(ifcRegularTimeSeries);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_REINFORCEMENT_BAR_PROPERTIES: {
			IfcReinforcementBarProperties ifcReinforcementBarProperties = (IfcReinforcementBarProperties)theEObject;
			T result = caseIfcReinforcementBarProperties(ifcReinforcementBarProperties);
			if (result == null) result = caseEntity(ifcReinforcementBarProperties);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_REINFORCEMENT_DEFINITION_PROPERTIES: {
			IfcReinforcementDefinitionProperties ifcReinforcementDefinitionProperties = (IfcReinforcementDefinitionProperties)theEObject;
			T result = caseIfcReinforcementDefinitionProperties(ifcReinforcementDefinitionProperties);
			if (result == null) result = caseIfcPropertySetDefinition(ifcReinforcementDefinitionProperties);
			if (result == null) result = caseIfcPropertyDefinition(ifcReinforcementDefinitionProperties);
			if (result == null) result = caseIfcRoot(ifcReinforcementDefinitionProperties);
			if (result == null) result = caseEntity(ifcReinforcementDefinitionProperties);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_REINFORCING_BAR: {
			IfcReinforcingBar ifcReinforcingBar = (IfcReinforcingBar)theEObject;
			T result = caseIfcReinforcingBar(ifcReinforcingBar);
			if (result == null) result = caseIfcReinforcingElement(ifcReinforcingBar);
			if (result == null) result = caseIfcBuildingElementComponent(ifcReinforcingBar);
			if (result == null) result = caseIfcBuildingElement(ifcReinforcingBar);
			if (result == null) result = caseIfcElement(ifcReinforcingBar);
			if (result == null) result = caseIfcProduct(ifcReinforcingBar);
			if (result == null) result = caseIfcObject(ifcReinforcingBar);
			if (result == null) result = caseIfcObjectDefinition(ifcReinforcingBar);
			if (result == null) result = caseIfcRoot(ifcReinforcingBar);
			if (result == null) result = caseEntity(ifcReinforcingBar);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_REINFORCING_BAR_ROLE_ENUM_TYPE: {
			IfcReinforcingBarRoleEnumType ifcReinforcingBarRoleEnumType = (IfcReinforcingBarRoleEnumType)theEObject;
			T result = caseIfcReinforcingBarRoleEnumType(ifcReinforcingBarRoleEnumType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_REINFORCING_BAR_SURFACE_ENUM_TYPE: {
			IfcReinforcingBarSurfaceEnumType ifcReinforcingBarSurfaceEnumType = (IfcReinforcingBarSurfaceEnumType)theEObject;
			T result = caseIfcReinforcingBarSurfaceEnumType(ifcReinforcingBarSurfaceEnumType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_REINFORCING_ELEMENT: {
			IfcReinforcingElement ifcReinforcingElement = (IfcReinforcingElement)theEObject;
			T result = caseIfcReinforcingElement(ifcReinforcingElement);
			if (result == null) result = caseIfcBuildingElementComponent(ifcReinforcingElement);
			if (result == null) result = caseIfcBuildingElement(ifcReinforcingElement);
			if (result == null) result = caseIfcElement(ifcReinforcingElement);
			if (result == null) result = caseIfcProduct(ifcReinforcingElement);
			if (result == null) result = caseIfcObject(ifcReinforcingElement);
			if (result == null) result = caseIfcObjectDefinition(ifcReinforcingElement);
			if (result == null) result = caseIfcRoot(ifcReinforcingElement);
			if (result == null) result = caseEntity(ifcReinforcingElement);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_REINFORCING_MESH: {
			IfcReinforcingMesh ifcReinforcingMesh = (IfcReinforcingMesh)theEObject;
			T result = caseIfcReinforcingMesh(ifcReinforcingMesh);
			if (result == null) result = caseIfcReinforcingElement(ifcReinforcingMesh);
			if (result == null) result = caseIfcBuildingElementComponent(ifcReinforcingMesh);
			if (result == null) result = caseIfcBuildingElement(ifcReinforcingMesh);
			if (result == null) result = caseIfcElement(ifcReinforcingMesh);
			if (result == null) result = caseIfcProduct(ifcReinforcingMesh);
			if (result == null) result = caseIfcObject(ifcReinforcingMesh);
			if (result == null) result = caseIfcObjectDefinition(ifcReinforcingMesh);
			if (result == null) result = caseIfcRoot(ifcReinforcingMesh);
			if (result == null) result = caseEntity(ifcReinforcingMesh);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_REL_AGGREGATES: {
			IfcRelAggregates ifcRelAggregates = (IfcRelAggregates)theEObject;
			T result = caseIfcRelAggregates(ifcRelAggregates);
			if (result == null) result = caseIfcRelDecomposes(ifcRelAggregates);
			if (result == null) result = caseIfcRelationship(ifcRelAggregates);
			if (result == null) result = caseIfcRoot(ifcRelAggregates);
			if (result == null) result = caseEntity(ifcRelAggregates);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_REL_ASSIGNS: {
			IfcRelAssigns ifcRelAssigns = (IfcRelAssigns)theEObject;
			T result = caseIfcRelAssigns(ifcRelAssigns);
			if (result == null) result = caseIfcRelationship(ifcRelAssigns);
			if (result == null) result = caseIfcRoot(ifcRelAssigns);
			if (result == null) result = caseEntity(ifcRelAssigns);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_REL_ASSIGNS_TASKS: {
			IfcRelAssignsTasks ifcRelAssignsTasks = (IfcRelAssignsTasks)theEObject;
			T result = caseIfcRelAssignsTasks(ifcRelAssignsTasks);
			if (result == null) result = caseIfcRelAssignsToControl(ifcRelAssignsTasks);
			if (result == null) result = caseIfcRelAssigns(ifcRelAssignsTasks);
			if (result == null) result = caseIfcRelationship(ifcRelAssignsTasks);
			if (result == null) result = caseIfcRoot(ifcRelAssignsTasks);
			if (result == null) result = caseEntity(ifcRelAssignsTasks);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_REL_ASSIGNS_TO_ACTOR: {
			IfcRelAssignsToActor ifcRelAssignsToActor = (IfcRelAssignsToActor)theEObject;
			T result = caseIfcRelAssignsToActor(ifcRelAssignsToActor);
			if (result == null) result = caseIfcRelAssigns(ifcRelAssignsToActor);
			if (result == null) result = caseIfcRelationship(ifcRelAssignsToActor);
			if (result == null) result = caseIfcRoot(ifcRelAssignsToActor);
			if (result == null) result = caseEntity(ifcRelAssignsToActor);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_REL_ASSIGNS_TO_CONTROL: {
			IfcRelAssignsToControl ifcRelAssignsToControl = (IfcRelAssignsToControl)theEObject;
			T result = caseIfcRelAssignsToControl(ifcRelAssignsToControl);
			if (result == null) result = caseIfcRelAssigns(ifcRelAssignsToControl);
			if (result == null) result = caseIfcRelationship(ifcRelAssignsToControl);
			if (result == null) result = caseIfcRoot(ifcRelAssignsToControl);
			if (result == null) result = caseEntity(ifcRelAssignsToControl);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_REL_ASSIGNS_TO_GROUP: {
			IfcRelAssignsToGroup ifcRelAssignsToGroup = (IfcRelAssignsToGroup)theEObject;
			T result = caseIfcRelAssignsToGroup(ifcRelAssignsToGroup);
			if (result == null) result = caseIfcRelAssigns(ifcRelAssignsToGroup);
			if (result == null) result = caseIfcRelationship(ifcRelAssignsToGroup);
			if (result == null) result = caseIfcRoot(ifcRelAssignsToGroup);
			if (result == null) result = caseEntity(ifcRelAssignsToGroup);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_REL_ASSIGNS_TO_PROCESS: {
			IfcRelAssignsToProcess ifcRelAssignsToProcess = (IfcRelAssignsToProcess)theEObject;
			T result = caseIfcRelAssignsToProcess(ifcRelAssignsToProcess);
			if (result == null) result = caseIfcRelAssigns(ifcRelAssignsToProcess);
			if (result == null) result = caseIfcRelationship(ifcRelAssignsToProcess);
			if (result == null) result = caseIfcRoot(ifcRelAssignsToProcess);
			if (result == null) result = caseEntity(ifcRelAssignsToProcess);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_REL_ASSIGNS_TO_PRODUCT: {
			IfcRelAssignsToProduct ifcRelAssignsToProduct = (IfcRelAssignsToProduct)theEObject;
			T result = caseIfcRelAssignsToProduct(ifcRelAssignsToProduct);
			if (result == null) result = caseIfcRelAssigns(ifcRelAssignsToProduct);
			if (result == null) result = caseIfcRelationship(ifcRelAssignsToProduct);
			if (result == null) result = caseIfcRoot(ifcRelAssignsToProduct);
			if (result == null) result = caseEntity(ifcRelAssignsToProduct);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_REL_ASSIGNS_TO_PROJECT_ORDER: {
			IfcRelAssignsToProjectOrder ifcRelAssignsToProjectOrder = (IfcRelAssignsToProjectOrder)theEObject;
			T result = caseIfcRelAssignsToProjectOrder(ifcRelAssignsToProjectOrder);
			if (result == null) result = caseIfcRelAssignsToControl(ifcRelAssignsToProjectOrder);
			if (result == null) result = caseIfcRelAssigns(ifcRelAssignsToProjectOrder);
			if (result == null) result = caseIfcRelationship(ifcRelAssignsToProjectOrder);
			if (result == null) result = caseIfcRoot(ifcRelAssignsToProjectOrder);
			if (result == null) result = caseEntity(ifcRelAssignsToProjectOrder);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_REL_ASSIGNS_TO_RESOURCE: {
			IfcRelAssignsToResource ifcRelAssignsToResource = (IfcRelAssignsToResource)theEObject;
			T result = caseIfcRelAssignsToResource(ifcRelAssignsToResource);
			if (result == null) result = caseIfcRelAssigns(ifcRelAssignsToResource);
			if (result == null) result = caseIfcRelationship(ifcRelAssignsToResource);
			if (result == null) result = caseIfcRoot(ifcRelAssignsToResource);
			if (result == null) result = caseEntity(ifcRelAssignsToResource);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_REL_ASSOCIATES: {
			IfcRelAssociates ifcRelAssociates = (IfcRelAssociates)theEObject;
			T result = caseIfcRelAssociates(ifcRelAssociates);
			if (result == null) result = caseIfcRelationship(ifcRelAssociates);
			if (result == null) result = caseIfcRoot(ifcRelAssociates);
			if (result == null) result = caseEntity(ifcRelAssociates);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_REL_ASSOCIATES_APPLIED_VALUE: {
			IfcRelAssociatesAppliedValue ifcRelAssociatesAppliedValue = (IfcRelAssociatesAppliedValue)theEObject;
			T result = caseIfcRelAssociatesAppliedValue(ifcRelAssociatesAppliedValue);
			if (result == null) result = caseIfcRelAssociates(ifcRelAssociatesAppliedValue);
			if (result == null) result = caseIfcRelationship(ifcRelAssociatesAppliedValue);
			if (result == null) result = caseIfcRoot(ifcRelAssociatesAppliedValue);
			if (result == null) result = caseEntity(ifcRelAssociatesAppliedValue);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_REL_ASSOCIATES_APPROVAL: {
			IfcRelAssociatesApproval ifcRelAssociatesApproval = (IfcRelAssociatesApproval)theEObject;
			T result = caseIfcRelAssociatesApproval(ifcRelAssociatesApproval);
			if (result == null) result = caseIfcRelAssociates(ifcRelAssociatesApproval);
			if (result == null) result = caseIfcRelationship(ifcRelAssociatesApproval);
			if (result == null) result = caseIfcRoot(ifcRelAssociatesApproval);
			if (result == null) result = caseEntity(ifcRelAssociatesApproval);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_REL_ASSOCIATES_CLASSIFICATION: {
			IfcRelAssociatesClassification ifcRelAssociatesClassification = (IfcRelAssociatesClassification)theEObject;
			T result = caseIfcRelAssociatesClassification(ifcRelAssociatesClassification);
			if (result == null) result = caseIfcRelAssociates(ifcRelAssociatesClassification);
			if (result == null) result = caseIfcRelationship(ifcRelAssociatesClassification);
			if (result == null) result = caseIfcRoot(ifcRelAssociatesClassification);
			if (result == null) result = caseEntity(ifcRelAssociatesClassification);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_REL_ASSOCIATES_CONSTRAINT: {
			IfcRelAssociatesConstraint ifcRelAssociatesConstraint = (IfcRelAssociatesConstraint)theEObject;
			T result = caseIfcRelAssociatesConstraint(ifcRelAssociatesConstraint);
			if (result == null) result = caseIfcRelAssociates(ifcRelAssociatesConstraint);
			if (result == null) result = caseIfcRelationship(ifcRelAssociatesConstraint);
			if (result == null) result = caseIfcRoot(ifcRelAssociatesConstraint);
			if (result == null) result = caseEntity(ifcRelAssociatesConstraint);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_REL_ASSOCIATES_DOCUMENT: {
			IfcRelAssociatesDocument ifcRelAssociatesDocument = (IfcRelAssociatesDocument)theEObject;
			T result = caseIfcRelAssociatesDocument(ifcRelAssociatesDocument);
			if (result == null) result = caseIfcRelAssociates(ifcRelAssociatesDocument);
			if (result == null) result = caseIfcRelationship(ifcRelAssociatesDocument);
			if (result == null) result = caseIfcRoot(ifcRelAssociatesDocument);
			if (result == null) result = caseEntity(ifcRelAssociatesDocument);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_REL_ASSOCIATES_LIBRARY: {
			IfcRelAssociatesLibrary ifcRelAssociatesLibrary = (IfcRelAssociatesLibrary)theEObject;
			T result = caseIfcRelAssociatesLibrary(ifcRelAssociatesLibrary);
			if (result == null) result = caseIfcRelAssociates(ifcRelAssociatesLibrary);
			if (result == null) result = caseIfcRelationship(ifcRelAssociatesLibrary);
			if (result == null) result = caseIfcRoot(ifcRelAssociatesLibrary);
			if (result == null) result = caseEntity(ifcRelAssociatesLibrary);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_REL_ASSOCIATES_MATERIAL: {
			IfcRelAssociatesMaterial ifcRelAssociatesMaterial = (IfcRelAssociatesMaterial)theEObject;
			T result = caseIfcRelAssociatesMaterial(ifcRelAssociatesMaterial);
			if (result == null) result = caseIfcRelAssociates(ifcRelAssociatesMaterial);
			if (result == null) result = caseIfcRelationship(ifcRelAssociatesMaterial);
			if (result == null) result = caseIfcRoot(ifcRelAssociatesMaterial);
			if (result == null) result = caseEntity(ifcRelAssociatesMaterial);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_REL_ASSOCIATES_PROFILE_PROPERTIES: {
			IfcRelAssociatesProfileProperties ifcRelAssociatesProfileProperties = (IfcRelAssociatesProfileProperties)theEObject;
			T result = caseIfcRelAssociatesProfileProperties(ifcRelAssociatesProfileProperties);
			if (result == null) result = caseIfcRelAssociates(ifcRelAssociatesProfileProperties);
			if (result == null) result = caseIfcRelationship(ifcRelAssociatesProfileProperties);
			if (result == null) result = caseIfcRoot(ifcRelAssociatesProfileProperties);
			if (result == null) result = caseEntity(ifcRelAssociatesProfileProperties);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_RELATIONSHIP: {
			IfcRelationship ifcRelationship = (IfcRelationship)theEObject;
			T result = caseIfcRelationship(ifcRelationship);
			if (result == null) result = caseIfcRoot(ifcRelationship);
			if (result == null) result = caseEntity(ifcRelationship);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_RELAXATION: {
			IfcRelaxation ifcRelaxation = (IfcRelaxation)theEObject;
			T result = caseIfcRelaxation(ifcRelaxation);
			if (result == null) result = caseEntity(ifcRelaxation);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_REL_CONNECTS: {
			IfcRelConnects ifcRelConnects = (IfcRelConnects)theEObject;
			T result = caseIfcRelConnects(ifcRelConnects);
			if (result == null) result = caseIfcRelationship(ifcRelConnects);
			if (result == null) result = caseIfcRoot(ifcRelConnects);
			if (result == null) result = caseEntity(ifcRelConnects);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_REL_CONNECTS_ELEMENTS: {
			IfcRelConnectsElements ifcRelConnectsElements = (IfcRelConnectsElements)theEObject;
			T result = caseIfcRelConnectsElements(ifcRelConnectsElements);
			if (result == null) result = caseIfcRelConnects(ifcRelConnectsElements);
			if (result == null) result = caseIfcRelationship(ifcRelConnectsElements);
			if (result == null) result = caseIfcRoot(ifcRelConnectsElements);
			if (result == null) result = caseEntity(ifcRelConnectsElements);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_REL_CONNECTS_PATH_ELEMENTS: {
			IfcRelConnectsPathElements ifcRelConnectsPathElements = (IfcRelConnectsPathElements)theEObject;
			T result = caseIfcRelConnectsPathElements(ifcRelConnectsPathElements);
			if (result == null) result = caseIfcRelConnectsElements(ifcRelConnectsPathElements);
			if (result == null) result = caseIfcRelConnects(ifcRelConnectsPathElements);
			if (result == null) result = caseIfcRelationship(ifcRelConnectsPathElements);
			if (result == null) result = caseIfcRoot(ifcRelConnectsPathElements);
			if (result == null) result = caseEntity(ifcRelConnectsPathElements);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_REL_CONNECTS_PORTS: {
			IfcRelConnectsPorts ifcRelConnectsPorts = (IfcRelConnectsPorts)theEObject;
			T result = caseIfcRelConnectsPorts(ifcRelConnectsPorts);
			if (result == null) result = caseIfcRelConnects(ifcRelConnectsPorts);
			if (result == null) result = caseIfcRelationship(ifcRelConnectsPorts);
			if (result == null) result = caseIfcRoot(ifcRelConnectsPorts);
			if (result == null) result = caseEntity(ifcRelConnectsPorts);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_REL_CONNECTS_PORT_TO_ELEMENT: {
			IfcRelConnectsPortToElement ifcRelConnectsPortToElement = (IfcRelConnectsPortToElement)theEObject;
			T result = caseIfcRelConnectsPortToElement(ifcRelConnectsPortToElement);
			if (result == null) result = caseIfcRelConnects(ifcRelConnectsPortToElement);
			if (result == null) result = caseIfcRelationship(ifcRelConnectsPortToElement);
			if (result == null) result = caseIfcRoot(ifcRelConnectsPortToElement);
			if (result == null) result = caseEntity(ifcRelConnectsPortToElement);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_REL_CONNECTS_STRUCTURAL_ACTIVITY: {
			IfcRelConnectsStructuralActivity ifcRelConnectsStructuralActivity = (IfcRelConnectsStructuralActivity)theEObject;
			T result = caseIfcRelConnectsStructuralActivity(ifcRelConnectsStructuralActivity);
			if (result == null) result = caseIfcRelConnects(ifcRelConnectsStructuralActivity);
			if (result == null) result = caseIfcRelationship(ifcRelConnectsStructuralActivity);
			if (result == null) result = caseIfcRoot(ifcRelConnectsStructuralActivity);
			if (result == null) result = caseEntity(ifcRelConnectsStructuralActivity);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_REL_CONNECTS_STRUCTURAL_ELEMENT: {
			IfcRelConnectsStructuralElement ifcRelConnectsStructuralElement = (IfcRelConnectsStructuralElement)theEObject;
			T result = caseIfcRelConnectsStructuralElement(ifcRelConnectsStructuralElement);
			if (result == null) result = caseIfcRelConnects(ifcRelConnectsStructuralElement);
			if (result == null) result = caseIfcRelationship(ifcRelConnectsStructuralElement);
			if (result == null) result = caseIfcRoot(ifcRelConnectsStructuralElement);
			if (result == null) result = caseEntity(ifcRelConnectsStructuralElement);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_REL_CONNECTS_STRUCTURAL_MEMBER: {
			IfcRelConnectsStructuralMember ifcRelConnectsStructuralMember = (IfcRelConnectsStructuralMember)theEObject;
			T result = caseIfcRelConnectsStructuralMember(ifcRelConnectsStructuralMember);
			if (result == null) result = caseIfcRelConnects(ifcRelConnectsStructuralMember);
			if (result == null) result = caseIfcRelationship(ifcRelConnectsStructuralMember);
			if (result == null) result = caseIfcRoot(ifcRelConnectsStructuralMember);
			if (result == null) result = caseEntity(ifcRelConnectsStructuralMember);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_REL_CONNECTS_WITH_ECCENTRICITY: {
			IfcRelConnectsWithEccentricity ifcRelConnectsWithEccentricity = (IfcRelConnectsWithEccentricity)theEObject;
			T result = caseIfcRelConnectsWithEccentricity(ifcRelConnectsWithEccentricity);
			if (result == null) result = caseIfcRelConnectsStructuralMember(ifcRelConnectsWithEccentricity);
			if (result == null) result = caseIfcRelConnects(ifcRelConnectsWithEccentricity);
			if (result == null) result = caseIfcRelationship(ifcRelConnectsWithEccentricity);
			if (result == null) result = caseIfcRoot(ifcRelConnectsWithEccentricity);
			if (result == null) result = caseEntity(ifcRelConnectsWithEccentricity);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_REL_CONNECTS_WITH_REALIZING_ELEMENTS: {
			IfcRelConnectsWithRealizingElements ifcRelConnectsWithRealizingElements = (IfcRelConnectsWithRealizingElements)theEObject;
			T result = caseIfcRelConnectsWithRealizingElements(ifcRelConnectsWithRealizingElements);
			if (result == null) result = caseIfcRelConnectsElements(ifcRelConnectsWithRealizingElements);
			if (result == null) result = caseIfcRelConnects(ifcRelConnectsWithRealizingElements);
			if (result == null) result = caseIfcRelationship(ifcRelConnectsWithRealizingElements);
			if (result == null) result = caseIfcRoot(ifcRelConnectsWithRealizingElements);
			if (result == null) result = caseEntity(ifcRelConnectsWithRealizingElements);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_REL_CONTAINED_IN_SPATIAL_STRUCTURE: {
			IfcRelContainedInSpatialStructure ifcRelContainedInSpatialStructure = (IfcRelContainedInSpatialStructure)theEObject;
			T result = caseIfcRelContainedInSpatialStructure(ifcRelContainedInSpatialStructure);
			if (result == null) result = caseIfcRelConnects(ifcRelContainedInSpatialStructure);
			if (result == null) result = caseIfcRelationship(ifcRelContainedInSpatialStructure);
			if (result == null) result = caseIfcRoot(ifcRelContainedInSpatialStructure);
			if (result == null) result = caseEntity(ifcRelContainedInSpatialStructure);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_REL_COVERS_BLDG_ELEMENTS: {
			IfcRelCoversBldgElements ifcRelCoversBldgElements = (IfcRelCoversBldgElements)theEObject;
			T result = caseIfcRelCoversBldgElements(ifcRelCoversBldgElements);
			if (result == null) result = caseIfcRelConnects(ifcRelCoversBldgElements);
			if (result == null) result = caseIfcRelationship(ifcRelCoversBldgElements);
			if (result == null) result = caseIfcRoot(ifcRelCoversBldgElements);
			if (result == null) result = caseEntity(ifcRelCoversBldgElements);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_REL_COVERS_SPACES: {
			IfcRelCoversSpaces ifcRelCoversSpaces = (IfcRelCoversSpaces)theEObject;
			T result = caseIfcRelCoversSpaces(ifcRelCoversSpaces);
			if (result == null) result = caseIfcRelConnects(ifcRelCoversSpaces);
			if (result == null) result = caseIfcRelationship(ifcRelCoversSpaces);
			if (result == null) result = caseIfcRoot(ifcRelCoversSpaces);
			if (result == null) result = caseEntity(ifcRelCoversSpaces);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_REL_DECOMPOSES: {
			IfcRelDecomposes ifcRelDecomposes = (IfcRelDecomposes)theEObject;
			T result = caseIfcRelDecomposes(ifcRelDecomposes);
			if (result == null) result = caseIfcRelationship(ifcRelDecomposes);
			if (result == null) result = caseIfcRoot(ifcRelDecomposes);
			if (result == null) result = caseEntity(ifcRelDecomposes);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_REL_DEFINES: {
			IfcRelDefines ifcRelDefines = (IfcRelDefines)theEObject;
			T result = caseIfcRelDefines(ifcRelDefines);
			if (result == null) result = caseIfcRelationship(ifcRelDefines);
			if (result == null) result = caseIfcRoot(ifcRelDefines);
			if (result == null) result = caseEntity(ifcRelDefines);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_REL_DEFINES_BY_PROPERTIES: {
			IfcRelDefinesByProperties ifcRelDefinesByProperties = (IfcRelDefinesByProperties)theEObject;
			T result = caseIfcRelDefinesByProperties(ifcRelDefinesByProperties);
			if (result == null) result = caseIfcRelDefines(ifcRelDefinesByProperties);
			if (result == null) result = caseIfcRelationship(ifcRelDefinesByProperties);
			if (result == null) result = caseIfcRoot(ifcRelDefinesByProperties);
			if (result == null) result = caseEntity(ifcRelDefinesByProperties);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_REL_DEFINES_BY_TYPE: {
			IfcRelDefinesByType ifcRelDefinesByType = (IfcRelDefinesByType)theEObject;
			T result = caseIfcRelDefinesByType(ifcRelDefinesByType);
			if (result == null) result = caseIfcRelDefines(ifcRelDefinesByType);
			if (result == null) result = caseIfcRelationship(ifcRelDefinesByType);
			if (result == null) result = caseIfcRoot(ifcRelDefinesByType);
			if (result == null) result = caseEntity(ifcRelDefinesByType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_REL_FILLS_ELEMENT: {
			IfcRelFillsElement ifcRelFillsElement = (IfcRelFillsElement)theEObject;
			T result = caseIfcRelFillsElement(ifcRelFillsElement);
			if (result == null) result = caseIfcRelConnects(ifcRelFillsElement);
			if (result == null) result = caseIfcRelationship(ifcRelFillsElement);
			if (result == null) result = caseIfcRoot(ifcRelFillsElement);
			if (result == null) result = caseEntity(ifcRelFillsElement);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_REL_FLOW_CONTROL_ELEMENTS: {
			IfcRelFlowControlElements ifcRelFlowControlElements = (IfcRelFlowControlElements)theEObject;
			T result = caseIfcRelFlowControlElements(ifcRelFlowControlElements);
			if (result == null) result = caseIfcRelConnects(ifcRelFlowControlElements);
			if (result == null) result = caseIfcRelationship(ifcRelFlowControlElements);
			if (result == null) result = caseIfcRoot(ifcRelFlowControlElements);
			if (result == null) result = caseEntity(ifcRelFlowControlElements);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_REL_INTERACTION_REQUIREMENTS: {
			IfcRelInteractionRequirements ifcRelInteractionRequirements = (IfcRelInteractionRequirements)theEObject;
			T result = caseIfcRelInteractionRequirements(ifcRelInteractionRequirements);
			if (result == null) result = caseIfcRelConnects(ifcRelInteractionRequirements);
			if (result == null) result = caseIfcRelationship(ifcRelInteractionRequirements);
			if (result == null) result = caseIfcRoot(ifcRelInteractionRequirements);
			if (result == null) result = caseEntity(ifcRelInteractionRequirements);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_REL_NESTS: {
			IfcRelNests ifcRelNests = (IfcRelNests)theEObject;
			T result = caseIfcRelNests(ifcRelNests);
			if (result == null) result = caseIfcRelDecomposes(ifcRelNests);
			if (result == null) result = caseIfcRelationship(ifcRelNests);
			if (result == null) result = caseIfcRoot(ifcRelNests);
			if (result == null) result = caseEntity(ifcRelNests);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_REL_OCCUPIES_SPACES: {
			IfcRelOccupiesSpaces ifcRelOccupiesSpaces = (IfcRelOccupiesSpaces)theEObject;
			T result = caseIfcRelOccupiesSpaces(ifcRelOccupiesSpaces);
			if (result == null) result = caseIfcRelAssignsToActor(ifcRelOccupiesSpaces);
			if (result == null) result = caseIfcRelAssigns(ifcRelOccupiesSpaces);
			if (result == null) result = caseIfcRelationship(ifcRelOccupiesSpaces);
			if (result == null) result = caseIfcRoot(ifcRelOccupiesSpaces);
			if (result == null) result = caseEntity(ifcRelOccupiesSpaces);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_REL_OVERRIDES_PROPERTIES: {
			IfcRelOverridesProperties ifcRelOverridesProperties = (IfcRelOverridesProperties)theEObject;
			T result = caseIfcRelOverridesProperties(ifcRelOverridesProperties);
			if (result == null) result = caseIfcRelDefinesByProperties(ifcRelOverridesProperties);
			if (result == null) result = caseIfcRelDefines(ifcRelOverridesProperties);
			if (result == null) result = caseIfcRelationship(ifcRelOverridesProperties);
			if (result == null) result = caseIfcRoot(ifcRelOverridesProperties);
			if (result == null) result = caseEntity(ifcRelOverridesProperties);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_REL_PROJECTS_ELEMENT: {
			IfcRelProjectsElement ifcRelProjectsElement = (IfcRelProjectsElement)theEObject;
			T result = caseIfcRelProjectsElement(ifcRelProjectsElement);
			if (result == null) result = caseIfcRelConnects(ifcRelProjectsElement);
			if (result == null) result = caseIfcRelationship(ifcRelProjectsElement);
			if (result == null) result = caseIfcRoot(ifcRelProjectsElement);
			if (result == null) result = caseEntity(ifcRelProjectsElement);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_REL_REFERENCED_IN_SPATIAL_STRUCTURE: {
			IfcRelReferencedInSpatialStructure ifcRelReferencedInSpatialStructure = (IfcRelReferencedInSpatialStructure)theEObject;
			T result = caseIfcRelReferencedInSpatialStructure(ifcRelReferencedInSpatialStructure);
			if (result == null) result = caseIfcRelConnects(ifcRelReferencedInSpatialStructure);
			if (result == null) result = caseIfcRelationship(ifcRelReferencedInSpatialStructure);
			if (result == null) result = caseIfcRoot(ifcRelReferencedInSpatialStructure);
			if (result == null) result = caseEntity(ifcRelReferencedInSpatialStructure);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_REL_SCHEDULES_COST_ITEMS: {
			IfcRelSchedulesCostItems ifcRelSchedulesCostItems = (IfcRelSchedulesCostItems)theEObject;
			T result = caseIfcRelSchedulesCostItems(ifcRelSchedulesCostItems);
			if (result == null) result = caseIfcRelAssignsToControl(ifcRelSchedulesCostItems);
			if (result == null) result = caseIfcRelAssigns(ifcRelSchedulesCostItems);
			if (result == null) result = caseIfcRelationship(ifcRelSchedulesCostItems);
			if (result == null) result = caseIfcRoot(ifcRelSchedulesCostItems);
			if (result == null) result = caseEntity(ifcRelSchedulesCostItems);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_REL_SEQUENCE: {
			IfcRelSequence ifcRelSequence = (IfcRelSequence)theEObject;
			T result = caseIfcRelSequence(ifcRelSequence);
			if (result == null) result = caseIfcRelConnects(ifcRelSequence);
			if (result == null) result = caseIfcRelationship(ifcRelSequence);
			if (result == null) result = caseIfcRoot(ifcRelSequence);
			if (result == null) result = caseEntity(ifcRelSequence);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_REL_SERVICES_BUILDINGS: {
			IfcRelServicesBuildings ifcRelServicesBuildings = (IfcRelServicesBuildings)theEObject;
			T result = caseIfcRelServicesBuildings(ifcRelServicesBuildings);
			if (result == null) result = caseIfcRelConnects(ifcRelServicesBuildings);
			if (result == null) result = caseIfcRelationship(ifcRelServicesBuildings);
			if (result == null) result = caseIfcRoot(ifcRelServicesBuildings);
			if (result == null) result = caseEntity(ifcRelServicesBuildings);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_REL_SPACE_BOUNDARY: {
			IfcRelSpaceBoundary ifcRelSpaceBoundary = (IfcRelSpaceBoundary)theEObject;
			T result = caseIfcRelSpaceBoundary(ifcRelSpaceBoundary);
			if (result == null) result = caseIfcRelConnects(ifcRelSpaceBoundary);
			if (result == null) result = caseIfcRelationship(ifcRelSpaceBoundary);
			if (result == null) result = caseIfcRoot(ifcRelSpaceBoundary);
			if (result == null) result = caseEntity(ifcRelSpaceBoundary);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_REL_VOIDS_ELEMENT: {
			IfcRelVoidsElement ifcRelVoidsElement = (IfcRelVoidsElement)theEObject;
			T result = caseIfcRelVoidsElement(ifcRelVoidsElement);
			if (result == null) result = caseIfcRelConnects(ifcRelVoidsElement);
			if (result == null) result = caseIfcRelationship(ifcRelVoidsElement);
			if (result == null) result = caseIfcRoot(ifcRelVoidsElement);
			if (result == null) result = caseEntity(ifcRelVoidsElement);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_REPRESENTATION: {
			IfcRepresentation ifcRepresentation = (IfcRepresentation)theEObject;
			T result = caseIfcRepresentation(ifcRepresentation);
			if (result == null) result = caseEntity(ifcRepresentation);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_REPRESENTATION_CONTEXT: {
			IfcRepresentationContext ifcRepresentationContext = (IfcRepresentationContext)theEObject;
			T result = caseIfcRepresentationContext(ifcRepresentationContext);
			if (result == null) result = caseEntity(ifcRepresentationContext);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_REPRESENTATION_ITEM: {
			IfcRepresentationItem ifcRepresentationItem = (IfcRepresentationItem)theEObject;
			T result = caseIfcRepresentationItem(ifcRepresentationItem);
			if (result == null) result = caseEntity(ifcRepresentationItem);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_REPRESENTATION_MAP: {
			IfcRepresentationMap ifcRepresentationMap = (IfcRepresentationMap)theEObject;
			T result = caseIfcRepresentationMap(ifcRepresentationMap);
			if (result == null) result = caseEntity(ifcRepresentationMap);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_RESOURCE: {
			IfcResource ifcResource = (IfcResource)theEObject;
			T result = caseIfcResource(ifcResource);
			if (result == null) result = caseIfcObject(ifcResource);
			if (result == null) result = caseIfcObjectDefinition(ifcResource);
			if (result == null) result = caseIfcRoot(ifcResource);
			if (result == null) result = caseEntity(ifcResource);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_RESOURCE_CONSUMPTION_ENUM_TYPE: {
			IfcResourceConsumptionEnumType ifcResourceConsumptionEnumType = (IfcResourceConsumptionEnumType)theEObject;
			T result = caseIfcResourceConsumptionEnumType(ifcResourceConsumptionEnumType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_REVOLVED_AREA_SOLID: {
			IfcRevolvedAreaSolid ifcRevolvedAreaSolid = (IfcRevolvedAreaSolid)theEObject;
			T result = caseIfcRevolvedAreaSolid(ifcRevolvedAreaSolid);
			if (result == null) result = caseIfcSweptAreaSolid(ifcRevolvedAreaSolid);
			if (result == null) result = caseIfcSolidModel(ifcRevolvedAreaSolid);
			if (result == null) result = caseIfcGeometricRepresentationItem(ifcRevolvedAreaSolid);
			if (result == null) result = caseIfcRepresentationItem(ifcRevolvedAreaSolid);
			if (result == null) result = caseEntity(ifcRevolvedAreaSolid);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_RIB_PLATE_DIRECTION_ENUM_TYPE: {
			IfcRibPlateDirectionEnumType ifcRibPlateDirectionEnumType = (IfcRibPlateDirectionEnumType)theEObject;
			T result = caseIfcRibPlateDirectionEnumType(ifcRibPlateDirectionEnumType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_RIB_PLATE_PROFILE_PROPERTIES: {
			IfcRibPlateProfileProperties ifcRibPlateProfileProperties = (IfcRibPlateProfileProperties)theEObject;
			T result = caseIfcRibPlateProfileProperties(ifcRibPlateProfileProperties);
			if (result == null) result = caseIfcProfileProperties(ifcRibPlateProfileProperties);
			if (result == null) result = caseEntity(ifcRibPlateProfileProperties);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_RIGHT_CIRCULAR_CONE: {
			IfcRightCircularCone ifcRightCircularCone = (IfcRightCircularCone)theEObject;
			T result = caseIfcRightCircularCone(ifcRightCircularCone);
			if (result == null) result = caseIfcCsgPrimitive3D(ifcRightCircularCone);
			if (result == null) result = caseIfcGeometricRepresentationItem(ifcRightCircularCone);
			if (result == null) result = caseIfcRepresentationItem(ifcRightCircularCone);
			if (result == null) result = caseEntity(ifcRightCircularCone);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_RIGHT_CIRCULAR_CYLINDER: {
			IfcRightCircularCylinder ifcRightCircularCylinder = (IfcRightCircularCylinder)theEObject;
			T result = caseIfcRightCircularCylinder(ifcRightCircularCylinder);
			if (result == null) result = caseIfcCsgPrimitive3D(ifcRightCircularCylinder);
			if (result == null) result = caseIfcGeometricRepresentationItem(ifcRightCircularCylinder);
			if (result == null) result = caseIfcRepresentationItem(ifcRightCircularCylinder);
			if (result == null) result = caseEntity(ifcRightCircularCylinder);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_ROLE_ENUM_TYPE: {
			IfcRoleEnumType ifcRoleEnumType = (IfcRoleEnumType)theEObject;
			T result = caseIfcRoleEnumType(ifcRoleEnumType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_ROOF: {
			IfcRoof ifcRoof = (IfcRoof)theEObject;
			T result = caseIfcRoof(ifcRoof);
			if (result == null) result = caseIfcBuildingElement(ifcRoof);
			if (result == null) result = caseIfcElement(ifcRoof);
			if (result == null) result = caseIfcProduct(ifcRoof);
			if (result == null) result = caseIfcObject(ifcRoof);
			if (result == null) result = caseIfcObjectDefinition(ifcRoof);
			if (result == null) result = caseIfcRoot(ifcRoof);
			if (result == null) result = caseEntity(ifcRoof);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_ROOF_TYPE_ENUM_TYPE: {
			IfcRoofTypeEnumType ifcRoofTypeEnumType = (IfcRoofTypeEnumType)theEObject;
			T result = caseIfcRoofTypeEnumType(ifcRoofTypeEnumType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_ROOT: {
			IfcRoot ifcRoot = (IfcRoot)theEObject;
			T result = caseIfcRoot(ifcRoot);
			if (result == null) result = caseEntity(ifcRoot);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_ROTATIONAL_FREQUENCY_MEASURE_TYPE: {
			IfcRotationalFrequencyMeasureType ifcRotationalFrequencyMeasureType = (IfcRotationalFrequencyMeasureType)theEObject;
			T result = caseIfcRotationalFrequencyMeasureType(ifcRotationalFrequencyMeasureType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_ROTATIONAL_MASS_MEASURE_TYPE: {
			IfcRotationalMassMeasureType ifcRotationalMassMeasureType = (IfcRotationalMassMeasureType)theEObject;
			T result = caseIfcRotationalMassMeasureType(ifcRotationalMassMeasureType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_ROTATIONAL_STIFFNESS_MEASURE_TYPE: {
			IfcRotationalStiffnessMeasureType ifcRotationalStiffnessMeasureType = (IfcRotationalStiffnessMeasureType)theEObject;
			T result = caseIfcRotationalStiffnessMeasureType(ifcRotationalStiffnessMeasureType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_ROUNDED_EDGE_FEATURE: {
			IfcRoundedEdgeFeature ifcRoundedEdgeFeature = (IfcRoundedEdgeFeature)theEObject;
			T result = caseIfcRoundedEdgeFeature(ifcRoundedEdgeFeature);
			if (result == null) result = caseIfcEdgeFeature(ifcRoundedEdgeFeature);
			if (result == null) result = caseIfcFeatureElementSubtraction(ifcRoundedEdgeFeature);
			if (result == null) result = caseIfcFeatureElement(ifcRoundedEdgeFeature);
			if (result == null) result = caseIfcElement(ifcRoundedEdgeFeature);
			if (result == null) result = caseIfcProduct(ifcRoundedEdgeFeature);
			if (result == null) result = caseIfcObject(ifcRoundedEdgeFeature);
			if (result == null) result = caseIfcObjectDefinition(ifcRoundedEdgeFeature);
			if (result == null) result = caseIfcRoot(ifcRoundedEdgeFeature);
			if (result == null) result = caseEntity(ifcRoundedEdgeFeature);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_ROUNDED_RECTANGLE_PROFILE_DEF: {
			IfcRoundedRectangleProfileDef ifcRoundedRectangleProfileDef = (IfcRoundedRectangleProfileDef)theEObject;
			T result = caseIfcRoundedRectangleProfileDef(ifcRoundedRectangleProfileDef);
			if (result == null) result = caseIfcRectangleProfileDef(ifcRoundedRectangleProfileDef);
			if (result == null) result = caseIfcParameterizedProfileDef(ifcRoundedRectangleProfileDef);
			if (result == null) result = caseIfcProfileDef(ifcRoundedRectangleProfileDef);
			if (result == null) result = caseEntity(ifcRoundedRectangleProfileDef);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_SANITARY_TERMINAL_TYPE: {
			IfcSanitaryTerminalType ifcSanitaryTerminalType = (IfcSanitaryTerminalType)theEObject;
			T result = caseIfcSanitaryTerminalType(ifcSanitaryTerminalType);
			if (result == null) result = caseIfcFlowTerminalType(ifcSanitaryTerminalType);
			if (result == null) result = caseIfcDistributionFlowElementType(ifcSanitaryTerminalType);
			if (result == null) result = caseIfcDistributionElementType(ifcSanitaryTerminalType);
			if (result == null) result = caseIfcElementType(ifcSanitaryTerminalType);
			if (result == null) result = caseIfcTypeProduct(ifcSanitaryTerminalType);
			if (result == null) result = caseIfcTypeObject(ifcSanitaryTerminalType);
			if (result == null) result = caseIfcObjectDefinition(ifcSanitaryTerminalType);
			if (result == null) result = caseIfcRoot(ifcSanitaryTerminalType);
			if (result == null) result = caseEntity(ifcSanitaryTerminalType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_SANITARY_TERMINAL_TYPE_ENUM_TYPE: {
			IfcSanitaryTerminalTypeEnumType ifcSanitaryTerminalTypeEnumType = (IfcSanitaryTerminalTypeEnumType)theEObject;
			T result = caseIfcSanitaryTerminalTypeEnumType(ifcSanitaryTerminalTypeEnumType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_SCHEDULE_TIME_CONTROL: {
			IfcScheduleTimeControl ifcScheduleTimeControl = (IfcScheduleTimeControl)theEObject;
			T result = caseIfcScheduleTimeControl(ifcScheduleTimeControl);
			if (result == null) result = caseIfcControl(ifcScheduleTimeControl);
			if (result == null) result = caseIfcObject(ifcScheduleTimeControl);
			if (result == null) result = caseIfcObjectDefinition(ifcScheduleTimeControl);
			if (result == null) result = caseIfcRoot(ifcScheduleTimeControl);
			if (result == null) result = caseEntity(ifcScheduleTimeControl);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_SECOND_IN_MINUTE_TYPE: {
			IfcSecondInMinuteType ifcSecondInMinuteType = (IfcSecondInMinuteType)theEObject;
			T result = caseIfcSecondInMinuteType(ifcSecondInMinuteType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_SECTIONAL_AREA_INTEGRAL_MEASURE_TYPE: {
			IfcSectionalAreaIntegralMeasureType ifcSectionalAreaIntegralMeasureType = (IfcSectionalAreaIntegralMeasureType)theEObject;
			T result = caseIfcSectionalAreaIntegralMeasureType(ifcSectionalAreaIntegralMeasureType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_SECTIONED_SPINE: {
			IfcSectionedSpine ifcSectionedSpine = (IfcSectionedSpine)theEObject;
			T result = caseIfcSectionedSpine(ifcSectionedSpine);
			if (result == null) result = caseIfcGeometricRepresentationItem(ifcSectionedSpine);
			if (result == null) result = caseIfcRepresentationItem(ifcSectionedSpine);
			if (result == null) result = caseEntity(ifcSectionedSpine);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_SECTION_MODULUS_MEASURE_TYPE: {
			IfcSectionModulusMeasureType ifcSectionModulusMeasureType = (IfcSectionModulusMeasureType)theEObject;
			T result = caseIfcSectionModulusMeasureType(ifcSectionModulusMeasureType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_SECTION_PROPERTIES: {
			IfcSectionProperties ifcSectionProperties = (IfcSectionProperties)theEObject;
			T result = caseIfcSectionProperties(ifcSectionProperties);
			if (result == null) result = caseEntity(ifcSectionProperties);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_SECTION_REINFORCEMENT_PROPERTIES: {
			IfcSectionReinforcementProperties ifcSectionReinforcementProperties = (IfcSectionReinforcementProperties)theEObject;
			T result = caseIfcSectionReinforcementProperties(ifcSectionReinforcementProperties);
			if (result == null) result = caseEntity(ifcSectionReinforcementProperties);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_SECTION_TYPE_ENUM_TYPE: {
			IfcSectionTypeEnumType ifcSectionTypeEnumType = (IfcSectionTypeEnumType)theEObject;
			T result = caseIfcSectionTypeEnumType(ifcSectionTypeEnumType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_SENSOR_TYPE: {
			IfcSensorType ifcSensorType = (IfcSensorType)theEObject;
			T result = caseIfcSensorType(ifcSensorType);
			if (result == null) result = caseIfcDistributionControlElementType(ifcSensorType);
			if (result == null) result = caseIfcDistributionElementType(ifcSensorType);
			if (result == null) result = caseIfcElementType(ifcSensorType);
			if (result == null) result = caseIfcTypeProduct(ifcSensorType);
			if (result == null) result = caseIfcTypeObject(ifcSensorType);
			if (result == null) result = caseIfcObjectDefinition(ifcSensorType);
			if (result == null) result = caseIfcRoot(ifcSensorType);
			if (result == null) result = caseEntity(ifcSensorType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_SENSOR_TYPE_ENUM_TYPE: {
			IfcSensorTypeEnumType ifcSensorTypeEnumType = (IfcSensorTypeEnumType)theEObject;
			T result = caseIfcSensorTypeEnumType(ifcSensorTypeEnumType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_SEQUENCE_ENUM_TYPE: {
			IfcSequenceEnumType ifcSequenceEnumType = (IfcSequenceEnumType)theEObject;
			T result = caseIfcSequenceEnumType(ifcSequenceEnumType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_SERVICE_LIFE: {
			IfcServiceLife ifcServiceLife = (IfcServiceLife)theEObject;
			T result = caseIfcServiceLife(ifcServiceLife);
			if (result == null) result = caseIfcControl(ifcServiceLife);
			if (result == null) result = caseIfcObject(ifcServiceLife);
			if (result == null) result = caseIfcObjectDefinition(ifcServiceLife);
			if (result == null) result = caseIfcRoot(ifcServiceLife);
			if (result == null) result = caseEntity(ifcServiceLife);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_SERVICE_LIFE_FACTOR: {
			IfcServiceLifeFactor ifcServiceLifeFactor = (IfcServiceLifeFactor)theEObject;
			T result = caseIfcServiceLifeFactor(ifcServiceLifeFactor);
			if (result == null) result = caseIfcPropertySetDefinition(ifcServiceLifeFactor);
			if (result == null) result = caseIfcPropertyDefinition(ifcServiceLifeFactor);
			if (result == null) result = caseIfcRoot(ifcServiceLifeFactor);
			if (result == null) result = caseEntity(ifcServiceLifeFactor);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_SERVICE_LIFE_FACTOR_TYPE_ENUM_TYPE: {
			IfcServiceLifeFactorTypeEnumType ifcServiceLifeFactorTypeEnumType = (IfcServiceLifeFactorTypeEnumType)theEObject;
			T result = caseIfcServiceLifeFactorTypeEnumType(ifcServiceLifeFactorTypeEnumType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_SERVICE_LIFE_TYPE_ENUM_TYPE: {
			IfcServiceLifeTypeEnumType ifcServiceLifeTypeEnumType = (IfcServiceLifeTypeEnumType)theEObject;
			T result = caseIfcServiceLifeTypeEnumType(ifcServiceLifeTypeEnumType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_SHAPE_ASPECT: {
			IfcShapeAspect ifcShapeAspect = (IfcShapeAspect)theEObject;
			T result = caseIfcShapeAspect(ifcShapeAspect);
			if (result == null) result = caseEntity(ifcShapeAspect);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_SHAPE_MODEL: {
			IfcShapeModel ifcShapeModel = (IfcShapeModel)theEObject;
			T result = caseIfcShapeModel(ifcShapeModel);
			if (result == null) result = caseIfcRepresentation(ifcShapeModel);
			if (result == null) result = caseEntity(ifcShapeModel);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_SHAPE_REPRESENTATION: {
			IfcShapeRepresentation ifcShapeRepresentation = (IfcShapeRepresentation)theEObject;
			T result = caseIfcShapeRepresentation(ifcShapeRepresentation);
			if (result == null) result = caseIfcShapeModel(ifcShapeRepresentation);
			if (result == null) result = caseIfcRepresentation(ifcShapeRepresentation);
			if (result == null) result = caseEntity(ifcShapeRepresentation);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_SHEAR_MODULUS_MEASURE_TYPE: {
			IfcShearModulusMeasureType ifcShearModulusMeasureType = (IfcShearModulusMeasureType)theEObject;
			T result = caseIfcShearModulusMeasureType(ifcShearModulusMeasureType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_SHELL: {
			IfcShell ifcShell = (IfcShell)theEObject;
			T result = caseIfcShell(ifcShell);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_SHELL_BASED_SURFACE_MODEL: {
			IfcShellBasedSurfaceModel ifcShellBasedSurfaceModel = (IfcShellBasedSurfaceModel)theEObject;
			T result = caseIfcShellBasedSurfaceModel(ifcShellBasedSurfaceModel);
			if (result == null) result = caseIfcGeometricRepresentationItem(ifcShellBasedSurfaceModel);
			if (result == null) result = caseIfcRepresentationItem(ifcShellBasedSurfaceModel);
			if (result == null) result = caseEntity(ifcShellBasedSurfaceModel);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_SIMPLE_PROPERTY: {
			IfcSimpleProperty ifcSimpleProperty = (IfcSimpleProperty)theEObject;
			T result = caseIfcSimpleProperty(ifcSimpleProperty);
			if (result == null) result = caseIfcProperty(ifcSimpleProperty);
			if (result == null) result = caseEntity(ifcSimpleProperty);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_SIMPLE_VALUE: {
			IfcSimpleValue ifcSimpleValue = (IfcSimpleValue)theEObject;
			T result = caseIfcSimpleValue(ifcSimpleValue);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_SI_PREFIX_TYPE: {
			IfcSIPrefixType ifcSIPrefixType = (IfcSIPrefixType)theEObject;
			T result = caseIfcSIPrefixType(ifcSIPrefixType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_SITE: {
			IfcSite ifcSite = (IfcSite)theEObject;
			T result = caseIfcSite(ifcSite);
			if (result == null) result = caseIfcSpatialStructureElement(ifcSite);
			if (result == null) result = caseIfcProduct(ifcSite);
			if (result == null) result = caseIfcObject(ifcSite);
			if (result == null) result = caseIfcObjectDefinition(ifcSite);
			if (result == null) result = caseIfcRoot(ifcSite);
			if (result == null) result = caseEntity(ifcSite);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_SI_UNIT: {
			IfcSIUnit ifcSIUnit = (IfcSIUnit)theEObject;
			T result = caseIfcSIUnit(ifcSIUnit);
			if (result == null) result = caseIfcSIUnitTemp(ifcSIUnit);
			if (result == null) result = caseIfcNamedUnit(ifcSIUnit);
			if (result == null) result = caseEntity(ifcSIUnit);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_SI_UNIT_NAME_TYPE: {
			IfcSIUnitNameType ifcSIUnitNameType = (IfcSIUnitNameType)theEObject;
			T result = caseIfcSIUnitNameType(ifcSIUnitNameType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_SI_UNIT_TEMP: {
			IfcSIUnitTemp ifcSIUnitTemp = (IfcSIUnitTemp)theEObject;
			T result = caseIfcSIUnitTemp(ifcSIUnitTemp);
			if (result == null) result = caseIfcNamedUnit(ifcSIUnitTemp);
			if (result == null) result = caseEntity(ifcSIUnitTemp);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_SIZE_SELECT: {
			IfcSizeSelect ifcSizeSelect = (IfcSizeSelect)theEObject;
			T result = caseIfcSizeSelect(ifcSizeSelect);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_SLAB: {
			IfcSlab ifcSlab = (IfcSlab)theEObject;
			T result = caseIfcSlab(ifcSlab);
			if (result == null) result = caseIfcBuildingElement(ifcSlab);
			if (result == null) result = caseIfcElement(ifcSlab);
			if (result == null) result = caseIfcProduct(ifcSlab);
			if (result == null) result = caseIfcObject(ifcSlab);
			if (result == null) result = caseIfcObjectDefinition(ifcSlab);
			if (result == null) result = caseIfcRoot(ifcSlab);
			if (result == null) result = caseEntity(ifcSlab);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_SLAB_TYPE: {
			IfcSlabType ifcSlabType = (IfcSlabType)theEObject;
			T result = caseIfcSlabType(ifcSlabType);
			if (result == null) result = caseIfcBuildingElementType(ifcSlabType);
			if (result == null) result = caseIfcElementType(ifcSlabType);
			if (result == null) result = caseIfcTypeProduct(ifcSlabType);
			if (result == null) result = caseIfcTypeObject(ifcSlabType);
			if (result == null) result = caseIfcObjectDefinition(ifcSlabType);
			if (result == null) result = caseIfcRoot(ifcSlabType);
			if (result == null) result = caseEntity(ifcSlabType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_SLAB_TYPE_ENUM_TYPE: {
			IfcSlabTypeEnumType ifcSlabTypeEnumType = (IfcSlabTypeEnumType)theEObject;
			T result = caseIfcSlabTypeEnumType(ifcSlabTypeEnumType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_SLIPPAGE_CONNECTION_CONDITION: {
			IfcSlippageConnectionCondition ifcSlippageConnectionCondition = (IfcSlippageConnectionCondition)theEObject;
			T result = caseIfcSlippageConnectionCondition(ifcSlippageConnectionCondition);
			if (result == null) result = caseIfcStructuralConnectionCondition(ifcSlippageConnectionCondition);
			if (result == null) result = caseEntity(ifcSlippageConnectionCondition);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_SOLID_ANGLE_MEASURE_TYPE: {
			IfcSolidAngleMeasureType ifcSolidAngleMeasureType = (IfcSolidAngleMeasureType)theEObject;
			T result = caseIfcSolidAngleMeasureType(ifcSolidAngleMeasureType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_SOLID_MODEL: {
			IfcSolidModel ifcSolidModel = (IfcSolidModel)theEObject;
			T result = caseIfcSolidModel(ifcSolidModel);
			if (result == null) result = caseIfcGeometricRepresentationItem(ifcSolidModel);
			if (result == null) result = caseIfcRepresentationItem(ifcSolidModel);
			if (result == null) result = caseEntity(ifcSolidModel);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_SOUND_POWER_MEASURE_TYPE: {
			IfcSoundPowerMeasureType ifcSoundPowerMeasureType = (IfcSoundPowerMeasureType)theEObject;
			T result = caseIfcSoundPowerMeasureType(ifcSoundPowerMeasureType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_SOUND_PRESSURE_MEASURE_TYPE: {
			IfcSoundPressureMeasureType ifcSoundPressureMeasureType = (IfcSoundPressureMeasureType)theEObject;
			T result = caseIfcSoundPressureMeasureType(ifcSoundPressureMeasureType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_SOUND_PROPERTIES: {
			IfcSoundProperties ifcSoundProperties = (IfcSoundProperties)theEObject;
			T result = caseIfcSoundProperties(ifcSoundProperties);
			if (result == null) result = caseIfcPropertySetDefinition(ifcSoundProperties);
			if (result == null) result = caseIfcPropertyDefinition(ifcSoundProperties);
			if (result == null) result = caseIfcRoot(ifcSoundProperties);
			if (result == null) result = caseEntity(ifcSoundProperties);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_SOUND_SCALE_ENUM_TYPE: {
			IfcSoundScaleEnumType ifcSoundScaleEnumType = (IfcSoundScaleEnumType)theEObject;
			T result = caseIfcSoundScaleEnumType(ifcSoundScaleEnumType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_SOUND_VALUE: {
			IfcSoundValue ifcSoundValue = (IfcSoundValue)theEObject;
			T result = caseIfcSoundValue(ifcSoundValue);
			if (result == null) result = caseIfcPropertySetDefinition(ifcSoundValue);
			if (result == null) result = caseIfcPropertyDefinition(ifcSoundValue);
			if (result == null) result = caseIfcRoot(ifcSoundValue);
			if (result == null) result = caseEntity(ifcSoundValue);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_SPACE: {
			IfcSpace ifcSpace = (IfcSpace)theEObject;
			T result = caseIfcSpace(ifcSpace);
			if (result == null) result = caseIfcSpatialStructureElement(ifcSpace);
			if (result == null) result = caseIfcProduct(ifcSpace);
			if (result == null) result = caseIfcObject(ifcSpace);
			if (result == null) result = caseIfcObjectDefinition(ifcSpace);
			if (result == null) result = caseIfcRoot(ifcSpace);
			if (result == null) result = caseEntity(ifcSpace);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_SPACE_HEATER_TYPE: {
			IfcSpaceHeaterType ifcSpaceHeaterType = (IfcSpaceHeaterType)theEObject;
			T result = caseIfcSpaceHeaterType(ifcSpaceHeaterType);
			if (result == null) result = caseIfcEnergyConversionDeviceType(ifcSpaceHeaterType);
			if (result == null) result = caseIfcDistributionFlowElementType(ifcSpaceHeaterType);
			if (result == null) result = caseIfcDistributionElementType(ifcSpaceHeaterType);
			if (result == null) result = caseIfcElementType(ifcSpaceHeaterType);
			if (result == null) result = caseIfcTypeProduct(ifcSpaceHeaterType);
			if (result == null) result = caseIfcTypeObject(ifcSpaceHeaterType);
			if (result == null) result = caseIfcObjectDefinition(ifcSpaceHeaterType);
			if (result == null) result = caseIfcRoot(ifcSpaceHeaterType);
			if (result == null) result = caseEntity(ifcSpaceHeaterType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_SPACE_HEATER_TYPE_ENUM_TYPE: {
			IfcSpaceHeaterTypeEnumType ifcSpaceHeaterTypeEnumType = (IfcSpaceHeaterTypeEnumType)theEObject;
			T result = caseIfcSpaceHeaterTypeEnumType(ifcSpaceHeaterTypeEnumType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_SPACE_PROGRAM: {
			IfcSpaceProgram ifcSpaceProgram = (IfcSpaceProgram)theEObject;
			T result = caseIfcSpaceProgram(ifcSpaceProgram);
			if (result == null) result = caseIfcControl(ifcSpaceProgram);
			if (result == null) result = caseIfcObject(ifcSpaceProgram);
			if (result == null) result = caseIfcObjectDefinition(ifcSpaceProgram);
			if (result == null) result = caseIfcRoot(ifcSpaceProgram);
			if (result == null) result = caseEntity(ifcSpaceProgram);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_SPACE_THERMAL_LOAD_PROPERTIES: {
			IfcSpaceThermalLoadProperties ifcSpaceThermalLoadProperties = (IfcSpaceThermalLoadProperties)theEObject;
			T result = caseIfcSpaceThermalLoadProperties(ifcSpaceThermalLoadProperties);
			if (result == null) result = caseIfcPropertySetDefinition(ifcSpaceThermalLoadProperties);
			if (result == null) result = caseIfcPropertyDefinition(ifcSpaceThermalLoadProperties);
			if (result == null) result = caseIfcRoot(ifcSpaceThermalLoadProperties);
			if (result == null) result = caseEntity(ifcSpaceThermalLoadProperties);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_SPACE_TYPE: {
			IfcSpaceType ifcSpaceType = (IfcSpaceType)theEObject;
			T result = caseIfcSpaceType(ifcSpaceType);
			if (result == null) result = caseIfcSpatialStructureElementType(ifcSpaceType);
			if (result == null) result = caseIfcElementType(ifcSpaceType);
			if (result == null) result = caseIfcTypeProduct(ifcSpaceType);
			if (result == null) result = caseIfcTypeObject(ifcSpaceType);
			if (result == null) result = caseIfcObjectDefinition(ifcSpaceType);
			if (result == null) result = caseIfcRoot(ifcSpaceType);
			if (result == null) result = caseEntity(ifcSpaceType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_SPACE_TYPE_ENUM_TYPE: {
			IfcSpaceTypeEnumType ifcSpaceTypeEnumType = (IfcSpaceTypeEnumType)theEObject;
			T result = caseIfcSpaceTypeEnumType(ifcSpaceTypeEnumType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_SPATIAL_STRUCTURE_ELEMENT: {
			IfcSpatialStructureElement ifcSpatialStructureElement = (IfcSpatialStructureElement)theEObject;
			T result = caseIfcSpatialStructureElement(ifcSpatialStructureElement);
			if (result == null) result = caseIfcProduct(ifcSpatialStructureElement);
			if (result == null) result = caseIfcObject(ifcSpatialStructureElement);
			if (result == null) result = caseIfcObjectDefinition(ifcSpatialStructureElement);
			if (result == null) result = caseIfcRoot(ifcSpatialStructureElement);
			if (result == null) result = caseEntity(ifcSpatialStructureElement);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_SPATIAL_STRUCTURE_ELEMENT_TYPE: {
			IfcSpatialStructureElementType ifcSpatialStructureElementType = (IfcSpatialStructureElementType)theEObject;
			T result = caseIfcSpatialStructureElementType(ifcSpatialStructureElementType);
			if (result == null) result = caseIfcElementType(ifcSpatialStructureElementType);
			if (result == null) result = caseIfcTypeProduct(ifcSpatialStructureElementType);
			if (result == null) result = caseIfcTypeObject(ifcSpatialStructureElementType);
			if (result == null) result = caseIfcObjectDefinition(ifcSpatialStructureElementType);
			if (result == null) result = caseIfcRoot(ifcSpatialStructureElementType);
			if (result == null) result = caseEntity(ifcSpatialStructureElementType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_SPECIFIC_HEAT_CAPACITY_MEASURE_TYPE: {
			IfcSpecificHeatCapacityMeasureType ifcSpecificHeatCapacityMeasureType = (IfcSpecificHeatCapacityMeasureType)theEObject;
			T result = caseIfcSpecificHeatCapacityMeasureType(ifcSpecificHeatCapacityMeasureType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_SPECULAR_EXPONENT_TYPE: {
			IfcSpecularExponentType ifcSpecularExponentType = (IfcSpecularExponentType)theEObject;
			T result = caseIfcSpecularExponentType(ifcSpecularExponentType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_SPECULAR_HIGHLIGHT_SELECT: {
			IfcSpecularHighlightSelect ifcSpecularHighlightSelect = (IfcSpecularHighlightSelect)theEObject;
			T result = caseIfcSpecularHighlightSelect(ifcSpecularHighlightSelect);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_SPECULAR_ROUGHNESS_TYPE: {
			IfcSpecularRoughnessType ifcSpecularRoughnessType = (IfcSpecularRoughnessType)theEObject;
			T result = caseIfcSpecularRoughnessType(ifcSpecularRoughnessType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_SPHERE: {
			IfcSphere ifcSphere = (IfcSphere)theEObject;
			T result = caseIfcSphere(ifcSphere);
			if (result == null) result = caseIfcCsgPrimitive3D(ifcSphere);
			if (result == null) result = caseIfcGeometricRepresentationItem(ifcSphere);
			if (result == null) result = caseIfcRepresentationItem(ifcSphere);
			if (result == null) result = caseEntity(ifcSphere);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_STACK_TERMINAL_TYPE: {
			IfcStackTerminalType ifcStackTerminalType = (IfcStackTerminalType)theEObject;
			T result = caseIfcStackTerminalType(ifcStackTerminalType);
			if (result == null) result = caseIfcFlowTerminalType(ifcStackTerminalType);
			if (result == null) result = caseIfcDistributionFlowElementType(ifcStackTerminalType);
			if (result == null) result = caseIfcDistributionElementType(ifcStackTerminalType);
			if (result == null) result = caseIfcElementType(ifcStackTerminalType);
			if (result == null) result = caseIfcTypeProduct(ifcStackTerminalType);
			if (result == null) result = caseIfcTypeObject(ifcStackTerminalType);
			if (result == null) result = caseIfcObjectDefinition(ifcStackTerminalType);
			if (result == null) result = caseIfcRoot(ifcStackTerminalType);
			if (result == null) result = caseEntity(ifcStackTerminalType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_STACK_TERMINAL_TYPE_ENUM_TYPE: {
			IfcStackTerminalTypeEnumType ifcStackTerminalTypeEnumType = (IfcStackTerminalTypeEnumType)theEObject;
			T result = caseIfcStackTerminalTypeEnumType(ifcStackTerminalTypeEnumType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_STAIR: {
			IfcStair ifcStair = (IfcStair)theEObject;
			T result = caseIfcStair(ifcStair);
			if (result == null) result = caseIfcBuildingElement(ifcStair);
			if (result == null) result = caseIfcElement(ifcStair);
			if (result == null) result = caseIfcProduct(ifcStair);
			if (result == null) result = caseIfcObject(ifcStair);
			if (result == null) result = caseIfcObjectDefinition(ifcStair);
			if (result == null) result = caseIfcRoot(ifcStair);
			if (result == null) result = caseEntity(ifcStair);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_STAIR_FLIGHT: {
			IfcStairFlight ifcStairFlight = (IfcStairFlight)theEObject;
			T result = caseIfcStairFlight(ifcStairFlight);
			if (result == null) result = caseIfcBuildingElement(ifcStairFlight);
			if (result == null) result = caseIfcElement(ifcStairFlight);
			if (result == null) result = caseIfcProduct(ifcStairFlight);
			if (result == null) result = caseIfcObject(ifcStairFlight);
			if (result == null) result = caseIfcObjectDefinition(ifcStairFlight);
			if (result == null) result = caseIfcRoot(ifcStairFlight);
			if (result == null) result = caseEntity(ifcStairFlight);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_STAIR_FLIGHT_TYPE: {
			IfcStairFlightType ifcStairFlightType = (IfcStairFlightType)theEObject;
			T result = caseIfcStairFlightType(ifcStairFlightType);
			if (result == null) result = caseIfcBuildingElementType(ifcStairFlightType);
			if (result == null) result = caseIfcElementType(ifcStairFlightType);
			if (result == null) result = caseIfcTypeProduct(ifcStairFlightType);
			if (result == null) result = caseIfcTypeObject(ifcStairFlightType);
			if (result == null) result = caseIfcObjectDefinition(ifcStairFlightType);
			if (result == null) result = caseIfcRoot(ifcStairFlightType);
			if (result == null) result = caseEntity(ifcStairFlightType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_STAIR_FLIGHT_TYPE_ENUM_TYPE: {
			IfcStairFlightTypeEnumType ifcStairFlightTypeEnumType = (IfcStairFlightTypeEnumType)theEObject;
			T result = caseIfcStairFlightTypeEnumType(ifcStairFlightTypeEnumType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_STAIR_TYPE_ENUM_TYPE: {
			IfcStairTypeEnumType ifcStairTypeEnumType = (IfcStairTypeEnumType)theEObject;
			T result = caseIfcStairTypeEnumType(ifcStairTypeEnumType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_STATE_ENUM_TYPE: {
			IfcStateEnumType ifcStateEnumType = (IfcStateEnumType)theEObject;
			T result = caseIfcStateEnumType(ifcStateEnumType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_STRUCTURAL_ACTION: {
			IfcStructuralAction ifcStructuralAction = (IfcStructuralAction)theEObject;
			T result = caseIfcStructuralAction(ifcStructuralAction);
			if (result == null) result = caseIfcStructuralActivity(ifcStructuralAction);
			if (result == null) result = caseIfcProduct(ifcStructuralAction);
			if (result == null) result = caseIfcObject(ifcStructuralAction);
			if (result == null) result = caseIfcObjectDefinition(ifcStructuralAction);
			if (result == null) result = caseIfcRoot(ifcStructuralAction);
			if (result == null) result = caseEntity(ifcStructuralAction);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_STRUCTURAL_ACTIVITY: {
			IfcStructuralActivity ifcStructuralActivity = (IfcStructuralActivity)theEObject;
			T result = caseIfcStructuralActivity(ifcStructuralActivity);
			if (result == null) result = caseIfcProduct(ifcStructuralActivity);
			if (result == null) result = caseIfcObject(ifcStructuralActivity);
			if (result == null) result = caseIfcObjectDefinition(ifcStructuralActivity);
			if (result == null) result = caseIfcRoot(ifcStructuralActivity);
			if (result == null) result = caseEntity(ifcStructuralActivity);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_STRUCTURAL_ACTIVITY_ASSIGNMENT_SELECT: {
			IfcStructuralActivityAssignmentSelect ifcStructuralActivityAssignmentSelect = (IfcStructuralActivityAssignmentSelect)theEObject;
			T result = caseIfcStructuralActivityAssignmentSelect(ifcStructuralActivityAssignmentSelect);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_STRUCTURAL_ANALYSIS_MODEL: {
			IfcStructuralAnalysisModel ifcStructuralAnalysisModel = (IfcStructuralAnalysisModel)theEObject;
			T result = caseIfcStructuralAnalysisModel(ifcStructuralAnalysisModel);
			if (result == null) result = caseIfcSystem(ifcStructuralAnalysisModel);
			if (result == null) result = caseIfcGroup(ifcStructuralAnalysisModel);
			if (result == null) result = caseIfcObject(ifcStructuralAnalysisModel);
			if (result == null) result = caseIfcObjectDefinition(ifcStructuralAnalysisModel);
			if (result == null) result = caseIfcRoot(ifcStructuralAnalysisModel);
			if (result == null) result = caseEntity(ifcStructuralAnalysisModel);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_STRUCTURAL_CONNECTION: {
			IfcStructuralConnection ifcStructuralConnection = (IfcStructuralConnection)theEObject;
			T result = caseIfcStructuralConnection(ifcStructuralConnection);
			if (result == null) result = caseIfcStructuralItem(ifcStructuralConnection);
			if (result == null) result = caseIfcProduct(ifcStructuralConnection);
			if (result == null) result = caseIfcObject(ifcStructuralConnection);
			if (result == null) result = caseIfcObjectDefinition(ifcStructuralConnection);
			if (result == null) result = caseIfcRoot(ifcStructuralConnection);
			if (result == null) result = caseEntity(ifcStructuralConnection);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_STRUCTURAL_CONNECTION_CONDITION: {
			IfcStructuralConnectionCondition ifcStructuralConnectionCondition = (IfcStructuralConnectionCondition)theEObject;
			T result = caseIfcStructuralConnectionCondition(ifcStructuralConnectionCondition);
			if (result == null) result = caseEntity(ifcStructuralConnectionCondition);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_STRUCTURAL_CURVE_CONNECTION: {
			IfcStructuralCurveConnection ifcStructuralCurveConnection = (IfcStructuralCurveConnection)theEObject;
			T result = caseIfcStructuralCurveConnection(ifcStructuralCurveConnection);
			if (result == null) result = caseIfcStructuralConnection(ifcStructuralCurveConnection);
			if (result == null) result = caseIfcStructuralItem(ifcStructuralCurveConnection);
			if (result == null) result = caseIfcProduct(ifcStructuralCurveConnection);
			if (result == null) result = caseIfcObject(ifcStructuralCurveConnection);
			if (result == null) result = caseIfcObjectDefinition(ifcStructuralCurveConnection);
			if (result == null) result = caseIfcRoot(ifcStructuralCurveConnection);
			if (result == null) result = caseEntity(ifcStructuralCurveConnection);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_STRUCTURAL_CURVE_MEMBER: {
			IfcStructuralCurveMember ifcStructuralCurveMember = (IfcStructuralCurveMember)theEObject;
			T result = caseIfcStructuralCurveMember(ifcStructuralCurveMember);
			if (result == null) result = caseIfcStructuralMember(ifcStructuralCurveMember);
			if (result == null) result = caseIfcStructuralItem(ifcStructuralCurveMember);
			if (result == null) result = caseIfcProduct(ifcStructuralCurveMember);
			if (result == null) result = caseIfcObject(ifcStructuralCurveMember);
			if (result == null) result = caseIfcObjectDefinition(ifcStructuralCurveMember);
			if (result == null) result = caseIfcRoot(ifcStructuralCurveMember);
			if (result == null) result = caseEntity(ifcStructuralCurveMember);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_STRUCTURAL_CURVE_MEMBER_VARYING: {
			IfcStructuralCurveMemberVarying ifcStructuralCurveMemberVarying = (IfcStructuralCurveMemberVarying)theEObject;
			T result = caseIfcStructuralCurveMemberVarying(ifcStructuralCurveMemberVarying);
			if (result == null) result = caseIfcStructuralCurveMember(ifcStructuralCurveMemberVarying);
			if (result == null) result = caseIfcStructuralMember(ifcStructuralCurveMemberVarying);
			if (result == null) result = caseIfcStructuralItem(ifcStructuralCurveMemberVarying);
			if (result == null) result = caseIfcProduct(ifcStructuralCurveMemberVarying);
			if (result == null) result = caseIfcObject(ifcStructuralCurveMemberVarying);
			if (result == null) result = caseIfcObjectDefinition(ifcStructuralCurveMemberVarying);
			if (result == null) result = caseIfcRoot(ifcStructuralCurveMemberVarying);
			if (result == null) result = caseEntity(ifcStructuralCurveMemberVarying);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_STRUCTURAL_CURVE_TYPE_ENUM_TYPE: {
			IfcStructuralCurveTypeEnumType ifcStructuralCurveTypeEnumType = (IfcStructuralCurveTypeEnumType)theEObject;
			T result = caseIfcStructuralCurveTypeEnumType(ifcStructuralCurveTypeEnumType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_STRUCTURAL_ITEM: {
			IfcStructuralItem ifcStructuralItem = (IfcStructuralItem)theEObject;
			T result = caseIfcStructuralItem(ifcStructuralItem);
			if (result == null) result = caseIfcProduct(ifcStructuralItem);
			if (result == null) result = caseIfcObject(ifcStructuralItem);
			if (result == null) result = caseIfcObjectDefinition(ifcStructuralItem);
			if (result == null) result = caseIfcRoot(ifcStructuralItem);
			if (result == null) result = caseEntity(ifcStructuralItem);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_STRUCTURAL_LINEAR_ACTION: {
			IfcStructuralLinearAction ifcStructuralLinearAction = (IfcStructuralLinearAction)theEObject;
			T result = caseIfcStructuralLinearAction(ifcStructuralLinearAction);
			if (result == null) result = caseIfcStructuralAction(ifcStructuralLinearAction);
			if (result == null) result = caseIfcStructuralActivity(ifcStructuralLinearAction);
			if (result == null) result = caseIfcProduct(ifcStructuralLinearAction);
			if (result == null) result = caseIfcObject(ifcStructuralLinearAction);
			if (result == null) result = caseIfcObjectDefinition(ifcStructuralLinearAction);
			if (result == null) result = caseIfcRoot(ifcStructuralLinearAction);
			if (result == null) result = caseEntity(ifcStructuralLinearAction);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_STRUCTURAL_LINEAR_ACTION_VARYING: {
			IfcStructuralLinearActionVarying ifcStructuralLinearActionVarying = (IfcStructuralLinearActionVarying)theEObject;
			T result = caseIfcStructuralLinearActionVarying(ifcStructuralLinearActionVarying);
			if (result == null) result = caseIfcStructuralLinearAction(ifcStructuralLinearActionVarying);
			if (result == null) result = caseIfcStructuralAction(ifcStructuralLinearActionVarying);
			if (result == null) result = caseIfcStructuralActivity(ifcStructuralLinearActionVarying);
			if (result == null) result = caseIfcProduct(ifcStructuralLinearActionVarying);
			if (result == null) result = caseIfcObject(ifcStructuralLinearActionVarying);
			if (result == null) result = caseIfcObjectDefinition(ifcStructuralLinearActionVarying);
			if (result == null) result = caseIfcRoot(ifcStructuralLinearActionVarying);
			if (result == null) result = caseEntity(ifcStructuralLinearActionVarying);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_STRUCTURAL_LOAD: {
			IfcStructuralLoad ifcStructuralLoad = (IfcStructuralLoad)theEObject;
			T result = caseIfcStructuralLoad(ifcStructuralLoad);
			if (result == null) result = caseEntity(ifcStructuralLoad);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_STRUCTURAL_LOAD_GROUP: {
			IfcStructuralLoadGroup ifcStructuralLoadGroup = (IfcStructuralLoadGroup)theEObject;
			T result = caseIfcStructuralLoadGroup(ifcStructuralLoadGroup);
			if (result == null) result = caseIfcGroup(ifcStructuralLoadGroup);
			if (result == null) result = caseIfcObject(ifcStructuralLoadGroup);
			if (result == null) result = caseIfcObjectDefinition(ifcStructuralLoadGroup);
			if (result == null) result = caseIfcRoot(ifcStructuralLoadGroup);
			if (result == null) result = caseEntity(ifcStructuralLoadGroup);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_STRUCTURAL_LOAD_LINEAR_FORCE: {
			IfcStructuralLoadLinearForce ifcStructuralLoadLinearForce = (IfcStructuralLoadLinearForce)theEObject;
			T result = caseIfcStructuralLoadLinearForce(ifcStructuralLoadLinearForce);
			if (result == null) result = caseIfcStructuralLoadStatic(ifcStructuralLoadLinearForce);
			if (result == null) result = caseIfcStructuralLoad(ifcStructuralLoadLinearForce);
			if (result == null) result = caseEntity(ifcStructuralLoadLinearForce);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_STRUCTURAL_LOAD_PLANAR_FORCE: {
			IfcStructuralLoadPlanarForce ifcStructuralLoadPlanarForce = (IfcStructuralLoadPlanarForce)theEObject;
			T result = caseIfcStructuralLoadPlanarForce(ifcStructuralLoadPlanarForce);
			if (result == null) result = caseIfcStructuralLoadStatic(ifcStructuralLoadPlanarForce);
			if (result == null) result = caseIfcStructuralLoad(ifcStructuralLoadPlanarForce);
			if (result == null) result = caseEntity(ifcStructuralLoadPlanarForce);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_STRUCTURAL_LOAD_SINGLE_DISPLACEMENT: {
			IfcStructuralLoadSingleDisplacement ifcStructuralLoadSingleDisplacement = (IfcStructuralLoadSingleDisplacement)theEObject;
			T result = caseIfcStructuralLoadSingleDisplacement(ifcStructuralLoadSingleDisplacement);
			if (result == null) result = caseIfcStructuralLoadStatic(ifcStructuralLoadSingleDisplacement);
			if (result == null) result = caseIfcStructuralLoad(ifcStructuralLoadSingleDisplacement);
			if (result == null) result = caseEntity(ifcStructuralLoadSingleDisplacement);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_STRUCTURAL_LOAD_SINGLE_DISPLACEMENT_DISTORTION: {
			IfcStructuralLoadSingleDisplacementDistortion ifcStructuralLoadSingleDisplacementDistortion = (IfcStructuralLoadSingleDisplacementDistortion)theEObject;
			T result = caseIfcStructuralLoadSingleDisplacementDistortion(ifcStructuralLoadSingleDisplacementDistortion);
			if (result == null) result = caseIfcStructuralLoadSingleDisplacement(ifcStructuralLoadSingleDisplacementDistortion);
			if (result == null) result = caseIfcStructuralLoadStatic(ifcStructuralLoadSingleDisplacementDistortion);
			if (result == null) result = caseIfcStructuralLoad(ifcStructuralLoadSingleDisplacementDistortion);
			if (result == null) result = caseEntity(ifcStructuralLoadSingleDisplacementDistortion);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_STRUCTURAL_LOAD_SINGLE_FORCE: {
			IfcStructuralLoadSingleForce ifcStructuralLoadSingleForce = (IfcStructuralLoadSingleForce)theEObject;
			T result = caseIfcStructuralLoadSingleForce(ifcStructuralLoadSingleForce);
			if (result == null) result = caseIfcStructuralLoadStatic(ifcStructuralLoadSingleForce);
			if (result == null) result = caseIfcStructuralLoad(ifcStructuralLoadSingleForce);
			if (result == null) result = caseEntity(ifcStructuralLoadSingleForce);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_STRUCTURAL_LOAD_SINGLE_FORCE_WARPING: {
			IfcStructuralLoadSingleForceWarping ifcStructuralLoadSingleForceWarping = (IfcStructuralLoadSingleForceWarping)theEObject;
			T result = caseIfcStructuralLoadSingleForceWarping(ifcStructuralLoadSingleForceWarping);
			if (result == null) result = caseIfcStructuralLoadSingleForce(ifcStructuralLoadSingleForceWarping);
			if (result == null) result = caseIfcStructuralLoadStatic(ifcStructuralLoadSingleForceWarping);
			if (result == null) result = caseIfcStructuralLoad(ifcStructuralLoadSingleForceWarping);
			if (result == null) result = caseEntity(ifcStructuralLoadSingleForceWarping);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_STRUCTURAL_LOAD_STATIC: {
			IfcStructuralLoadStatic ifcStructuralLoadStatic = (IfcStructuralLoadStatic)theEObject;
			T result = caseIfcStructuralLoadStatic(ifcStructuralLoadStatic);
			if (result == null) result = caseIfcStructuralLoad(ifcStructuralLoadStatic);
			if (result == null) result = caseEntity(ifcStructuralLoadStatic);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_STRUCTURAL_LOAD_TEMPERATURE: {
			IfcStructuralLoadTemperature ifcStructuralLoadTemperature = (IfcStructuralLoadTemperature)theEObject;
			T result = caseIfcStructuralLoadTemperature(ifcStructuralLoadTemperature);
			if (result == null) result = caseIfcStructuralLoadStatic(ifcStructuralLoadTemperature);
			if (result == null) result = caseIfcStructuralLoad(ifcStructuralLoadTemperature);
			if (result == null) result = caseEntity(ifcStructuralLoadTemperature);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_STRUCTURAL_MEMBER: {
			IfcStructuralMember ifcStructuralMember = (IfcStructuralMember)theEObject;
			T result = caseIfcStructuralMember(ifcStructuralMember);
			if (result == null) result = caseIfcStructuralItem(ifcStructuralMember);
			if (result == null) result = caseIfcProduct(ifcStructuralMember);
			if (result == null) result = caseIfcObject(ifcStructuralMember);
			if (result == null) result = caseIfcObjectDefinition(ifcStructuralMember);
			if (result == null) result = caseIfcRoot(ifcStructuralMember);
			if (result == null) result = caseEntity(ifcStructuralMember);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_STRUCTURAL_PLANAR_ACTION: {
			IfcStructuralPlanarAction ifcStructuralPlanarAction = (IfcStructuralPlanarAction)theEObject;
			T result = caseIfcStructuralPlanarAction(ifcStructuralPlanarAction);
			if (result == null) result = caseIfcStructuralAction(ifcStructuralPlanarAction);
			if (result == null) result = caseIfcStructuralActivity(ifcStructuralPlanarAction);
			if (result == null) result = caseIfcProduct(ifcStructuralPlanarAction);
			if (result == null) result = caseIfcObject(ifcStructuralPlanarAction);
			if (result == null) result = caseIfcObjectDefinition(ifcStructuralPlanarAction);
			if (result == null) result = caseIfcRoot(ifcStructuralPlanarAction);
			if (result == null) result = caseEntity(ifcStructuralPlanarAction);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_STRUCTURAL_PLANAR_ACTION_VARYING: {
			IfcStructuralPlanarActionVarying ifcStructuralPlanarActionVarying = (IfcStructuralPlanarActionVarying)theEObject;
			T result = caseIfcStructuralPlanarActionVarying(ifcStructuralPlanarActionVarying);
			if (result == null) result = caseIfcStructuralPlanarAction(ifcStructuralPlanarActionVarying);
			if (result == null) result = caseIfcStructuralAction(ifcStructuralPlanarActionVarying);
			if (result == null) result = caseIfcStructuralActivity(ifcStructuralPlanarActionVarying);
			if (result == null) result = caseIfcProduct(ifcStructuralPlanarActionVarying);
			if (result == null) result = caseIfcObject(ifcStructuralPlanarActionVarying);
			if (result == null) result = caseIfcObjectDefinition(ifcStructuralPlanarActionVarying);
			if (result == null) result = caseIfcRoot(ifcStructuralPlanarActionVarying);
			if (result == null) result = caseEntity(ifcStructuralPlanarActionVarying);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_STRUCTURAL_POINT_ACTION: {
			IfcStructuralPointAction ifcStructuralPointAction = (IfcStructuralPointAction)theEObject;
			T result = caseIfcStructuralPointAction(ifcStructuralPointAction);
			if (result == null) result = caseIfcStructuralAction(ifcStructuralPointAction);
			if (result == null) result = caseIfcStructuralActivity(ifcStructuralPointAction);
			if (result == null) result = caseIfcProduct(ifcStructuralPointAction);
			if (result == null) result = caseIfcObject(ifcStructuralPointAction);
			if (result == null) result = caseIfcObjectDefinition(ifcStructuralPointAction);
			if (result == null) result = caseIfcRoot(ifcStructuralPointAction);
			if (result == null) result = caseEntity(ifcStructuralPointAction);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_STRUCTURAL_POINT_CONNECTION: {
			IfcStructuralPointConnection ifcStructuralPointConnection = (IfcStructuralPointConnection)theEObject;
			T result = caseIfcStructuralPointConnection(ifcStructuralPointConnection);
			if (result == null) result = caseIfcStructuralConnection(ifcStructuralPointConnection);
			if (result == null) result = caseIfcStructuralItem(ifcStructuralPointConnection);
			if (result == null) result = caseIfcProduct(ifcStructuralPointConnection);
			if (result == null) result = caseIfcObject(ifcStructuralPointConnection);
			if (result == null) result = caseIfcObjectDefinition(ifcStructuralPointConnection);
			if (result == null) result = caseIfcRoot(ifcStructuralPointConnection);
			if (result == null) result = caseEntity(ifcStructuralPointConnection);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_STRUCTURAL_POINT_REACTION: {
			IfcStructuralPointReaction ifcStructuralPointReaction = (IfcStructuralPointReaction)theEObject;
			T result = caseIfcStructuralPointReaction(ifcStructuralPointReaction);
			if (result == null) result = caseIfcStructuralReaction(ifcStructuralPointReaction);
			if (result == null) result = caseIfcStructuralActivity(ifcStructuralPointReaction);
			if (result == null) result = caseIfcProduct(ifcStructuralPointReaction);
			if (result == null) result = caseIfcObject(ifcStructuralPointReaction);
			if (result == null) result = caseIfcObjectDefinition(ifcStructuralPointReaction);
			if (result == null) result = caseIfcRoot(ifcStructuralPointReaction);
			if (result == null) result = caseEntity(ifcStructuralPointReaction);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_STRUCTURAL_PROFILE_PROPERTIES: {
			IfcStructuralProfileProperties ifcStructuralProfileProperties = (IfcStructuralProfileProperties)theEObject;
			T result = caseIfcStructuralProfileProperties(ifcStructuralProfileProperties);
			if (result == null) result = caseIfcGeneralProfileProperties(ifcStructuralProfileProperties);
			if (result == null) result = caseIfcProfileProperties(ifcStructuralProfileProperties);
			if (result == null) result = caseEntity(ifcStructuralProfileProperties);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_STRUCTURAL_REACTION: {
			IfcStructuralReaction ifcStructuralReaction = (IfcStructuralReaction)theEObject;
			T result = caseIfcStructuralReaction(ifcStructuralReaction);
			if (result == null) result = caseIfcStructuralActivity(ifcStructuralReaction);
			if (result == null) result = caseIfcProduct(ifcStructuralReaction);
			if (result == null) result = caseIfcObject(ifcStructuralReaction);
			if (result == null) result = caseIfcObjectDefinition(ifcStructuralReaction);
			if (result == null) result = caseIfcRoot(ifcStructuralReaction);
			if (result == null) result = caseEntity(ifcStructuralReaction);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_STRUCTURAL_RESULT_GROUP: {
			IfcStructuralResultGroup ifcStructuralResultGroup = (IfcStructuralResultGroup)theEObject;
			T result = caseIfcStructuralResultGroup(ifcStructuralResultGroup);
			if (result == null) result = caseIfcGroup(ifcStructuralResultGroup);
			if (result == null) result = caseIfcObject(ifcStructuralResultGroup);
			if (result == null) result = caseIfcObjectDefinition(ifcStructuralResultGroup);
			if (result == null) result = caseIfcRoot(ifcStructuralResultGroup);
			if (result == null) result = caseEntity(ifcStructuralResultGroup);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_STRUCTURAL_STEEL_PROFILE_PROPERTIES: {
			IfcStructuralSteelProfileProperties ifcStructuralSteelProfileProperties = (IfcStructuralSteelProfileProperties)theEObject;
			T result = caseIfcStructuralSteelProfileProperties(ifcStructuralSteelProfileProperties);
			if (result == null) result = caseIfcStructuralProfileProperties(ifcStructuralSteelProfileProperties);
			if (result == null) result = caseIfcGeneralProfileProperties(ifcStructuralSteelProfileProperties);
			if (result == null) result = caseIfcProfileProperties(ifcStructuralSteelProfileProperties);
			if (result == null) result = caseEntity(ifcStructuralSteelProfileProperties);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_STRUCTURAL_SURFACE_CONNECTION: {
			IfcStructuralSurfaceConnection ifcStructuralSurfaceConnection = (IfcStructuralSurfaceConnection)theEObject;
			T result = caseIfcStructuralSurfaceConnection(ifcStructuralSurfaceConnection);
			if (result == null) result = caseIfcStructuralConnection(ifcStructuralSurfaceConnection);
			if (result == null) result = caseIfcStructuralItem(ifcStructuralSurfaceConnection);
			if (result == null) result = caseIfcProduct(ifcStructuralSurfaceConnection);
			if (result == null) result = caseIfcObject(ifcStructuralSurfaceConnection);
			if (result == null) result = caseIfcObjectDefinition(ifcStructuralSurfaceConnection);
			if (result == null) result = caseIfcRoot(ifcStructuralSurfaceConnection);
			if (result == null) result = caseEntity(ifcStructuralSurfaceConnection);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_STRUCTURAL_SURFACE_MEMBER: {
			IfcStructuralSurfaceMember ifcStructuralSurfaceMember = (IfcStructuralSurfaceMember)theEObject;
			T result = caseIfcStructuralSurfaceMember(ifcStructuralSurfaceMember);
			if (result == null) result = caseIfcStructuralMember(ifcStructuralSurfaceMember);
			if (result == null) result = caseIfcStructuralItem(ifcStructuralSurfaceMember);
			if (result == null) result = caseIfcProduct(ifcStructuralSurfaceMember);
			if (result == null) result = caseIfcObject(ifcStructuralSurfaceMember);
			if (result == null) result = caseIfcObjectDefinition(ifcStructuralSurfaceMember);
			if (result == null) result = caseIfcRoot(ifcStructuralSurfaceMember);
			if (result == null) result = caseEntity(ifcStructuralSurfaceMember);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_STRUCTURAL_SURFACE_MEMBER_VARYING: {
			IfcStructuralSurfaceMemberVarying ifcStructuralSurfaceMemberVarying = (IfcStructuralSurfaceMemberVarying)theEObject;
			T result = caseIfcStructuralSurfaceMemberVarying(ifcStructuralSurfaceMemberVarying);
			if (result == null) result = caseIfcStructuralSurfaceMember(ifcStructuralSurfaceMemberVarying);
			if (result == null) result = caseIfcStructuralMember(ifcStructuralSurfaceMemberVarying);
			if (result == null) result = caseIfcStructuralItem(ifcStructuralSurfaceMemberVarying);
			if (result == null) result = caseIfcProduct(ifcStructuralSurfaceMemberVarying);
			if (result == null) result = caseIfcObject(ifcStructuralSurfaceMemberVarying);
			if (result == null) result = caseIfcObjectDefinition(ifcStructuralSurfaceMemberVarying);
			if (result == null) result = caseIfcRoot(ifcStructuralSurfaceMemberVarying);
			if (result == null) result = caseEntity(ifcStructuralSurfaceMemberVarying);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_STRUCTURAL_SURFACE_TYPE_ENUM_TYPE: {
			IfcStructuralSurfaceTypeEnumType ifcStructuralSurfaceTypeEnumType = (IfcStructuralSurfaceTypeEnumType)theEObject;
			T result = caseIfcStructuralSurfaceTypeEnumType(ifcStructuralSurfaceTypeEnumType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_STRUCTURED_DIMENSION_CALLOUT: {
			IfcStructuredDimensionCallout ifcStructuredDimensionCallout = (IfcStructuredDimensionCallout)theEObject;
			T result = caseIfcStructuredDimensionCallout(ifcStructuredDimensionCallout);
			if (result == null) result = caseIfcDraughtingCallout(ifcStructuredDimensionCallout);
			if (result == null) result = caseIfcGeometricRepresentationItem(ifcStructuredDimensionCallout);
			if (result == null) result = caseIfcRepresentationItem(ifcStructuredDimensionCallout);
			if (result == null) result = caseEntity(ifcStructuredDimensionCallout);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_STYLED_ITEM: {
			IfcStyledItem ifcStyledItem = (IfcStyledItem)theEObject;
			T result = caseIfcStyledItem(ifcStyledItem);
			if (result == null) result = caseIfcRepresentationItem(ifcStyledItem);
			if (result == null) result = caseEntity(ifcStyledItem);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_STYLED_REPRESENTATION: {
			IfcStyledRepresentation ifcStyledRepresentation = (IfcStyledRepresentation)theEObject;
			T result = caseIfcStyledRepresentation(ifcStyledRepresentation);
			if (result == null) result = caseIfcStyleModel(ifcStyledRepresentation);
			if (result == null) result = caseIfcRepresentation(ifcStyledRepresentation);
			if (result == null) result = caseEntity(ifcStyledRepresentation);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_STYLE_MODEL: {
			IfcStyleModel ifcStyleModel = (IfcStyleModel)theEObject;
			T result = caseIfcStyleModel(ifcStyleModel);
			if (result == null) result = caseIfcRepresentation(ifcStyleModel);
			if (result == null) result = caseEntity(ifcStyleModel);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_SUB_CONTRACT_RESOURCE: {
			IfcSubContractResource ifcSubContractResource = (IfcSubContractResource)theEObject;
			T result = caseIfcSubContractResource(ifcSubContractResource);
			if (result == null) result = caseIfcConstructionResource(ifcSubContractResource);
			if (result == null) result = caseIfcResource(ifcSubContractResource);
			if (result == null) result = caseIfcObject(ifcSubContractResource);
			if (result == null) result = caseIfcObjectDefinition(ifcSubContractResource);
			if (result == null) result = caseIfcRoot(ifcSubContractResource);
			if (result == null) result = caseEntity(ifcSubContractResource);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_SUBEDGE: {
			IfcSubedge ifcSubedge = (IfcSubedge)theEObject;
			T result = caseIfcSubedge(ifcSubedge);
			if (result == null) result = caseIfcEdge(ifcSubedge);
			if (result == null) result = caseIfcTopologicalRepresentationItem(ifcSubedge);
			if (result == null) result = caseIfcRepresentationItem(ifcSubedge);
			if (result == null) result = caseEntity(ifcSubedge);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_SURFACE: {
			IfcSurface ifcSurface = (IfcSurface)theEObject;
			T result = caseIfcSurface(ifcSurface);
			if (result == null) result = caseIfcGeometricRepresentationItem(ifcSurface);
			if (result == null) result = caseIfcRepresentationItem(ifcSurface);
			if (result == null) result = caseEntity(ifcSurface);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_SURFACE_CURVE_SWEPT_AREA_SOLID: {
			IfcSurfaceCurveSweptAreaSolid ifcSurfaceCurveSweptAreaSolid = (IfcSurfaceCurveSweptAreaSolid)theEObject;
			T result = caseIfcSurfaceCurveSweptAreaSolid(ifcSurfaceCurveSweptAreaSolid);
			if (result == null) result = caseIfcSweptAreaSolid(ifcSurfaceCurveSweptAreaSolid);
			if (result == null) result = caseIfcSolidModel(ifcSurfaceCurveSweptAreaSolid);
			if (result == null) result = caseIfcGeometricRepresentationItem(ifcSurfaceCurveSweptAreaSolid);
			if (result == null) result = caseIfcRepresentationItem(ifcSurfaceCurveSweptAreaSolid);
			if (result == null) result = caseEntity(ifcSurfaceCurveSweptAreaSolid);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_SURFACE_OF_LINEAR_EXTRUSION: {
			IfcSurfaceOfLinearExtrusion ifcSurfaceOfLinearExtrusion = (IfcSurfaceOfLinearExtrusion)theEObject;
			T result = caseIfcSurfaceOfLinearExtrusion(ifcSurfaceOfLinearExtrusion);
			if (result == null) result = caseIfcSweptSurface(ifcSurfaceOfLinearExtrusion);
			if (result == null) result = caseIfcSurface(ifcSurfaceOfLinearExtrusion);
			if (result == null) result = caseIfcGeometricRepresentationItem(ifcSurfaceOfLinearExtrusion);
			if (result == null) result = caseIfcRepresentationItem(ifcSurfaceOfLinearExtrusion);
			if (result == null) result = caseEntity(ifcSurfaceOfLinearExtrusion);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_SURFACE_OF_REVOLUTION: {
			IfcSurfaceOfRevolution ifcSurfaceOfRevolution = (IfcSurfaceOfRevolution)theEObject;
			T result = caseIfcSurfaceOfRevolution(ifcSurfaceOfRevolution);
			if (result == null) result = caseIfcSweptSurface(ifcSurfaceOfRevolution);
			if (result == null) result = caseIfcSurface(ifcSurfaceOfRevolution);
			if (result == null) result = caseIfcGeometricRepresentationItem(ifcSurfaceOfRevolution);
			if (result == null) result = caseIfcRepresentationItem(ifcSurfaceOfRevolution);
			if (result == null) result = caseEntity(ifcSurfaceOfRevolution);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_SURFACE_OR_FACE_SURFACE: {
			IfcSurfaceOrFaceSurface ifcSurfaceOrFaceSurface = (IfcSurfaceOrFaceSurface)theEObject;
			T result = caseIfcSurfaceOrFaceSurface(ifcSurfaceOrFaceSurface);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_SURFACE_SIDE_TYPE: {
			IfcSurfaceSideType ifcSurfaceSideType = (IfcSurfaceSideType)theEObject;
			T result = caseIfcSurfaceSideType(ifcSurfaceSideType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_SURFACE_STYLE: {
			IfcSurfaceStyle ifcSurfaceStyle = (IfcSurfaceStyle)theEObject;
			T result = caseIfcSurfaceStyle(ifcSurfaceStyle);
			if (result == null) result = caseIfcPresentationStyle(ifcSurfaceStyle);
			if (result == null) result = caseEntity(ifcSurfaceStyle);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_SURFACE_STYLE_ELEMENT_SELECT: {
			IfcSurfaceStyleElementSelect ifcSurfaceStyleElementSelect = (IfcSurfaceStyleElementSelect)theEObject;
			T result = caseIfcSurfaceStyleElementSelect(ifcSurfaceStyleElementSelect);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_SURFACE_STYLE_LIGHTING: {
			IfcSurfaceStyleLighting ifcSurfaceStyleLighting = (IfcSurfaceStyleLighting)theEObject;
			T result = caseIfcSurfaceStyleLighting(ifcSurfaceStyleLighting);
			if (result == null) result = caseEntity(ifcSurfaceStyleLighting);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_SURFACE_STYLE_REFRACTION: {
			IfcSurfaceStyleRefraction ifcSurfaceStyleRefraction = (IfcSurfaceStyleRefraction)theEObject;
			T result = caseIfcSurfaceStyleRefraction(ifcSurfaceStyleRefraction);
			if (result == null) result = caseEntity(ifcSurfaceStyleRefraction);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_SURFACE_STYLE_RENDERING: {
			IfcSurfaceStyleRendering ifcSurfaceStyleRendering = (IfcSurfaceStyleRendering)theEObject;
			T result = caseIfcSurfaceStyleRendering(ifcSurfaceStyleRendering);
			if (result == null) result = caseIfcSurfaceStyleShading(ifcSurfaceStyleRendering);
			if (result == null) result = caseEntity(ifcSurfaceStyleRendering);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_SURFACE_STYLE_SHADING: {
			IfcSurfaceStyleShading ifcSurfaceStyleShading = (IfcSurfaceStyleShading)theEObject;
			T result = caseIfcSurfaceStyleShading(ifcSurfaceStyleShading);
			if (result == null) result = caseEntity(ifcSurfaceStyleShading);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_SURFACE_STYLE_WITH_TEXTURES: {
			IfcSurfaceStyleWithTextures ifcSurfaceStyleWithTextures = (IfcSurfaceStyleWithTextures)theEObject;
			T result = caseIfcSurfaceStyleWithTextures(ifcSurfaceStyleWithTextures);
			if (result == null) result = caseEntity(ifcSurfaceStyleWithTextures);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_SURFACE_TEXTURE: {
			IfcSurfaceTexture ifcSurfaceTexture = (IfcSurfaceTexture)theEObject;
			T result = caseIfcSurfaceTexture(ifcSurfaceTexture);
			if (result == null) result = caseEntity(ifcSurfaceTexture);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_SURFACE_TEXTURE_ENUM_TYPE: {
			IfcSurfaceTextureEnumType ifcSurfaceTextureEnumType = (IfcSurfaceTextureEnumType)theEObject;
			T result = caseIfcSurfaceTextureEnumType(ifcSurfaceTextureEnumType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_SWEPT_AREA_SOLID: {
			IfcSweptAreaSolid ifcSweptAreaSolid = (IfcSweptAreaSolid)theEObject;
			T result = caseIfcSweptAreaSolid(ifcSweptAreaSolid);
			if (result == null) result = caseIfcSolidModel(ifcSweptAreaSolid);
			if (result == null) result = caseIfcGeometricRepresentationItem(ifcSweptAreaSolid);
			if (result == null) result = caseIfcRepresentationItem(ifcSweptAreaSolid);
			if (result == null) result = caseEntity(ifcSweptAreaSolid);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_SWEPT_DISK_SOLID: {
			IfcSweptDiskSolid ifcSweptDiskSolid = (IfcSweptDiskSolid)theEObject;
			T result = caseIfcSweptDiskSolid(ifcSweptDiskSolid);
			if (result == null) result = caseIfcSolidModel(ifcSweptDiskSolid);
			if (result == null) result = caseIfcGeometricRepresentationItem(ifcSweptDiskSolid);
			if (result == null) result = caseIfcRepresentationItem(ifcSweptDiskSolid);
			if (result == null) result = caseEntity(ifcSweptDiskSolid);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_SWEPT_SURFACE: {
			IfcSweptSurface ifcSweptSurface = (IfcSweptSurface)theEObject;
			T result = caseIfcSweptSurface(ifcSweptSurface);
			if (result == null) result = caseIfcSurface(ifcSweptSurface);
			if (result == null) result = caseIfcGeometricRepresentationItem(ifcSweptSurface);
			if (result == null) result = caseIfcRepresentationItem(ifcSweptSurface);
			if (result == null) result = caseEntity(ifcSweptSurface);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_SWITCHING_DEVICE_TYPE: {
			IfcSwitchingDeviceType ifcSwitchingDeviceType = (IfcSwitchingDeviceType)theEObject;
			T result = caseIfcSwitchingDeviceType(ifcSwitchingDeviceType);
			if (result == null) result = caseIfcFlowControllerType(ifcSwitchingDeviceType);
			if (result == null) result = caseIfcDistributionFlowElementType(ifcSwitchingDeviceType);
			if (result == null) result = caseIfcDistributionElementType(ifcSwitchingDeviceType);
			if (result == null) result = caseIfcElementType(ifcSwitchingDeviceType);
			if (result == null) result = caseIfcTypeProduct(ifcSwitchingDeviceType);
			if (result == null) result = caseIfcTypeObject(ifcSwitchingDeviceType);
			if (result == null) result = caseIfcObjectDefinition(ifcSwitchingDeviceType);
			if (result == null) result = caseIfcRoot(ifcSwitchingDeviceType);
			if (result == null) result = caseEntity(ifcSwitchingDeviceType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_SWITCHING_DEVICE_TYPE_ENUM_TYPE: {
			IfcSwitchingDeviceTypeEnumType ifcSwitchingDeviceTypeEnumType = (IfcSwitchingDeviceTypeEnumType)theEObject;
			T result = caseIfcSwitchingDeviceTypeEnumType(ifcSwitchingDeviceTypeEnumType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_SYMBOL_STYLE: {
			IfcSymbolStyle ifcSymbolStyle = (IfcSymbolStyle)theEObject;
			T result = caseIfcSymbolStyle(ifcSymbolStyle);
			if (result == null) result = caseIfcPresentationStyle(ifcSymbolStyle);
			if (result == null) result = caseEntity(ifcSymbolStyle);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_SYMBOL_STYLE_SELECT: {
			IfcSymbolStyleSelect ifcSymbolStyleSelect = (IfcSymbolStyleSelect)theEObject;
			T result = caseIfcSymbolStyleSelect(ifcSymbolStyleSelect);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_SYSTEM: {
			IfcSystem ifcSystem = (IfcSystem)theEObject;
			T result = caseIfcSystem(ifcSystem);
			if (result == null) result = caseIfcGroup(ifcSystem);
			if (result == null) result = caseIfcObject(ifcSystem);
			if (result == null) result = caseIfcObjectDefinition(ifcSystem);
			if (result == null) result = caseIfcRoot(ifcSystem);
			if (result == null) result = caseEntity(ifcSystem);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_SYSTEM_FURNITURE_ELEMENT_TYPE: {
			IfcSystemFurnitureElementType ifcSystemFurnitureElementType = (IfcSystemFurnitureElementType)theEObject;
			T result = caseIfcSystemFurnitureElementType(ifcSystemFurnitureElementType);
			if (result == null) result = caseIfcFurnishingElementType(ifcSystemFurnitureElementType);
			if (result == null) result = caseIfcElementType(ifcSystemFurnitureElementType);
			if (result == null) result = caseIfcTypeProduct(ifcSystemFurnitureElementType);
			if (result == null) result = caseIfcTypeObject(ifcSystemFurnitureElementType);
			if (result == null) result = caseIfcObjectDefinition(ifcSystemFurnitureElementType);
			if (result == null) result = caseIfcRoot(ifcSystemFurnitureElementType);
			if (result == null) result = caseEntity(ifcSystemFurnitureElementType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_TABLE: {
			IfcTable ifcTable = (IfcTable)theEObject;
			T result = caseIfcTable(ifcTable);
			if (result == null) result = caseEntity(ifcTable);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_TABLE_ROW: {
			IfcTableRow ifcTableRow = (IfcTableRow)theEObject;
			T result = caseIfcTableRow(ifcTableRow);
			if (result == null) result = caseEntity(ifcTableRow);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_TANK_TYPE: {
			IfcTankType ifcTankType = (IfcTankType)theEObject;
			T result = caseIfcTankType(ifcTankType);
			if (result == null) result = caseIfcFlowStorageDeviceType(ifcTankType);
			if (result == null) result = caseIfcDistributionFlowElementType(ifcTankType);
			if (result == null) result = caseIfcDistributionElementType(ifcTankType);
			if (result == null) result = caseIfcElementType(ifcTankType);
			if (result == null) result = caseIfcTypeProduct(ifcTankType);
			if (result == null) result = caseIfcTypeObject(ifcTankType);
			if (result == null) result = caseIfcObjectDefinition(ifcTankType);
			if (result == null) result = caseIfcRoot(ifcTankType);
			if (result == null) result = caseEntity(ifcTankType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_TANK_TYPE_ENUM_TYPE: {
			IfcTankTypeEnumType ifcTankTypeEnumType = (IfcTankTypeEnumType)theEObject;
			T result = caseIfcTankTypeEnumType(ifcTankTypeEnumType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_TASK: {
			IfcTask ifcTask = (IfcTask)theEObject;
			T result = caseIfcTask(ifcTask);
			if (result == null) result = caseIfcProcess(ifcTask);
			if (result == null) result = caseIfcObject(ifcTask);
			if (result == null) result = caseIfcObjectDefinition(ifcTask);
			if (result == null) result = caseIfcRoot(ifcTask);
			if (result == null) result = caseEntity(ifcTask);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_TELECOM_ADDRESS: {
			IfcTelecomAddress ifcTelecomAddress = (IfcTelecomAddress)theEObject;
			T result = caseIfcTelecomAddress(ifcTelecomAddress);
			if (result == null) result = caseIfcAddress(ifcTelecomAddress);
			if (result == null) result = caseEntity(ifcTelecomAddress);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_TEMPERATURE_GRADIENT_MEASURE_TYPE: {
			IfcTemperatureGradientMeasureType ifcTemperatureGradientMeasureType = (IfcTemperatureGradientMeasureType)theEObject;
			T result = caseIfcTemperatureGradientMeasureType(ifcTemperatureGradientMeasureType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_TENDON: {
			IfcTendon ifcTendon = (IfcTendon)theEObject;
			T result = caseIfcTendon(ifcTendon);
			if (result == null) result = caseIfcReinforcingElement(ifcTendon);
			if (result == null) result = caseIfcBuildingElementComponent(ifcTendon);
			if (result == null) result = caseIfcBuildingElement(ifcTendon);
			if (result == null) result = caseIfcElement(ifcTendon);
			if (result == null) result = caseIfcProduct(ifcTendon);
			if (result == null) result = caseIfcObject(ifcTendon);
			if (result == null) result = caseIfcObjectDefinition(ifcTendon);
			if (result == null) result = caseIfcRoot(ifcTendon);
			if (result == null) result = caseEntity(ifcTendon);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_TENDON_ANCHOR: {
			IfcTendonAnchor ifcTendonAnchor = (IfcTendonAnchor)theEObject;
			T result = caseIfcTendonAnchor(ifcTendonAnchor);
			if (result == null) result = caseIfcReinforcingElement(ifcTendonAnchor);
			if (result == null) result = caseIfcBuildingElementComponent(ifcTendonAnchor);
			if (result == null) result = caseIfcBuildingElement(ifcTendonAnchor);
			if (result == null) result = caseIfcElement(ifcTendonAnchor);
			if (result == null) result = caseIfcProduct(ifcTendonAnchor);
			if (result == null) result = caseIfcObject(ifcTendonAnchor);
			if (result == null) result = caseIfcObjectDefinition(ifcTendonAnchor);
			if (result == null) result = caseIfcRoot(ifcTendonAnchor);
			if (result == null) result = caseEntity(ifcTendonAnchor);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_TENDON_TYPE_ENUM_TYPE: {
			IfcTendonTypeEnumType ifcTendonTypeEnumType = (IfcTendonTypeEnumType)theEObject;
			T result = caseIfcTendonTypeEnumType(ifcTendonTypeEnumType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_TERMINATOR_SYMBOL: {
			IfcTerminatorSymbol ifcTerminatorSymbol = (IfcTerminatorSymbol)theEObject;
			T result = caseIfcTerminatorSymbol(ifcTerminatorSymbol);
			if (result == null) result = caseIfcAnnotationSymbolOccurrence(ifcTerminatorSymbol);
			if (result == null) result = caseIfcAnnotationOccurrence(ifcTerminatorSymbol);
			if (result == null) result = caseIfcStyledItem(ifcTerminatorSymbol);
			if (result == null) result = caseIfcRepresentationItem(ifcTerminatorSymbol);
			if (result == null) result = caseEntity(ifcTerminatorSymbol);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_TEXT_ALIGNMENT_TYPE: {
			IfcTextAlignmentType ifcTextAlignmentType = (IfcTextAlignmentType)theEObject;
			T result = caseIfcTextAlignmentType(ifcTextAlignmentType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_TEXT_DECORATION_TYPE: {
			IfcTextDecorationType ifcTextDecorationType = (IfcTextDecorationType)theEObject;
			T result = caseIfcTextDecorationType(ifcTextDecorationType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_TEXT_FONT_NAME_TYPE: {
			IfcTextFontNameType ifcTextFontNameType = (IfcTextFontNameType)theEObject;
			T result = caseIfcTextFontNameType(ifcTextFontNameType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_TEXT_FONT_SELECT: {
			IfcTextFontSelect ifcTextFontSelect = (IfcTextFontSelect)theEObject;
			T result = caseIfcTextFontSelect(ifcTextFontSelect);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_TEXT_LITERAL: {
			IfcTextLiteral ifcTextLiteral = (IfcTextLiteral)theEObject;
			T result = caseIfcTextLiteral(ifcTextLiteral);
			if (result == null) result = caseIfcGeometricRepresentationItem(ifcTextLiteral);
			if (result == null) result = caseIfcRepresentationItem(ifcTextLiteral);
			if (result == null) result = caseEntity(ifcTextLiteral);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_TEXT_LITERAL_WITH_EXTENT: {
			IfcTextLiteralWithExtent ifcTextLiteralWithExtent = (IfcTextLiteralWithExtent)theEObject;
			T result = caseIfcTextLiteralWithExtent(ifcTextLiteralWithExtent);
			if (result == null) result = caseIfcTextLiteral(ifcTextLiteralWithExtent);
			if (result == null) result = caseIfcGeometricRepresentationItem(ifcTextLiteralWithExtent);
			if (result == null) result = caseIfcRepresentationItem(ifcTextLiteralWithExtent);
			if (result == null) result = caseEntity(ifcTextLiteralWithExtent);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_TEXT_PATH_TYPE: {
			IfcTextPathType ifcTextPathType = (IfcTextPathType)theEObject;
			T result = caseIfcTextPathType(ifcTextPathType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_TEXT_STYLE: {
			IfcTextStyle ifcTextStyle = (IfcTextStyle)theEObject;
			T result = caseIfcTextStyle(ifcTextStyle);
			if (result == null) result = caseIfcPresentationStyle(ifcTextStyle);
			if (result == null) result = caseEntity(ifcTextStyle);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_TEXT_STYLE_FONT_MODEL: {
			IfcTextStyleFontModel ifcTextStyleFontModel = (IfcTextStyleFontModel)theEObject;
			T result = caseIfcTextStyleFontModel(ifcTextStyleFontModel);
			if (result == null) result = caseIfcPreDefinedTextFont(ifcTextStyleFontModel);
			if (result == null) result = caseIfcPreDefinedItem(ifcTextStyleFontModel);
			if (result == null) result = caseEntity(ifcTextStyleFontModel);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_TEXT_STYLE_FOR_DEFINED_FONT: {
			IfcTextStyleForDefinedFont ifcTextStyleForDefinedFont = (IfcTextStyleForDefinedFont)theEObject;
			T result = caseIfcTextStyleForDefinedFont(ifcTextStyleForDefinedFont);
			if (result == null) result = caseEntity(ifcTextStyleForDefinedFont);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_TEXT_STYLE_SELECT: {
			IfcTextStyleSelect ifcTextStyleSelect = (IfcTextStyleSelect)theEObject;
			T result = caseIfcTextStyleSelect(ifcTextStyleSelect);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_TEXT_STYLE_TEXT_MODEL: {
			IfcTextStyleTextModel ifcTextStyleTextModel = (IfcTextStyleTextModel)theEObject;
			T result = caseIfcTextStyleTextModel(ifcTextStyleTextModel);
			if (result == null) result = caseEntity(ifcTextStyleTextModel);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_TEXT_STYLE_WITH_BOX_CHARACTERISTICS: {
			IfcTextStyleWithBoxCharacteristics ifcTextStyleWithBoxCharacteristics = (IfcTextStyleWithBoxCharacteristics)theEObject;
			T result = caseIfcTextStyleWithBoxCharacteristics(ifcTextStyleWithBoxCharacteristics);
			if (result == null) result = caseEntity(ifcTextStyleWithBoxCharacteristics);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_TEXT_TRANSFORMATION_TYPE: {
			IfcTextTransformationType ifcTextTransformationType = (IfcTextTransformationType)theEObject;
			T result = caseIfcTextTransformationType(ifcTextTransformationType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_TEXT_TYPE: {
			IfcTextType ifcTextType = (IfcTextType)theEObject;
			T result = caseIfcTextType(ifcTextType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_TEXTURE_COORDINATE: {
			IfcTextureCoordinate ifcTextureCoordinate = (IfcTextureCoordinate)theEObject;
			T result = caseIfcTextureCoordinate(ifcTextureCoordinate);
			if (result == null) result = caseEntity(ifcTextureCoordinate);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_TEXTURE_COORDINATE_GENERATOR: {
			IfcTextureCoordinateGenerator ifcTextureCoordinateGenerator = (IfcTextureCoordinateGenerator)theEObject;
			T result = caseIfcTextureCoordinateGenerator(ifcTextureCoordinateGenerator);
			if (result == null) result = caseIfcTextureCoordinate(ifcTextureCoordinateGenerator);
			if (result == null) result = caseEntity(ifcTextureCoordinateGenerator);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_TEXTURE_MAP: {
			IfcTextureMap ifcTextureMap = (IfcTextureMap)theEObject;
			T result = caseIfcTextureMap(ifcTextureMap);
			if (result == null) result = caseIfcTextureCoordinate(ifcTextureMap);
			if (result == null) result = caseEntity(ifcTextureMap);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_TEXTURE_VERTEX: {
			IfcTextureVertex ifcTextureVertex = (IfcTextureVertex)theEObject;
			T result = caseIfcTextureVertex(ifcTextureVertex);
			if (result == null) result = caseEntity(ifcTextureVertex);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_THERMAL_ADMITTANCE_MEASURE_TYPE: {
			IfcThermalAdmittanceMeasureType ifcThermalAdmittanceMeasureType = (IfcThermalAdmittanceMeasureType)theEObject;
			T result = caseIfcThermalAdmittanceMeasureType(ifcThermalAdmittanceMeasureType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_THERMAL_CONDUCTIVITY_MEASURE_TYPE: {
			IfcThermalConductivityMeasureType ifcThermalConductivityMeasureType = (IfcThermalConductivityMeasureType)theEObject;
			T result = caseIfcThermalConductivityMeasureType(ifcThermalConductivityMeasureType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_THERMAL_EXPANSION_COEFFICIENT_MEASURE_TYPE: {
			IfcThermalExpansionCoefficientMeasureType ifcThermalExpansionCoefficientMeasureType = (IfcThermalExpansionCoefficientMeasureType)theEObject;
			T result = caseIfcThermalExpansionCoefficientMeasureType(ifcThermalExpansionCoefficientMeasureType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_THERMAL_LOAD_SOURCE_ENUM_TYPE: {
			IfcThermalLoadSourceEnumType ifcThermalLoadSourceEnumType = (IfcThermalLoadSourceEnumType)theEObject;
			T result = caseIfcThermalLoadSourceEnumType(ifcThermalLoadSourceEnumType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_THERMAL_LOAD_TYPE_ENUM_TYPE: {
			IfcThermalLoadTypeEnumType ifcThermalLoadTypeEnumType = (IfcThermalLoadTypeEnumType)theEObject;
			T result = caseIfcThermalLoadTypeEnumType(ifcThermalLoadTypeEnumType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_THERMAL_MATERIAL_PROPERTIES: {
			IfcThermalMaterialProperties ifcThermalMaterialProperties = (IfcThermalMaterialProperties)theEObject;
			T result = caseIfcThermalMaterialProperties(ifcThermalMaterialProperties);
			if (result == null) result = caseIfcMaterialProperties(ifcThermalMaterialProperties);
			if (result == null) result = caseEntity(ifcThermalMaterialProperties);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_THERMAL_RESISTANCE_MEASURE_TYPE: {
			IfcThermalResistanceMeasureType ifcThermalResistanceMeasureType = (IfcThermalResistanceMeasureType)theEObject;
			T result = caseIfcThermalResistanceMeasureType(ifcThermalResistanceMeasureType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_THERMAL_TRANSMITTANCE_MEASURE_TYPE: {
			IfcThermalTransmittanceMeasureType ifcThermalTransmittanceMeasureType = (IfcThermalTransmittanceMeasureType)theEObject;
			T result = caseIfcThermalTransmittanceMeasureType(ifcThermalTransmittanceMeasureType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_THERMODYNAMIC_TEMPERATURE_MEASURE_TYPE: {
			IfcThermodynamicTemperatureMeasureType ifcThermodynamicTemperatureMeasureType = (IfcThermodynamicTemperatureMeasureType)theEObject;
			T result = caseIfcThermodynamicTemperatureMeasureType(ifcThermodynamicTemperatureMeasureType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_TIME_MEASURE_TYPE: {
			IfcTimeMeasureType ifcTimeMeasureType = (IfcTimeMeasureType)theEObject;
			T result = caseIfcTimeMeasureType(ifcTimeMeasureType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_TIME_SERIES: {
			IfcTimeSeries ifcTimeSeries = (IfcTimeSeries)theEObject;
			T result = caseIfcTimeSeries(ifcTimeSeries);
			if (result == null) result = caseEntity(ifcTimeSeries);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_TIME_SERIES_DATA_TYPE_ENUM_TYPE: {
			IfcTimeSeriesDataTypeEnumType ifcTimeSeriesDataTypeEnumType = (IfcTimeSeriesDataTypeEnumType)theEObject;
			T result = caseIfcTimeSeriesDataTypeEnumType(ifcTimeSeriesDataTypeEnumType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_TIME_SERIES_REFERENCE_RELATIONSHIP: {
			IfcTimeSeriesReferenceRelationship ifcTimeSeriesReferenceRelationship = (IfcTimeSeriesReferenceRelationship)theEObject;
			T result = caseIfcTimeSeriesReferenceRelationship(ifcTimeSeriesReferenceRelationship);
			if (result == null) result = caseEntity(ifcTimeSeriesReferenceRelationship);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_TIME_SERIES_SCHEDULE: {
			IfcTimeSeriesSchedule ifcTimeSeriesSchedule = (IfcTimeSeriesSchedule)theEObject;
			T result = caseIfcTimeSeriesSchedule(ifcTimeSeriesSchedule);
			if (result == null) result = caseIfcControl(ifcTimeSeriesSchedule);
			if (result == null) result = caseIfcObject(ifcTimeSeriesSchedule);
			if (result == null) result = caseIfcObjectDefinition(ifcTimeSeriesSchedule);
			if (result == null) result = caseIfcRoot(ifcTimeSeriesSchedule);
			if (result == null) result = caseEntity(ifcTimeSeriesSchedule);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_TIME_SERIES_SCHEDULE_TYPE_ENUM_TYPE: {
			IfcTimeSeriesScheduleTypeEnumType ifcTimeSeriesScheduleTypeEnumType = (IfcTimeSeriesScheduleTypeEnumType)theEObject;
			T result = caseIfcTimeSeriesScheduleTypeEnumType(ifcTimeSeriesScheduleTypeEnumType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_TIME_SERIES_VALUE: {
			IfcTimeSeriesValue ifcTimeSeriesValue = (IfcTimeSeriesValue)theEObject;
			T result = caseIfcTimeSeriesValue(ifcTimeSeriesValue);
			if (result == null) result = caseEntity(ifcTimeSeriesValue);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_TIME_STAMP_TYPE: {
			IfcTimeStampType ifcTimeStampType = (IfcTimeStampType)theEObject;
			T result = caseIfcTimeStampType(ifcTimeStampType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_TOPOLOGICAL_REPRESENTATION_ITEM: {
			IfcTopologicalRepresentationItem ifcTopologicalRepresentationItem = (IfcTopologicalRepresentationItem)theEObject;
			T result = caseIfcTopologicalRepresentationItem(ifcTopologicalRepresentationItem);
			if (result == null) result = caseIfcRepresentationItem(ifcTopologicalRepresentationItem);
			if (result == null) result = caseEntity(ifcTopologicalRepresentationItem);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_TOPOLOGY_REPRESENTATION: {
			IfcTopologyRepresentation ifcTopologyRepresentation = (IfcTopologyRepresentation)theEObject;
			T result = caseIfcTopologyRepresentation(ifcTopologyRepresentation);
			if (result == null) result = caseIfcShapeModel(ifcTopologyRepresentation);
			if (result == null) result = caseIfcRepresentation(ifcTopologyRepresentation);
			if (result == null) result = caseEntity(ifcTopologyRepresentation);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_TORQUE_MEASURE_TYPE: {
			IfcTorqueMeasureType ifcTorqueMeasureType = (IfcTorqueMeasureType)theEObject;
			T result = caseIfcTorqueMeasureType(ifcTorqueMeasureType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_TRANSFORMER_TYPE: {
			IfcTransformerType ifcTransformerType = (IfcTransformerType)theEObject;
			T result = caseIfcTransformerType(ifcTransformerType);
			if (result == null) result = caseIfcEnergyConversionDeviceType(ifcTransformerType);
			if (result == null) result = caseIfcDistributionFlowElementType(ifcTransformerType);
			if (result == null) result = caseIfcDistributionElementType(ifcTransformerType);
			if (result == null) result = caseIfcElementType(ifcTransformerType);
			if (result == null) result = caseIfcTypeProduct(ifcTransformerType);
			if (result == null) result = caseIfcTypeObject(ifcTransformerType);
			if (result == null) result = caseIfcObjectDefinition(ifcTransformerType);
			if (result == null) result = caseIfcRoot(ifcTransformerType);
			if (result == null) result = caseEntity(ifcTransformerType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_TRANSFORMER_TYPE_ENUM_TYPE: {
			IfcTransformerTypeEnumType ifcTransformerTypeEnumType = (IfcTransformerTypeEnumType)theEObject;
			T result = caseIfcTransformerTypeEnumType(ifcTransformerTypeEnumType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_TRANSITION_CODE_TYPE: {
			IfcTransitionCodeType ifcTransitionCodeType = (IfcTransitionCodeType)theEObject;
			T result = caseIfcTransitionCodeType(ifcTransitionCodeType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_TRANSPORT_ELEMENT: {
			IfcTransportElement ifcTransportElement = (IfcTransportElement)theEObject;
			T result = caseIfcTransportElement(ifcTransportElement);
			if (result == null) result = caseIfcElement(ifcTransportElement);
			if (result == null) result = caseIfcProduct(ifcTransportElement);
			if (result == null) result = caseIfcObject(ifcTransportElement);
			if (result == null) result = caseIfcObjectDefinition(ifcTransportElement);
			if (result == null) result = caseIfcRoot(ifcTransportElement);
			if (result == null) result = caseEntity(ifcTransportElement);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_TRANSPORT_ELEMENT_TYPE: {
			IfcTransportElementType ifcTransportElementType = (IfcTransportElementType)theEObject;
			T result = caseIfcTransportElementType(ifcTransportElementType);
			if (result == null) result = caseIfcElementType(ifcTransportElementType);
			if (result == null) result = caseIfcTypeProduct(ifcTransportElementType);
			if (result == null) result = caseIfcTypeObject(ifcTransportElementType);
			if (result == null) result = caseIfcObjectDefinition(ifcTransportElementType);
			if (result == null) result = caseIfcRoot(ifcTransportElementType);
			if (result == null) result = caseEntity(ifcTransportElementType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_TRANSPORT_ELEMENT_TYPE_ENUM_TYPE: {
			IfcTransportElementTypeEnumType ifcTransportElementTypeEnumType = (IfcTransportElementTypeEnumType)theEObject;
			T result = caseIfcTransportElementTypeEnumType(ifcTransportElementTypeEnumType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_TRAPEZIUM_PROFILE_DEF: {
			IfcTrapeziumProfileDef ifcTrapeziumProfileDef = (IfcTrapeziumProfileDef)theEObject;
			T result = caseIfcTrapeziumProfileDef(ifcTrapeziumProfileDef);
			if (result == null) result = caseIfcParameterizedProfileDef(ifcTrapeziumProfileDef);
			if (result == null) result = caseIfcProfileDef(ifcTrapeziumProfileDef);
			if (result == null) result = caseEntity(ifcTrapeziumProfileDef);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_TRIMMED_CURVE: {
			IfcTrimmedCurve ifcTrimmedCurve = (IfcTrimmedCurve)theEObject;
			T result = caseIfcTrimmedCurve(ifcTrimmedCurve);
			if (result == null) result = caseIfcBoundedCurve(ifcTrimmedCurve);
			if (result == null) result = caseIfcCurve(ifcTrimmedCurve);
			if (result == null) result = caseIfcGeometricRepresentationItem(ifcTrimmedCurve);
			if (result == null) result = caseIfcRepresentationItem(ifcTrimmedCurve);
			if (result == null) result = caseEntity(ifcTrimmedCurve);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_TRIMMING_PREFERENCE_TYPE: {
			IfcTrimmingPreferenceType ifcTrimmingPreferenceType = (IfcTrimmingPreferenceType)theEObject;
			T result = caseIfcTrimmingPreferenceType(ifcTrimmingPreferenceType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_TRIMMING_SELECT: {
			IfcTrimmingSelect ifcTrimmingSelect = (IfcTrimmingSelect)theEObject;
			T result = caseIfcTrimmingSelect(ifcTrimmingSelect);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_TSHAPE_PROFILE_DEF: {
			IfcTShapeProfileDef ifcTShapeProfileDef = (IfcTShapeProfileDef)theEObject;
			T result = caseIfcTShapeProfileDef(ifcTShapeProfileDef);
			if (result == null) result = caseIfcParameterizedProfileDef(ifcTShapeProfileDef);
			if (result == null) result = caseIfcProfileDef(ifcTShapeProfileDef);
			if (result == null) result = caseEntity(ifcTShapeProfileDef);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_TUBE_BUNDLE_TYPE: {
			IfcTubeBundleType ifcTubeBundleType = (IfcTubeBundleType)theEObject;
			T result = caseIfcTubeBundleType(ifcTubeBundleType);
			if (result == null) result = caseIfcEnergyConversionDeviceType(ifcTubeBundleType);
			if (result == null) result = caseIfcDistributionFlowElementType(ifcTubeBundleType);
			if (result == null) result = caseIfcDistributionElementType(ifcTubeBundleType);
			if (result == null) result = caseIfcElementType(ifcTubeBundleType);
			if (result == null) result = caseIfcTypeProduct(ifcTubeBundleType);
			if (result == null) result = caseIfcTypeObject(ifcTubeBundleType);
			if (result == null) result = caseIfcObjectDefinition(ifcTubeBundleType);
			if (result == null) result = caseIfcRoot(ifcTubeBundleType);
			if (result == null) result = caseEntity(ifcTubeBundleType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_TUBE_BUNDLE_TYPE_ENUM_TYPE: {
			IfcTubeBundleTypeEnumType ifcTubeBundleTypeEnumType = (IfcTubeBundleTypeEnumType)theEObject;
			T result = caseIfcTubeBundleTypeEnumType(ifcTubeBundleTypeEnumType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_TWO_DIRECTION_REPEAT_FACTOR: {
			IfcTwoDirectionRepeatFactor ifcTwoDirectionRepeatFactor = (IfcTwoDirectionRepeatFactor)theEObject;
			T result = caseIfcTwoDirectionRepeatFactor(ifcTwoDirectionRepeatFactor);
			if (result == null) result = caseIfcOneDirectionRepeatFactor(ifcTwoDirectionRepeatFactor);
			if (result == null) result = caseIfcGeometricRepresentationItem(ifcTwoDirectionRepeatFactor);
			if (result == null) result = caseIfcRepresentationItem(ifcTwoDirectionRepeatFactor);
			if (result == null) result = caseEntity(ifcTwoDirectionRepeatFactor);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_TYPE_OBJECT: {
			IfcTypeObject ifcTypeObject = (IfcTypeObject)theEObject;
			T result = caseIfcTypeObject(ifcTypeObject);
			if (result == null) result = caseIfcObjectDefinition(ifcTypeObject);
			if (result == null) result = caseIfcRoot(ifcTypeObject);
			if (result == null) result = caseEntity(ifcTypeObject);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_TYPE_PRODUCT: {
			IfcTypeProduct ifcTypeProduct = (IfcTypeProduct)theEObject;
			T result = caseIfcTypeProduct(ifcTypeProduct);
			if (result == null) result = caseIfcTypeObject(ifcTypeProduct);
			if (result == null) result = caseIfcObjectDefinition(ifcTypeProduct);
			if (result == null) result = caseIfcRoot(ifcTypeProduct);
			if (result == null) result = caseEntity(ifcTypeProduct);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_UNIT: {
			IfcUnit ifcUnit = (IfcUnit)theEObject;
			T result = caseIfcUnit(ifcUnit);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_UNITARY_EQUIPMENT_TYPE: {
			IfcUnitaryEquipmentType ifcUnitaryEquipmentType = (IfcUnitaryEquipmentType)theEObject;
			T result = caseIfcUnitaryEquipmentType(ifcUnitaryEquipmentType);
			if (result == null) result = caseIfcEnergyConversionDeviceType(ifcUnitaryEquipmentType);
			if (result == null) result = caseIfcDistributionFlowElementType(ifcUnitaryEquipmentType);
			if (result == null) result = caseIfcDistributionElementType(ifcUnitaryEquipmentType);
			if (result == null) result = caseIfcElementType(ifcUnitaryEquipmentType);
			if (result == null) result = caseIfcTypeProduct(ifcUnitaryEquipmentType);
			if (result == null) result = caseIfcTypeObject(ifcUnitaryEquipmentType);
			if (result == null) result = caseIfcObjectDefinition(ifcUnitaryEquipmentType);
			if (result == null) result = caseIfcRoot(ifcUnitaryEquipmentType);
			if (result == null) result = caseEntity(ifcUnitaryEquipmentType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_UNITARY_EQUIPMENT_TYPE_ENUM_TYPE: {
			IfcUnitaryEquipmentTypeEnumType ifcUnitaryEquipmentTypeEnumType = (IfcUnitaryEquipmentTypeEnumType)theEObject;
			T result = caseIfcUnitaryEquipmentTypeEnumType(ifcUnitaryEquipmentTypeEnumType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_UNIT_ASSIGNMENT: {
			IfcUnitAssignment ifcUnitAssignment = (IfcUnitAssignment)theEObject;
			T result = caseIfcUnitAssignment(ifcUnitAssignment);
			if (result == null) result = caseEntity(ifcUnitAssignment);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_UNIT_ENUM_TYPE: {
			IfcUnitEnumType ifcUnitEnumType = (IfcUnitEnumType)theEObject;
			T result = caseIfcUnitEnumType(ifcUnitEnumType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_USHAPE_PROFILE_DEF: {
			IfcUShapeProfileDef ifcUShapeProfileDef = (IfcUShapeProfileDef)theEObject;
			T result = caseIfcUShapeProfileDef(ifcUShapeProfileDef);
			if (result == null) result = caseIfcParameterizedProfileDef(ifcUShapeProfileDef);
			if (result == null) result = caseIfcProfileDef(ifcUShapeProfileDef);
			if (result == null) result = caseEntity(ifcUShapeProfileDef);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_VALUE: {
			IfcValue ifcValue = (IfcValue)theEObject;
			T result = caseIfcValue(ifcValue);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_VALVE_TYPE: {
			IfcValveType ifcValveType = (IfcValveType)theEObject;
			T result = caseIfcValveType(ifcValveType);
			if (result == null) result = caseIfcFlowControllerType(ifcValveType);
			if (result == null) result = caseIfcDistributionFlowElementType(ifcValveType);
			if (result == null) result = caseIfcDistributionElementType(ifcValveType);
			if (result == null) result = caseIfcElementType(ifcValveType);
			if (result == null) result = caseIfcTypeProduct(ifcValveType);
			if (result == null) result = caseIfcTypeObject(ifcValveType);
			if (result == null) result = caseIfcObjectDefinition(ifcValveType);
			if (result == null) result = caseIfcRoot(ifcValveType);
			if (result == null) result = caseEntity(ifcValveType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_VALVE_TYPE_ENUM_TYPE: {
			IfcValveTypeEnumType ifcValveTypeEnumType = (IfcValveTypeEnumType)theEObject;
			T result = caseIfcValveTypeEnumType(ifcValveTypeEnumType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_VAPOR_PERMEABILITY_MEASURE_TYPE: {
			IfcVaporPermeabilityMeasureType ifcVaporPermeabilityMeasureType = (IfcVaporPermeabilityMeasureType)theEObject;
			T result = caseIfcVaporPermeabilityMeasureType(ifcVaporPermeabilityMeasureType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_VECTOR: {
			IfcVector ifcVector = (IfcVector)theEObject;
			T result = caseIfcVector(ifcVector);
			if (result == null) result = caseIfcGeometricRepresentationItem(ifcVector);
			if (result == null) result = caseIfcRepresentationItem(ifcVector);
			if (result == null) result = caseEntity(ifcVector);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_VECTOR_OR_DIRECTION: {
			IfcVectorOrDirection ifcVectorOrDirection = (IfcVectorOrDirection)theEObject;
			T result = caseIfcVectorOrDirection(ifcVectorOrDirection);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_VERTEX: {
			IfcVertex ifcVertex = (IfcVertex)theEObject;
			T result = caseIfcVertex(ifcVertex);
			if (result == null) result = caseIfcTopologicalRepresentationItem(ifcVertex);
			if (result == null) result = caseIfcRepresentationItem(ifcVertex);
			if (result == null) result = caseEntity(ifcVertex);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_VERTEX_BASED_TEXTURE_MAP: {
			IfcVertexBasedTextureMap ifcVertexBasedTextureMap = (IfcVertexBasedTextureMap)theEObject;
			T result = caseIfcVertexBasedTextureMap(ifcVertexBasedTextureMap);
			if (result == null) result = caseEntity(ifcVertexBasedTextureMap);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_VERTEX_LOOP: {
			IfcVertexLoop ifcVertexLoop = (IfcVertexLoop)theEObject;
			T result = caseIfcVertexLoop(ifcVertexLoop);
			if (result == null) result = caseIfcLoop(ifcVertexLoop);
			if (result == null) result = caseIfcTopologicalRepresentationItem(ifcVertexLoop);
			if (result == null) result = caseIfcRepresentationItem(ifcVertexLoop);
			if (result == null) result = caseEntity(ifcVertexLoop);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_VERTEX_POINT: {
			IfcVertexPoint ifcVertexPoint = (IfcVertexPoint)theEObject;
			T result = caseIfcVertexPoint(ifcVertexPoint);
			if (result == null) result = caseIfcVertex(ifcVertexPoint);
			if (result == null) result = caseIfcTopologicalRepresentationItem(ifcVertexPoint);
			if (result == null) result = caseIfcRepresentationItem(ifcVertexPoint);
			if (result == null) result = caseEntity(ifcVertexPoint);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_VIBRATION_ISOLATOR_TYPE: {
			IfcVibrationIsolatorType ifcVibrationIsolatorType = (IfcVibrationIsolatorType)theEObject;
			T result = caseIfcVibrationIsolatorType(ifcVibrationIsolatorType);
			if (result == null) result = caseIfcDiscreteAccessoryType(ifcVibrationIsolatorType);
			if (result == null) result = caseIfcElementComponentType(ifcVibrationIsolatorType);
			if (result == null) result = caseIfcElementType(ifcVibrationIsolatorType);
			if (result == null) result = caseIfcTypeProduct(ifcVibrationIsolatorType);
			if (result == null) result = caseIfcTypeObject(ifcVibrationIsolatorType);
			if (result == null) result = caseIfcObjectDefinition(ifcVibrationIsolatorType);
			if (result == null) result = caseIfcRoot(ifcVibrationIsolatorType);
			if (result == null) result = caseEntity(ifcVibrationIsolatorType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_VIBRATION_ISOLATOR_TYPE_ENUM_TYPE: {
			IfcVibrationIsolatorTypeEnumType ifcVibrationIsolatorTypeEnumType = (IfcVibrationIsolatorTypeEnumType)theEObject;
			T result = caseIfcVibrationIsolatorTypeEnumType(ifcVibrationIsolatorTypeEnumType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_VIRTUAL_ELEMENT: {
			IfcVirtualElement ifcVirtualElement = (IfcVirtualElement)theEObject;
			T result = caseIfcVirtualElement(ifcVirtualElement);
			if (result == null) result = caseIfcElement(ifcVirtualElement);
			if (result == null) result = caseIfcProduct(ifcVirtualElement);
			if (result == null) result = caseIfcObject(ifcVirtualElement);
			if (result == null) result = caseIfcObjectDefinition(ifcVirtualElement);
			if (result == null) result = caseIfcRoot(ifcVirtualElement);
			if (result == null) result = caseEntity(ifcVirtualElement);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_VIRTUAL_GRID_INTERSECTION: {
			IfcVirtualGridIntersection ifcVirtualGridIntersection = (IfcVirtualGridIntersection)theEObject;
			T result = caseIfcVirtualGridIntersection(ifcVirtualGridIntersection);
			if (result == null) result = caseEntity(ifcVirtualGridIntersection);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_VOLUME_MEASURE_TYPE: {
			IfcVolumeMeasureType ifcVolumeMeasureType = (IfcVolumeMeasureType)theEObject;
			T result = caseIfcVolumeMeasureType(ifcVolumeMeasureType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_VOLUMETRIC_FLOW_RATE_MEASURE_TYPE: {
			IfcVolumetricFlowRateMeasureType ifcVolumetricFlowRateMeasureType = (IfcVolumetricFlowRateMeasureType)theEObject;
			T result = caseIfcVolumetricFlowRateMeasureType(ifcVolumetricFlowRateMeasureType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_WALL: {
			IfcWall ifcWall = (IfcWall)theEObject;
			T result = caseIfcWall(ifcWall);
			if (result == null) result = caseIfcBuildingElement(ifcWall);
			if (result == null) result = caseIfcElement(ifcWall);
			if (result == null) result = caseIfcProduct(ifcWall);
			if (result == null) result = caseIfcObject(ifcWall);
			if (result == null) result = caseIfcObjectDefinition(ifcWall);
			if (result == null) result = caseIfcRoot(ifcWall);
			if (result == null) result = caseEntity(ifcWall);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_WALL_STANDARD_CASE: {
			IfcWallStandardCase ifcWallStandardCase = (IfcWallStandardCase)theEObject;
			T result = caseIfcWallStandardCase(ifcWallStandardCase);
			if (result == null) result = caseIfcWall(ifcWallStandardCase);
			if (result == null) result = caseIfcBuildingElement(ifcWallStandardCase);
			if (result == null) result = caseIfcElement(ifcWallStandardCase);
			if (result == null) result = caseIfcProduct(ifcWallStandardCase);
			if (result == null) result = caseIfcObject(ifcWallStandardCase);
			if (result == null) result = caseIfcObjectDefinition(ifcWallStandardCase);
			if (result == null) result = caseIfcRoot(ifcWallStandardCase);
			if (result == null) result = caseEntity(ifcWallStandardCase);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_WALL_TYPE: {
			IfcWallType ifcWallType = (IfcWallType)theEObject;
			T result = caseIfcWallType(ifcWallType);
			if (result == null) result = caseIfcBuildingElementType(ifcWallType);
			if (result == null) result = caseIfcElementType(ifcWallType);
			if (result == null) result = caseIfcTypeProduct(ifcWallType);
			if (result == null) result = caseIfcTypeObject(ifcWallType);
			if (result == null) result = caseIfcObjectDefinition(ifcWallType);
			if (result == null) result = caseIfcRoot(ifcWallType);
			if (result == null) result = caseEntity(ifcWallType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_WALL_TYPE_ENUM_TYPE: {
			IfcWallTypeEnumType ifcWallTypeEnumType = (IfcWallTypeEnumType)theEObject;
			T result = caseIfcWallTypeEnumType(ifcWallTypeEnumType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_WARPING_CONSTANT_MEASURE_TYPE: {
			IfcWarpingConstantMeasureType ifcWarpingConstantMeasureType = (IfcWarpingConstantMeasureType)theEObject;
			T result = caseIfcWarpingConstantMeasureType(ifcWarpingConstantMeasureType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_WARPING_MOMENT_MEASURE_TYPE: {
			IfcWarpingMomentMeasureType ifcWarpingMomentMeasureType = (IfcWarpingMomentMeasureType)theEObject;
			T result = caseIfcWarpingMomentMeasureType(ifcWarpingMomentMeasureType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_WASTE_TERMINAL_TYPE: {
			IfcWasteTerminalType ifcWasteTerminalType = (IfcWasteTerminalType)theEObject;
			T result = caseIfcWasteTerminalType(ifcWasteTerminalType);
			if (result == null) result = caseIfcFlowTerminalType(ifcWasteTerminalType);
			if (result == null) result = caseIfcDistributionFlowElementType(ifcWasteTerminalType);
			if (result == null) result = caseIfcDistributionElementType(ifcWasteTerminalType);
			if (result == null) result = caseIfcElementType(ifcWasteTerminalType);
			if (result == null) result = caseIfcTypeProduct(ifcWasteTerminalType);
			if (result == null) result = caseIfcTypeObject(ifcWasteTerminalType);
			if (result == null) result = caseIfcObjectDefinition(ifcWasteTerminalType);
			if (result == null) result = caseIfcRoot(ifcWasteTerminalType);
			if (result == null) result = caseEntity(ifcWasteTerminalType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_WASTE_TERMINAL_TYPE_ENUM_TYPE: {
			IfcWasteTerminalTypeEnumType ifcWasteTerminalTypeEnumType = (IfcWasteTerminalTypeEnumType)theEObject;
			T result = caseIfcWasteTerminalTypeEnumType(ifcWasteTerminalTypeEnumType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_WATER_PROPERTIES: {
			IfcWaterProperties ifcWaterProperties = (IfcWaterProperties)theEObject;
			T result = caseIfcWaterProperties(ifcWaterProperties);
			if (result == null) result = caseIfcMaterialProperties(ifcWaterProperties);
			if (result == null) result = caseEntity(ifcWaterProperties);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_WINDOW: {
			IfcWindow ifcWindow = (IfcWindow)theEObject;
			T result = caseIfcWindow(ifcWindow);
			if (result == null) result = caseIfcBuildingElement(ifcWindow);
			if (result == null) result = caseIfcElement(ifcWindow);
			if (result == null) result = caseIfcProduct(ifcWindow);
			if (result == null) result = caseIfcObject(ifcWindow);
			if (result == null) result = caseIfcObjectDefinition(ifcWindow);
			if (result == null) result = caseIfcRoot(ifcWindow);
			if (result == null) result = caseEntity(ifcWindow);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_WINDOW_LINING_PROPERTIES: {
			IfcWindowLiningProperties ifcWindowLiningProperties = (IfcWindowLiningProperties)theEObject;
			T result = caseIfcWindowLiningProperties(ifcWindowLiningProperties);
			if (result == null) result = caseIfcPropertySetDefinition(ifcWindowLiningProperties);
			if (result == null) result = caseIfcPropertyDefinition(ifcWindowLiningProperties);
			if (result == null) result = caseIfcRoot(ifcWindowLiningProperties);
			if (result == null) result = caseEntity(ifcWindowLiningProperties);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_WINDOW_PANEL_OPERATION_ENUM_TYPE: {
			IfcWindowPanelOperationEnumType ifcWindowPanelOperationEnumType = (IfcWindowPanelOperationEnumType)theEObject;
			T result = caseIfcWindowPanelOperationEnumType(ifcWindowPanelOperationEnumType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_WINDOW_PANEL_POSITION_ENUM_TYPE: {
			IfcWindowPanelPositionEnumType ifcWindowPanelPositionEnumType = (IfcWindowPanelPositionEnumType)theEObject;
			T result = caseIfcWindowPanelPositionEnumType(ifcWindowPanelPositionEnumType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_WINDOW_PANEL_PROPERTIES: {
			IfcWindowPanelProperties ifcWindowPanelProperties = (IfcWindowPanelProperties)theEObject;
			T result = caseIfcWindowPanelProperties(ifcWindowPanelProperties);
			if (result == null) result = caseIfcPropertySetDefinition(ifcWindowPanelProperties);
			if (result == null) result = caseIfcPropertyDefinition(ifcWindowPanelProperties);
			if (result == null) result = caseIfcRoot(ifcWindowPanelProperties);
			if (result == null) result = caseEntity(ifcWindowPanelProperties);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_WINDOW_STYLE: {
			IfcWindowStyle ifcWindowStyle = (IfcWindowStyle)theEObject;
			T result = caseIfcWindowStyle(ifcWindowStyle);
			if (result == null) result = caseIfcTypeProduct(ifcWindowStyle);
			if (result == null) result = caseIfcTypeObject(ifcWindowStyle);
			if (result == null) result = caseIfcObjectDefinition(ifcWindowStyle);
			if (result == null) result = caseIfcRoot(ifcWindowStyle);
			if (result == null) result = caseEntity(ifcWindowStyle);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_WINDOW_STYLE_CONSTRUCTION_ENUM_TYPE: {
			IfcWindowStyleConstructionEnumType ifcWindowStyleConstructionEnumType = (IfcWindowStyleConstructionEnumType)theEObject;
			T result = caseIfcWindowStyleConstructionEnumType(ifcWindowStyleConstructionEnumType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_WINDOW_STYLE_OPERATION_ENUM_TYPE: {
			IfcWindowStyleOperationEnumType ifcWindowStyleOperationEnumType = (IfcWindowStyleOperationEnumType)theEObject;
			T result = caseIfcWindowStyleOperationEnumType(ifcWindowStyleOperationEnumType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_WORK_CONTROL: {
			IfcWorkControl ifcWorkControl = (IfcWorkControl)theEObject;
			T result = caseIfcWorkControl(ifcWorkControl);
			if (result == null) result = caseIfcControl(ifcWorkControl);
			if (result == null) result = caseIfcObject(ifcWorkControl);
			if (result == null) result = caseIfcObjectDefinition(ifcWorkControl);
			if (result == null) result = caseIfcRoot(ifcWorkControl);
			if (result == null) result = caseEntity(ifcWorkControl);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_WORK_CONTROL_TYPE_ENUM_TYPE: {
			IfcWorkControlTypeEnumType ifcWorkControlTypeEnumType = (IfcWorkControlTypeEnumType)theEObject;
			T result = caseIfcWorkControlTypeEnumType(ifcWorkControlTypeEnumType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_WORK_PLAN: {
			IfcWorkPlan ifcWorkPlan = (IfcWorkPlan)theEObject;
			T result = caseIfcWorkPlan(ifcWorkPlan);
			if (result == null) result = caseIfcWorkControl(ifcWorkPlan);
			if (result == null) result = caseIfcControl(ifcWorkPlan);
			if (result == null) result = caseIfcObject(ifcWorkPlan);
			if (result == null) result = caseIfcObjectDefinition(ifcWorkPlan);
			if (result == null) result = caseIfcRoot(ifcWorkPlan);
			if (result == null) result = caseEntity(ifcWorkPlan);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_WORK_SCHEDULE: {
			IfcWorkSchedule ifcWorkSchedule = (IfcWorkSchedule)theEObject;
			T result = caseIfcWorkSchedule(ifcWorkSchedule);
			if (result == null) result = caseIfcWorkControl(ifcWorkSchedule);
			if (result == null) result = caseIfcControl(ifcWorkSchedule);
			if (result == null) result = caseIfcObject(ifcWorkSchedule);
			if (result == null) result = caseIfcObjectDefinition(ifcWorkSchedule);
			if (result == null) result = caseIfcRoot(ifcWorkSchedule);
			if (result == null) result = caseEntity(ifcWorkSchedule);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_YEAR_NUMBER_TYPE: {
			IfcYearNumberType ifcYearNumberType = (IfcYearNumberType)theEObject;
			T result = caseIfcYearNumberType(ifcYearNumberType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_ZONE: {
			IfcZone ifcZone = (IfcZone)theEObject;
			T result = caseIfcZone(ifcZone);
			if (result == null) result = caseIfcGroup(ifcZone);
			if (result == null) result = caseIfcObject(ifcZone);
			if (result == null) result = caseIfcObjectDefinition(ifcZone);
			if (result == null) result = caseIfcRoot(ifcZone);
			if (result == null) result = caseEntity(ifcZone);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.IFC_ZSHAPE_PROFILE_DEF: {
			IfcZShapeProfileDef ifcZShapeProfileDef = (IfcZShapeProfileDef)theEObject;
			T result = caseIfcZShapeProfileDef(ifcZShapeProfileDef);
			if (result == null) result = caseIfcParameterizedProfileDef(ifcZShapeProfileDef);
			if (result == null) result = caseIfcProfileDef(ifcZShapeProfileDef);
			if (result == null) result = caseEntity(ifcZShapeProfileDef);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.INCORPORATION_DATE_TYPE: {
			IncorporationDateType incorporationDateType = (IncorporationDateType)theEObject;
			T result = caseIncorporationDateType(incorporationDateType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.INNER_BOUNDARIES_TYPE: {
			InnerBoundariesType innerBoundariesType = (InnerBoundariesType)theEObject;
			T result = caseInnerBoundariesType(innerBoundariesType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.INNER_BOUNDARIES_TYPE1: {
			InnerBoundariesType1 innerBoundariesType1 = (InnerBoundariesType1)theEObject;
			T result = caseInnerBoundariesType1(innerBoundariesType1);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.INNER_CURVES_TYPE: {
			InnerCurvesType innerCurvesType = (InnerCurvesType)theEObject;
			T result = caseInnerCurvesType(innerCurvesType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.INTERSECTING_AXES_TYPE: {
			IntersectingAxesType intersectingAxesType = (IntersectingAxesType)theEObject;
			T result = caseIntersectingAxesType(intersectingAxesType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.ITEM_OF_TYPE: {
			ItemOfType itemOfType = (ItemOfType)theEObject;
			T result = caseItemOfType(itemOfType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.ITEMS_TYPE: {
			ItemsType itemsType = (ItemsType)theEObject;
			T result = caseItemsType(itemsType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.ITEM_TYPE: {
			ItemType itemType = (ItemType)theEObject;
			T result = caseItemType(itemType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.ITEM_TYPE1: {
			ItemType1 itemType1 = (ItemType1)theEObject;
			T result = caseItemType1(itemType1);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.JURISDICTION_TYPE: {
			JurisdictionType jurisdictionType = (JurisdictionType)theEObject;
			T result = caseJurisdictionType(jurisdictionType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.LAST_MODIFYING_APPLICATION_TYPE: {
			LastModifyingApplicationType lastModifyingApplicationType = (LastModifyingApplicationType)theEObject;
			T result = caseLastModifyingApplicationType(lastModifyingApplicationType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.LAST_MODIFYING_USER_TYPE: {
			LastModifyingUserType lastModifyingUserType = (LastModifyingUserType)theEObject;
			T result = caseLastModifyingUserType(lastModifyingUserType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.LAST_REVISION_TIME_TYPE: {
			LastRevisionTimeType lastRevisionTimeType = (LastRevisionTimeType)theEObject;
			T result = caseLastRevisionTimeType(lastRevisionTimeType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.LAST_UPDATE_DATE_TYPE: {
			LastUpdateDateType lastUpdateDateType = (LastUpdateDateType)theEObject;
			T result = caseLastUpdateDateType(lastUpdateDateType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.LATE_FINISH_TYPE: {
			LateFinishType lateFinishType = (LateFinishType)theEObject;
			T result = caseLateFinishType(lateFinishType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.LATE_START_TYPE: {
			LateStartType lateStartType = (LateStartType)theEObject;
			T result = caseLateStartType(lateStartType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.LAYER_STYLES_TYPE: {
			LayerStylesType layerStylesType = (LayerStylesType)theEObject;
			T result = caseLayerStylesType(layerStylesType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.LETTER_SPACING_TYPE: {
			LetterSpacingType letterSpacingType = (LetterSpacingType)theEObject;
			T result = caseLetterSpacingType(letterSpacingType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.LIBRARY_REFERENCE_TYPE: {
			LibraryReferenceType libraryReferenceType = (LibraryReferenceType)theEObject;
			T result = caseLibraryReferenceType(libraryReferenceType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.LIGHT_COLOUR_TYPE: {
			LightColourType lightColourType = (LightColourType)theEObject;
			T result = caseLightColourType(lightColourType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.LIGHT_DISTRIBUTION_DATA_SOURCE_TYPE: {
			LightDistributionDataSourceType lightDistributionDataSourceType = (LightDistributionDataSourceType)theEObject;
			T result = caseLightDistributionDataSourceType(lightDistributionDataSourceType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.LINE_HEIGHT_TYPE: {
			LineHeightType lineHeightType = (LineHeightType)theEObject;
			T result = caseLineHeightType(lineHeightType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.LIST_VALUES_TYPE: {
			ListValuesType listValuesType = (ListValuesType)theEObject;
			T result = caseListValuesType(listValuesType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.LIST_VALUES_TYPE1: {
			ListValuesType1 listValuesType1 = (ListValuesType1)theEObject;
			T result = caseListValuesType1(listValuesType1);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.LIST_VALUES_TYPE2: {
			ListValuesType2 listValuesType2 = (ListValuesType2)theEObject;
			T result = caseListValuesType2(listValuesType2);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.LOADED_BY_TYPE: {
			LoadedByType loadedByType = (LoadedByType)theEObject;
			T result = caseLoadedByType(loadedByType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.LOCAL_ORIGIN_TYPE: {
			LocalOriginType localOriginType = (LocalOriginType)theEObject;
			T result = caseLocalOriginType(localOriginType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.LOCATION_AT_RELATED_ELEMENT_TYPE: {
			LocationAtRelatedElementType locationAtRelatedElementType = (LocationAtRelatedElementType)theEObject;
			T result = caseLocationAtRelatedElementType(locationAtRelatedElementType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.LOCATION_AT_RELATING_ELEMENT_TYPE: {
			LocationAtRelatingElementType locationAtRelatingElementType = (LocationAtRelatingElementType)theEObject;
			T result = caseLocationAtRelatingElementType(locationAtRelatingElementType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.LOCATION_OF_INTERACTION_TYPE: {
			LocationOfInteractionType locationOfInteractionType = (LocationOfInteractionType)theEObject;
			T result = caseLocationOfInteractionType(locationOfInteractionType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.LOCATION_TYPE: {
			LocationType locationType = (LocationType)theEObject;
			T result = caseLocationType(locationType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.LOOP_VERTEX_TYPE: {
			LoopVertexType loopVertexType = (LoopVertexType)theEObject;
			T result = caseLoopVertexType(loopVertexType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.LOWER_BOUND_VALUE_TYPE: {
			LowerBoundValueType lowerBoundValueType = (LowerBoundValueType)theEObject;
			T result = caseLowerBoundValueType(lowerBoundValueType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.LOWER_VALUE_TYPE: {
			LowerValueType lowerValueType = (LowerValueType)theEObject;
			T result = caseLowerValueType(lowerValueType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.LUMINOUS_INTENSITY_TYPE: {
			LuminousIntensityType luminousIntensityType = (LuminousIntensityType)theEObject;
			T result = caseLuminousIntensityType(luminousIntensityType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.MAPPED_REPRESENTATION_TYPE: {
			MappedRepresentationType mappedRepresentationType = (MappedRepresentationType)theEObject;
			T result = caseMappedRepresentationType(mappedRepresentationType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.MAPPING_ORIGIN_TYPE: {
			MappingOriginType mappingOriginType = (MappingOriginType)theEObject;
			T result = caseMappingOriginType(mappingOriginType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.MAPPING_SOURCE_TYPE: {
			MappingSourceType mappingSourceType = (MappingSourceType)theEObject;
			T result = caseMappingSourceType(mappingSourceType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.MAPPING_TARGET_TYPE: {
			MappingTargetType mappingTargetType = (MappingTargetType)theEObject;
			T result = caseMappingTargetType(mappingTargetType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.MATERIAL_CLASSIFICATIONS_TYPE: {
			MaterialClassificationsType materialClassificationsType = (MaterialClassificationsType)theEObject;
			T result = caseMaterialClassificationsType(materialClassificationsType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.MATERIAL_LAYERS_TYPE: {
			MaterialLayersType materialLayersType = (MaterialLayersType)theEObject;
			T result = caseMaterialLayersType(materialLayersType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.MATERIALS_TYPE: {
			MaterialsType materialsType = (MaterialsType)theEObject;
			T result = caseMaterialsType(materialsType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.MATERIAL_TYPE: {
			MaterialType materialType = (MaterialType)theEObject;
			T result = caseMaterialType(materialType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.MATERIAL_TYPE1: {
			MaterialType1 materialType1 = (MaterialType1)theEObject;
			T result = caseMaterialType1(materialType1);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.MIDDLE_NAMES_TYPE: {
			MiddleNamesType middleNamesType = (MiddleNamesType)theEObject;
			T result = caseMiddleNamesType(middleNamesType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.MOST_USED_VALUE_TYPE: {
			MostUsedValueType mostUsedValueType = (MostUsedValueType)theEObject;
			T result = caseMostUsedValueType(mostUsedValueType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.MOVE_FROM_TYPE: {
			MoveFromType moveFromType = (MoveFromType)theEObject;
			T result = caseMoveFromType(moveFromType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.MOVE_TO_TYPE: {
			MoveToType moveToType = (MoveToType)theEObject;
			T result = caseMoveToType(moveToType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.NOMINAL_VALUE_TYPE: {
			NominalValueType nominalValueType = (NominalValueType)theEObject;
			T result = caseNominalValueType(nominalValueType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.NOTATION_FACETS_TYPE: {
			NotationFacetsType notationFacetsType = (NotationFacetsType)theEObject;
			T result = caseNotationFacetsType(notationFacetsType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.NOTATION_TYPE: {
			NotationType notationType = (NotationType)theEObject;
			T result = caseNotationType(notationType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.OBJECT_PLACEMENT_TYPE: {
			ObjectPlacementType objectPlacementType = (ObjectPlacementType)theEObject;
			T result = caseObjectPlacementType(objectPlacementType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.OFFSET_DISTANCES_TYPE: {
			OffsetDistancesType offsetDistancesType = (OffsetDistancesType)theEObject;
			T result = caseOffsetDistancesType(offsetDistancesType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.OPERATOR_TYPE: {
			OperatorType operatorType = (OperatorType)theEObject;
			T result = caseOperatorType(operatorType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.ORIENTATION_OF2_DPLANE_TYPE: {
			OrientationOf2DPlaneType orientationOf2DPlaneType = (OrientationOf2DPlaneType)theEObject;
			T result = caseOrientationOf2DPlaneType(orientationOf2DPlaneType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.ORIENTATION_TYPE: {
			OrientationType orientationType = (OrientationType)theEObject;
			T result = caseOrientationType(orientationType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.ORIENTATION_TYPE1: {
			OrientationType1 orientationType1 = (OrientationType1)theEObject;
			T result = caseOrientationType1(orientationType1);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.ORIENTATION_TYPE2: {
			OrientationType2 orientationType2 = (OrientationType2)theEObject;
			T result = caseOrientationType2(orientationType2);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.ORIGINAL_VALUE_TYPE: {
			OriginalValueType originalValueType = (OriginalValueType)theEObject;
			T result = caseOriginalValueType(originalValueType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.ORIGINAL_VALUE_TYPE1: {
			OriginalValueType1 originalValueType1 = (OriginalValueType1)theEObject;
			T result = caseOriginalValueType1(originalValueType1);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.OUTER_BOUNDARY_TYPE: {
			OuterBoundaryType outerBoundaryType = (OuterBoundaryType)theEObject;
			T result = caseOuterBoundaryType(outerBoundaryType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.OUTER_BOUNDARY_TYPE1: {
			OuterBoundaryType1 outerBoundaryType1 = (OuterBoundaryType1)theEObject;
			T result = caseOuterBoundaryType1(outerBoundaryType1);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.OUTER_CURVE_TYPE: {
			OuterCurveType outerCurveType = (OuterCurveType)theEObject;
			T result = caseOuterCurveType(outerCurveType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.OUTER_TYPE: {
			OuterType outerType = (OuterType)theEObject;
			T result = caseOuterType(outerType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.OVERRIDING_PROPERTIES_TYPE: {
			OverridingPropertiesType overridingPropertiesType = (OverridingPropertiesType)theEObject;
			T result = caseOverridingPropertiesType(overridingPropertiesType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.OWNER_HISTORY_TYPE: {
			OwnerHistoryType ownerHistoryType = (OwnerHistoryType)theEObject;
			T result = caseOwnerHistoryType(ownerHistoryType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.OWNER_TYPE: {
			OwnerType ownerType = (OwnerType)theEObject;
			T result = caseOwnerType(ownerType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.OWNING_APPLICATION_TYPE: {
			OwningApplicationType owningApplicationType = (OwningApplicationType)theEObject;
			T result = caseOwningApplicationType(owningApplicationType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.OWNING_USER_TYPE: {
			OwningUserType owningUserType = (OwningUserType)theEObject;
			T result = caseOwningUserType(owningUserType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.PARAMETER_TYPE: {
			ParameterType parameterType = (ParameterType)theEObject;
			T result = caseParameterType(parameterType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.PARENT_CONTEXT_TYPE: {
			ParentContextType parentContextType = (ParentContextType)theEObject;
			T result = caseParentContextType(parentContextType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.PARENT_CURVE_TYPE: {
			ParentCurveType parentCurveType = (ParentCurveType)theEObject;
			T result = caseParentCurveType(parentCurveType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.PARENT_EDGE_TYPE: {
			ParentEdgeType parentEdgeType = (ParentEdgeType)theEObject;
			T result = caseParentEdgeType(parentEdgeType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.PARENT_PROFILE_TYPE: {
			ParentProfileType parentProfileType = (ParentProfileType)theEObject;
			T result = caseParentProfileType(parentProfileType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.PART_OF_PRODUCT_DEFINITION_SHAPE_TYPE: {
			PartOfProductDefinitionShapeType partOfProductDefinitionShapeType = (PartOfProductDefinitionShapeType)theEObject;
			T result = casePartOfProductDefinitionShapeType(partOfProductDefinitionShapeType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.PATTERN_LIST_TYPE: {
			PatternListType patternListType = (PatternListType)theEObject;
			T result = casePatternListType(patternListType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.PATTERN_START_TYPE: {
			PatternStartType patternStartType = (PatternStartType)theEObject;
			T result = casePatternStartType(patternStartType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.PIXEL_TYPE: {
			PixelType pixelType = (PixelType)theEObject;
			T result = casePixelType(pixelType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.PLACEMENT_LOCATION_TYPE: {
			PlacementLocationType placementLocationType = (PlacementLocationType)theEObject;
			T result = casePlacementLocationType(placementLocationType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.PLACEMENT_REF_DIRECTION_TYPE: {
			PlacementRefDirectionType placementRefDirectionType = (PlacementRefDirectionType)theEObject;
			T result = casePlacementRefDirectionType(placementRefDirectionType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.PLACEMENT_REL_TO_TYPE: {
			PlacementRelToType placementRelToType = (PlacementRelToType)theEObject;
			T result = casePlacementRelToType(placementRelToType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.PLACEMENT_TYPE: {
			PlacementType placementType = (PlacementType)theEObject;
			T result = casePlacementType(placementType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.PLACEMENT_TYPE1: {
			PlacementType1 placementType1 = (PlacementType1)theEObject;
			T result = casePlacementType1(placementType1);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.PNT_TYPE: {
			PntType pntType = (PntType)theEObject;
			T result = casePntType(pntType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.POINT_OF_REFERENCE_HATCH_LINE_TYPE: {
			PointOfReferenceHatchLineType pointOfReferenceHatchLineType = (PointOfReferenceHatchLineType)theEObject;
			T result = casePointOfReferenceHatchLineType(pointOfReferenceHatchLineType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.POINT_ON_RELATED_ELEMENT_TYPE: {
			PointOnRelatedElementType pointOnRelatedElementType = (PointOnRelatedElementType)theEObject;
			T result = casePointOnRelatedElementType(pointOnRelatedElementType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.POINT_ON_RELATING_ELEMENT_TYPE: {
			PointOnRelatingElementType pointOnRelatingElementType = (PointOnRelatingElementType)theEObject;
			T result = casePointOnRelatingElementType(pointOnRelatingElementType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.POINTS_TYPE: {
			PointsType pointsType = (PointsType)theEObject;
			T result = casePointsType(pointsType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.POLYGONAL_BOUNDARY_TYPE: {
			PolygonalBoundaryType polygonalBoundaryType = (PolygonalBoundaryType)theEObject;
			T result = casePolygonalBoundaryType(polygonalBoundaryType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.POLYGON_TYPE: {
			PolygonType polygonType = (PolygonType)theEObject;
			T result = casePolygonType(polygonType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.POSITION_TYPE: {
			PositionType positionType = (PositionType)theEObject;
			T result = casePositionType(positionType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.POSITION_TYPE1: {
			PositionType1 positionType1 = (PositionType1)theEObject;
			T result = casePositionType1(positionType1);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.POSITION_TYPE2: {
			PositionType2 positionType2 = (PositionType2)theEObject;
			T result = casePositionType2(positionType2);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.POSITION_TYPE3: {
			PositionType3 positionType3 = (PositionType3)theEObject;
			T result = casePositionType3(positionType3);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.POSITION_TYPE4: {
			PositionType4 positionType4 = (PositionType4)theEObject;
			T result = casePositionType4(positionType4);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.POSITION_TYPE5: {
			PositionType5 positionType5 = (PositionType5)theEObject;
			T result = casePositionType5(positionType5);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.POSITION_TYPE6: {
			PositionType6 positionType6 = (PositionType6)theEObject;
			T result = casePositionType6(positionType6);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.POSITION_TYPE7: {
			PositionType7 positionType7 = (PositionType7)theEObject;
			T result = casePositionType7(positionType7);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.POSITION_TYPE8: {
			PositionType8 positionType8 = (PositionType8)theEObject;
			T result = casePositionType8(positionType8);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.PREFIX_TITLES_TYPE: {
			PrefixTitlesType prefixTitlesType = (PrefixTitlesType)theEObject;
			T result = casePrefixTitlesType(prefixTitlesType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.PREPARED_BY_TYPE: {
			PreparedByType preparedByType = (PreparedByType)theEObject;
			T result = casePreparedByType(preparedByType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.PRESSURE_TIME_SERIES_TYPE: {
			PressureTimeSeriesType pressureTimeSeriesType = (PressureTimeSeriesType)theEObject;
			T result = casePressureTimeSeriesType(pressureTimeSeriesType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.PROFILE_DEFINITION_TYPE: {
			ProfileDefinitionType profileDefinitionType = (ProfileDefinitionType)theEObject;
			T result = caseProfileDefinitionType(profileDefinitionType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.PROFILE_OF_PORT_TYPE: {
			ProfileOfPortType profileOfPortType = (ProfileOfPortType)theEObject;
			T result = caseProfileOfPortType(profileOfPortType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.PROFILE_ORIENTATION_TYPE: {
			ProfileOrientationType profileOrientationType = (ProfileOrientationType)theEObject;
			T result = caseProfileOrientationType(profileOrientationType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.PROFILE_SECTION_LOCATION_TYPE: {
			ProfileSectionLocationType profileSectionLocationType = (ProfileSectionLocationType)theEObject;
			T result = caseProfileSectionLocationType(profileSectionLocationType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.PROFILES_TYPE: {
			ProfilesType profilesType = (ProfilesType)theEObject;
			T result = caseProfilesType(profilesType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.PROPERTY_REFERENCE_TYPE: {
			PropertyReferenceType propertyReferenceType = (PropertyReferenceType)theEObject;
			T result = casePropertyReferenceType(propertyReferenceType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.PUBLISHER_TYPE: {
			PublisherType publisherType = (PublisherType)theEObject;
			T result = casePublisherType(publisherType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.PUNCH_LIST_TYPE: {
			PunchListType punchListType = (PunchListType)theEObject;
			T result = casePunchListType(punchListType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.QUANTITIES_TYPE: {
			QuantitiesType quantitiesType = (QuantitiesType)theEObject;
			T result = caseQuantitiesType(quantitiesType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.QUANTITY_IN_PROCESS_TYPE: {
			QuantityInProcessType quantityInProcessType = (QuantityInProcessType)theEObject;
			T result = caseQuantityInProcessType(quantityInProcessType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.RATE_DATE_TIME_TYPE: {
			RateDateTimeType rateDateTimeType = (RateDateTimeType)theEObject;
			T result = caseRateDateTimeType(rateDateTimeType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.RATE_SOURCE_TYPE: {
			RateSourceType rateSourceType = (RateSourceType)theEObject;
			T result = caseRateSourceType(rateSourceType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.REALIZING_ELEMENTS_TYPE: {
			RealizingElementsType realizingElementsType = (RealizingElementsType)theEObject;
			T result = caseRealizingElementsType(realizingElementsType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.REALIZING_ELEMENT_TYPE: {
			RealizingElementType realizingElementType = (RealizingElementType)theEObject;
			T result = caseRealizingElementType(realizingElementType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.RECORDS_TYPE: {
			RecordsType recordsType = (RecordsType)theEObject;
			T result = caseRecordsType(recordsType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.REF_DIRECTION_TYPE: {
			RefDirectionType refDirectionType = (RefDirectionType)theEObject;
			T result = caseRefDirectionType(refDirectionType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.REF_DIRECTION_TYPE1: {
			RefDirectionType1 refDirectionType1 = (RefDirectionType1)theEObject;
			T result = caseRefDirectionType1(refDirectionType1);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.REF_DIRECTION_TYPE2: {
			RefDirectionType2 refDirectionType2 = (RefDirectionType2)theEObject;
			T result = caseRefDirectionType2(refDirectionType2);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.REFERENCED_DOCUMENT_TYPE: {
			ReferencedDocumentType referencedDocumentType = (ReferencedDocumentType)theEObject;
			T result = caseReferencedDocumentType(referencedDocumentType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.REFERENCED_SOURCE_TYPE: {
			ReferencedSourceType referencedSourceType = (ReferencedSourceType)theEObject;
			T result = caseReferencedSourceType(referencedSourceType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.REFERENCED_TIME_SERIES_TYPE: {
			ReferencedTimeSeriesType referencedTimeSeriesType = (ReferencedTimeSeriesType)theEObject;
			T result = caseReferencedTimeSeriesType(referencedTimeSeriesType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.REFERENCE_SURFACE_TYPE: {
			ReferenceSurfaceType referenceSurfaceType = (ReferenceSurfaceType)theEObject;
			T result = caseReferenceSurfaceType(referenceSurfaceType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.REFERENCING_VALUES_TYPE: {
			ReferencingValuesType referencingValuesType = (ReferencingValuesType)theEObject;
			T result = caseReferencingValuesType(referencingValuesType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.REFLECTANCE_COLOUR_TYPE: {
			ReflectanceColourType reflectanceColourType = (ReflectanceColourType)theEObject;
			T result = caseReflectanceColourType(reflectanceColourType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.REFLECTION_COLOUR_TYPE: {
			ReflectionColourType reflectionColourType = (ReflectionColourType)theEObject;
			T result = caseReflectionColourType(reflectionColourType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.REINFORCEMENT_SECTION_DEFINITIONS_TYPE: {
			ReinforcementSectionDefinitionsType reinforcementSectionDefinitionsType = (ReinforcementSectionDefinitionsType)theEObject;
			T result = caseReinforcementSectionDefinitionsType(reinforcementSectionDefinitionsType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.RELATED_APPROVAL_TYPE: {
			RelatedApprovalType relatedApprovalType = (RelatedApprovalType)theEObject;
			T result = caseRelatedApprovalType(relatedApprovalType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.RELATED_BUILDING_ELEMENT_TYPE: {
			RelatedBuildingElementType relatedBuildingElementType = (RelatedBuildingElementType)theEObject;
			T result = caseRelatedBuildingElementType(relatedBuildingElementType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.RELATED_BUILDING_ELEMENT_TYPE1: {
			RelatedBuildingElementType1 relatedBuildingElementType1 = (RelatedBuildingElementType1)theEObject;
			T result = caseRelatedBuildingElementType1(relatedBuildingElementType1);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.RELATED_BUILDINGS_TYPE: {
			RelatedBuildingsType relatedBuildingsType = (RelatedBuildingsType)theEObject;
			T result = caseRelatedBuildingsType(relatedBuildingsType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.RELATED_CLASSIFICATIONS_TYPE: {
			RelatedClassificationsType relatedClassificationsType = (RelatedClassificationsType)theEObject;
			T result = caseRelatedClassificationsType(relatedClassificationsType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.RELATED_CONSTRAINTS_TYPE: {
			RelatedConstraintsType relatedConstraintsType = (RelatedConstraintsType)theEObject;
			T result = caseRelatedConstraintsType(relatedConstraintsType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.RELATED_CONSTRAINTS_TYPE1: {
			RelatedConstraintsType1 relatedConstraintsType1 = (RelatedConstraintsType1)theEObject;
			T result = caseRelatedConstraintsType1(relatedConstraintsType1);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.RELATED_CONTROL_ELEMENTS_TYPE: {
			RelatedControlElementsType relatedControlElementsType = (RelatedControlElementsType)theEObject;
			T result = caseRelatedControlElementsType(relatedControlElementsType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.RELATED_COVERINGS_TYPE: {
			RelatedCoveringsType relatedCoveringsType = (RelatedCoveringsType)theEObject;
			T result = caseRelatedCoveringsType(relatedCoveringsType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.RELATED_COVERINGS_TYPE1: {
			RelatedCoveringsType1 relatedCoveringsType1 = (RelatedCoveringsType1)theEObject;
			T result = caseRelatedCoveringsType1(relatedCoveringsType1);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.RELATED_DOCUMENTS_TYPE: {
			RelatedDocumentsType relatedDocumentsType = (RelatedDocumentsType)theEObject;
			T result = caseRelatedDocumentsType(relatedDocumentsType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.RELATED_DRAUGHTING_CALLOUT_TYPE: {
			RelatedDraughtingCalloutType relatedDraughtingCalloutType = (RelatedDraughtingCalloutType)theEObject;
			T result = caseRelatedDraughtingCalloutType(relatedDraughtingCalloutType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.RELATED_ELEMENTS_TYPE: {
			RelatedElementsType relatedElementsType = (RelatedElementsType)theEObject;
			T result = caseRelatedElementsType(relatedElementsType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.RELATED_ELEMENTS_TYPE1: {
			RelatedElementsType1 relatedElementsType1 = (RelatedElementsType1)theEObject;
			T result = caseRelatedElementsType1(relatedElementsType1);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.RELATED_ELEMENT_TYPE: {
			RelatedElementType relatedElementType = (RelatedElementType)theEObject;
			T result = caseRelatedElementType(relatedElementType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.RELATED_ELEMENT_TYPE1: {
			RelatedElementType1 relatedElementType1 = (RelatedElementType1)theEObject;
			T result = caseRelatedElementType1(relatedElementType1);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.RELATED_FEATURE_ELEMENT_TYPE: {
			RelatedFeatureElementType relatedFeatureElementType = (RelatedFeatureElementType)theEObject;
			T result = caseRelatedFeatureElementType(relatedFeatureElementType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.RELATED_ITEMS_TYPE: {
			RelatedItemsType relatedItemsType = (RelatedItemsType)theEObject;
			T result = caseRelatedItemsType(relatedItemsType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.RELATED_MONETARY_UNIT_TYPE: {
			RelatedMonetaryUnitType relatedMonetaryUnitType = (RelatedMonetaryUnitType)theEObject;
			T result = caseRelatedMonetaryUnitType(relatedMonetaryUnitType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.RELATED_OBJECTS_TYPE: {
			RelatedObjectsType relatedObjectsType = (RelatedObjectsType)theEObject;
			T result = caseRelatedObjectsType(relatedObjectsType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.RELATED_OBJECTS_TYPE1: {
			RelatedObjectsType1 relatedObjectsType1 = (RelatedObjectsType1)theEObject;
			T result = caseRelatedObjectsType1(relatedObjectsType1);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.RELATED_OBJECTS_TYPE2: {
			RelatedObjectsType2 relatedObjectsType2 = (RelatedObjectsType2)theEObject;
			T result = caseRelatedObjectsType2(relatedObjectsType2);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.RELATED_OBJECTS_TYPE3: {
			RelatedObjectsType3 relatedObjectsType3 = (RelatedObjectsType3)theEObject;
			T result = caseRelatedObjectsType3(relatedObjectsType3);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.RELATED_OPENING_ELEMENT_TYPE: {
			RelatedOpeningElementType relatedOpeningElementType = (RelatedOpeningElementType)theEObject;
			T result = caseRelatedOpeningElementType(relatedOpeningElementType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.RELATED_ORGANIZATIONS_TYPE: {
			RelatedOrganizationsType relatedOrganizationsType = (RelatedOrganizationsType)theEObject;
			T result = caseRelatedOrganizationsType(relatedOrganizationsType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.RELATED_PORT_TYPE: {
			RelatedPortType relatedPortType = (RelatedPortType)theEObject;
			T result = caseRelatedPortType(relatedPortType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.RELATED_PRIORITIES_TYPE: {
			RelatedPrioritiesType relatedPrioritiesType = (RelatedPrioritiesType)theEObject;
			T result = caseRelatedPrioritiesType(relatedPrioritiesType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.RELATED_PROCESS_TYPE: {
			RelatedProcessType relatedProcessType = (RelatedProcessType)theEObject;
			T result = caseRelatedProcessType(relatedProcessType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.RELATED_PROPERTIES_TYPE: {
			RelatedPropertiesType relatedPropertiesType = (RelatedPropertiesType)theEObject;
			T result = caseRelatedPropertiesType(relatedPropertiesType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.RELATED_SPACE_PROGRAM_TYPE: {
			RelatedSpaceProgramType relatedSpaceProgramType = (RelatedSpaceProgramType)theEObject;
			T result = caseRelatedSpaceProgramType(relatedSpaceProgramType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.RELATED_SPACE_TYPE: {
			RelatedSpaceType relatedSpaceType = (RelatedSpaceType)theEObject;
			T result = caseRelatedSpaceType(relatedSpaceType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.RELATED_STRUCTURAL_ACTIVITY_TYPE: {
			RelatedStructuralActivityType relatedStructuralActivityType = (RelatedStructuralActivityType)theEObject;
			T result = caseRelatedStructuralActivityType(relatedStructuralActivityType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.RELATED_STRUCTURAL_CONNECTION_TYPE: {
			RelatedStructuralConnectionType relatedStructuralConnectionType = (RelatedStructuralConnectionType)theEObject;
			T result = caseRelatedStructuralConnectionType(relatedStructuralConnectionType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.RELATED_STRUCTURAL_MEMBER_TYPE: {
			RelatedStructuralMemberType relatedStructuralMemberType = (RelatedStructuralMemberType)theEObject;
			T result = caseRelatedStructuralMemberType(relatedStructuralMemberType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.RELATING_ACTOR_TYPE: {
			RelatingActorType relatingActorType = (RelatingActorType)theEObject;
			T result = caseRelatingActorType(relatingActorType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.RELATING_APPLIED_VALUE_TYPE: {
			RelatingAppliedValueType relatingAppliedValueType = (RelatingAppliedValueType)theEObject;
			T result = caseRelatingAppliedValueType(relatingAppliedValueType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.RELATING_APPROVAL_TYPE: {
			RelatingApprovalType relatingApprovalType = (RelatingApprovalType)theEObject;
			T result = caseRelatingApprovalType(relatingApprovalType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.RELATING_APPROVAL_TYPE1: {
			RelatingApprovalType1 relatingApprovalType1 = (RelatingApprovalType1)theEObject;
			T result = caseRelatingApprovalType1(relatingApprovalType1);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.RELATING_BUILDING_ELEMENT_TYPE: {
			RelatingBuildingElementType relatingBuildingElementType = (RelatingBuildingElementType)theEObject;
			T result = caseRelatingBuildingElementType(relatingBuildingElementType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.RELATING_BUILDING_ELEMENT_TYPE1: {
			RelatingBuildingElementType1 relatingBuildingElementType1 = (RelatingBuildingElementType1)theEObject;
			T result = caseRelatingBuildingElementType1(relatingBuildingElementType1);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.RELATING_CLASSIFICATION_TYPE: {
			RelatingClassificationType relatingClassificationType = (RelatingClassificationType)theEObject;
			T result = caseRelatingClassificationType(relatingClassificationType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.RELATING_CONSTRAINT_TYPE: {
			RelatingConstraintType relatingConstraintType = (RelatingConstraintType)theEObject;
			T result = caseRelatingConstraintType(relatingConstraintType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.RELATING_CONSTRAINT_TYPE1: {
			RelatingConstraintType1 relatingConstraintType1 = (RelatingConstraintType1)theEObject;
			T result = caseRelatingConstraintType1(relatingConstraintType1);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.RELATING_CONSTRAINT_TYPE2: {
			RelatingConstraintType2 relatingConstraintType2 = (RelatingConstraintType2)theEObject;
			T result = caseRelatingConstraintType2(relatingConstraintType2);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.RELATING_CONSTRAINT_TYPE3: {
			RelatingConstraintType3 relatingConstraintType3 = (RelatingConstraintType3)theEObject;
			T result = caseRelatingConstraintType3(relatingConstraintType3);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.RELATING_CONTROL_TYPE: {
			RelatingControlType relatingControlType = (RelatingControlType)theEObject;
			T result = caseRelatingControlType(relatingControlType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.RELATING_DOCUMENT_TYPE: {
			RelatingDocumentType relatingDocumentType = (RelatingDocumentType)theEObject;
			T result = caseRelatingDocumentType(relatingDocumentType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.RELATING_DOCUMENT_TYPE1: {
			RelatingDocumentType1 relatingDocumentType1 = (RelatingDocumentType1)theEObject;
			T result = caseRelatingDocumentType1(relatingDocumentType1);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.RELATING_DRAUGHTING_CALLOUT_TYPE: {
			RelatingDraughtingCalloutType relatingDraughtingCalloutType = (RelatingDraughtingCalloutType)theEObject;
			T result = caseRelatingDraughtingCalloutType(relatingDraughtingCalloutType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.RELATING_ELEMENT_TYPE: {
			RelatingElementType relatingElementType = (RelatingElementType)theEObject;
			T result = caseRelatingElementType(relatingElementType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.RELATING_ELEMENT_TYPE1: {
			RelatingElementType1 relatingElementType1 = (RelatingElementType1)theEObject;
			T result = caseRelatingElementType1(relatingElementType1);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.RELATING_ELEMENT_TYPE2: {
			RelatingElementType2 relatingElementType2 = (RelatingElementType2)theEObject;
			T result = caseRelatingElementType2(relatingElementType2);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.RELATING_ELEMENT_TYPE3: {
			RelatingElementType3 relatingElementType3 = (RelatingElementType3)theEObject;
			T result = caseRelatingElementType3(relatingElementType3);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.RELATING_FLOW_ELEMENT_TYPE: {
			RelatingFlowElementType relatingFlowElementType = (RelatingFlowElementType)theEObject;
			T result = caseRelatingFlowElementType(relatingFlowElementType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.RELATING_GROUP_TYPE: {
			RelatingGroupType relatingGroupType = (RelatingGroupType)theEObject;
			T result = caseRelatingGroupType(relatingGroupType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.RELATING_ITEM_TYPE: {
			RelatingItemType relatingItemType = (RelatingItemType)theEObject;
			T result = caseRelatingItemType(relatingItemType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.RELATING_LIBRARY_TYPE: {
			RelatingLibraryType relatingLibraryType = (RelatingLibraryType)theEObject;
			T result = caseRelatingLibraryType(relatingLibraryType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.RELATING_MATERIAL_TYPE: {
			RelatingMaterialType relatingMaterialType = (RelatingMaterialType)theEObject;
			T result = caseRelatingMaterialType(relatingMaterialType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.RELATING_MONETARY_UNIT_TYPE: {
			RelatingMonetaryUnitType relatingMonetaryUnitType = (RelatingMonetaryUnitType)theEObject;
			T result = caseRelatingMonetaryUnitType(relatingMonetaryUnitType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.RELATING_OBJECT_TYPE: {
			RelatingObjectType relatingObjectType = (RelatingObjectType)theEObject;
			T result = caseRelatingObjectType(relatingObjectType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.RELATING_OPENING_ELEMENT_TYPE: {
			RelatingOpeningElementType relatingOpeningElementType = (RelatingOpeningElementType)theEObject;
			T result = caseRelatingOpeningElementType(relatingOpeningElementType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.RELATING_ORGANIZATION_TYPE: {
			RelatingOrganizationType relatingOrganizationType = (RelatingOrganizationType)theEObject;
			T result = caseRelatingOrganizationType(relatingOrganizationType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.RELATING_PORT_TYPE: {
			RelatingPortType relatingPortType = (RelatingPortType)theEObject;
			T result = caseRelatingPortType(relatingPortType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.RELATING_PORT_TYPE1: {
			RelatingPortType1 relatingPortType1 = (RelatingPortType1)theEObject;
			T result = caseRelatingPortType1(relatingPortType1);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.RELATING_PRIORITIES_TYPE: {
			RelatingPrioritiesType relatingPrioritiesType = (RelatingPrioritiesType)theEObject;
			T result = caseRelatingPrioritiesType(relatingPrioritiesType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.RELATING_PROCESS_TYPE: {
			RelatingProcessType relatingProcessType = (RelatingProcessType)theEObject;
			T result = caseRelatingProcessType(relatingProcessType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.RELATING_PROCESS_TYPE1: {
			RelatingProcessType1 relatingProcessType1 = (RelatingProcessType1)theEObject;
			T result = caseRelatingProcessType1(relatingProcessType1);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.RELATING_PRODUCT_TYPE: {
			RelatingProductType relatingProductType = (RelatingProductType)theEObject;
			T result = caseRelatingProductType(relatingProductType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.RELATING_PROFILE_PROPERTIES_TYPE: {
			RelatingProfilePropertiesType relatingProfilePropertiesType = (RelatingProfilePropertiesType)theEObject;
			T result = caseRelatingProfilePropertiesType(relatingProfilePropertiesType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.RELATING_PROPERTY_DEFINITION_TYPE: {
			RelatingPropertyDefinitionType relatingPropertyDefinitionType = (RelatingPropertyDefinitionType)theEObject;
			T result = caseRelatingPropertyDefinitionType(relatingPropertyDefinitionType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.RELATING_RESOURCE_TYPE: {
			RelatingResourceType relatingResourceType = (RelatingResourceType)theEObject;
			T result = caseRelatingResourceType(relatingResourceType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.RELATING_SPACE_PROGRAM_TYPE: {
			RelatingSpaceProgramType relatingSpaceProgramType = (RelatingSpaceProgramType)theEObject;
			T result = caseRelatingSpaceProgramType(relatingSpaceProgramType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.RELATING_SPACE_TYPE: {
			RelatingSpaceType relatingSpaceType = (RelatingSpaceType)theEObject;
			T result = caseRelatingSpaceType(relatingSpaceType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.RELATING_STRUCTURAL_MEMBER_TYPE: {
			RelatingStructuralMemberType relatingStructuralMemberType = (RelatingStructuralMemberType)theEObject;
			T result = caseRelatingStructuralMemberType(relatingStructuralMemberType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.RELATING_STRUCTURE_TYPE: {
			RelatingStructureType relatingStructureType = (RelatingStructureType)theEObject;
			T result = caseRelatingStructureType(relatingStructureType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.RELATING_STRUCTURE_TYPE1: {
			RelatingStructureType1 relatingStructureType1 = (RelatingStructureType1)theEObject;
			T result = caseRelatingStructureType1(relatingStructureType1);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.RELATING_SYSTEM_TYPE: {
			RelatingSystemType relatingSystemType = (RelatingSystemType)theEObject;
			T result = caseRelatingSystemType(relatingSystemType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.RELATING_TYPE_TYPE: {
			RelatingTypeType relatingTypeType = (RelatingTypeType)theEObject;
			T result = caseRelatingTypeType(relatingTypeType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.RELATIVE_PLACEMENT_TYPE: {
			RelativePlacementType relativePlacementType = (RelativePlacementType)theEObject;
			T result = caseRelativePlacementType(relativePlacementType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.RELAXATIONS_TYPE: {
			RelaxationsType relaxationsType = (RelaxationsType)theEObject;
			T result = caseRelaxationsType(relaxationsType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.REPEAT_FACTOR_TYPE: {
			RepeatFactorType repeatFactorType = (RepeatFactorType)theEObject;
			T result = caseRepeatFactorType(repeatFactorType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.REPRESENTATION_CONTEXTS_TYPE: {
			RepresentationContextsType representationContextsType = (RepresentationContextsType)theEObject;
			T result = caseRepresentationContextsType(representationContextsType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.REPRESENTATION_MAPS_TYPE: {
			RepresentationMapsType representationMapsType = (RepresentationMapsType)theEObject;
			T result = caseRepresentationMapsType(representationMapsType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.REPRESENTATIONS_TYPE: {
			RepresentationsType representationsType = (RepresentationsType)theEObject;
			T result = caseRepresentationsType(representationsType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.REPRESENTATION_TYPE: {
			RepresentationType representationType = (RepresentationType)theEObject;
			T result = caseRepresentationType(representationType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.REPRESENTED_MATERIAL_TYPE: {
			RepresentedMaterialType representedMaterialType = (RepresentedMaterialType)theEObject;
			T result = caseRepresentedMaterialType(representedMaterialType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.REQUESTED_LOCATION_TYPE: {
			RequestedLocationType requestedLocationType = (RequestedLocationType)theEObject;
			T result = caseRequestedLocationType(requestedLocationType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.RESPONSIBLE_PERSONS_TYPE: {
			ResponsiblePersonsType responsiblePersonsType = (ResponsiblePersonsType)theEObject;
			T result = caseResponsiblePersonsType(responsiblePersonsType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.RESPONSIBLE_PERSON_TYPE: {
			ResponsiblePersonType responsiblePersonType = (ResponsiblePersonType)theEObject;
			T result = caseResponsiblePersonType(responsiblePersonType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.RESULT_FOR_LOAD_GROUP_TYPE: {
			ResultForLoadGroupType resultForLoadGroupType = (ResultForLoadGroupType)theEObject;
			T result = caseResultForLoadGroupType(resultForLoadGroupType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.RESULT_VALUES_TYPE: {
			ResultValuesType resultValuesType = (ResultValuesType)theEObject;
			T result = caseResultValuesType(resultValuesType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.ROLES_TYPE: {
			RolesType rolesType = (RolesType)theEObject;
			T result = caseRolesType(rolesType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.ROLES_TYPE1: {
			RolesType1 rolesType1 = (RolesType1)theEObject;
			T result = caseRolesType1(rolesType1);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.ROLES_TYPE2: {
			RolesType2 rolesType2 = (RolesType2)theEObject;
			T result = caseRolesType2(rolesType2);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.ROLE_TYPE: {
			RoleType roleType = (RoleType)theEObject;
			T result = caseRoleType(roleType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.ROW_CELLS_TYPE: {
			RowCellsType rowCellsType = (RowCellsType)theEObject;
			T result = caseRowCellsType(rowCellsType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.ROWS_TYPE: {
			RowsType rowsType = (RowsType)theEObject;
			T result = caseRowsType(rowsType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.SBSM_BOUNDARY_TYPE: {
			SbsmBoundaryType sbsmBoundaryType = (SbsmBoundaryType)theEObject;
			T result = caseSbsmBoundaryType(sbsmBoundaryType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.SCHEDULE_FINISH_TYPE: {
			ScheduleFinishType scheduleFinishType = (ScheduleFinishType)theEObject;
			T result = caseScheduleFinishType(scheduleFinishType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.SCHEDULE_START_TYPE: {
			ScheduleStartType scheduleStartType = (ScheduleStartType)theEObject;
			T result = caseScheduleStartType(scheduleStartType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.SECONDARY_PLANE_ANGLE_TYPE: {
			SecondaryPlaneAngleType secondaryPlaneAngleType = (SecondaryPlaneAngleType)theEObject;
			T result = caseSecondaryPlaneAngleType(secondaryPlaneAngleType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.SECOND_OPERAND_TYPE: {
			SecondOperandType secondOperandType = (SecondOperandType)theEObject;
			T result = caseSecondOperandType(secondOperandType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.SECOND_REPEAT_FACTOR_TYPE: {
			SecondRepeatFactorType secondRepeatFactorType = (SecondRepeatFactorType)theEObject;
			T result = caseSecondRepeatFactorType(secondRepeatFactorType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.SECTION_DEFINITION_TYPE: {
			SectionDefinitionType sectionDefinitionType = (SectionDefinitionType)theEObject;
			T result = caseSectionDefinitionType(sectionDefinitionType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.SEGMENTS_TYPE: {
			SegmentsType segmentsType = (SegmentsType)theEObject;
			T result = caseSegmentsType(segmentsType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.SHAPE_ASPECT_STYLE_TYPE: {
			ShapeAspectStyleType shapeAspectStyleType = (ShapeAspectStyleType)theEObject;
			T result = caseShapeAspectStyleType(shapeAspectStyleType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.SHAPE_ASPECT_STYLE_TYPE1: {
			ShapeAspectStyleType1 shapeAspectStyleType1 = (ShapeAspectStyleType1)theEObject;
			T result = caseShapeAspectStyleType1(shapeAspectStyleType1);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.SHAPE_ASPECT_STYLE_TYPE2: {
			ShapeAspectStyleType2 shapeAspectStyleType2 = (ShapeAspectStyleType2)theEObject;
			T result = caseShapeAspectStyleType2(shapeAspectStyleType2);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.SHAPE_ASPECT_STYLE_TYPE3: {
			ShapeAspectStyleType3 shapeAspectStyleType3 = (ShapeAspectStyleType3)theEObject;
			T result = caseShapeAspectStyleType3(shapeAspectStyleType3);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.SHAPE_ASPECT_STYLE_TYPE4: {
			ShapeAspectStyleType4 shapeAspectStyleType4 = (ShapeAspectStyleType4)theEObject;
			T result = caseShapeAspectStyleType4(shapeAspectStyleType4);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.SHAPE_REPRESENTATIONS_TYPE: {
			ShapeRepresentationsType shapeRepresentationsType = (ShapeRepresentationsType)theEObject;
			T result = caseShapeRepresentationsType(shapeRepresentationsType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.SITE_ADDRESS_TYPE: {
			SiteAddressType siteAddressType = (SiteAddressType)theEObject;
			T result = caseSiteAddressType(siteAddressType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.SOUND_LEVEL_SINGLE_VALUE_TYPE: {
			SoundLevelSingleValueType soundLevelSingleValueType = (SoundLevelSingleValueType)theEObject;
			T result = caseSoundLevelSingleValueType(soundLevelSingleValueType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.SOUND_LEVEL_TIME_SERIES_TYPE: {
			SoundLevelTimeSeriesType soundLevelTimeSeriesType = (SoundLevelTimeSeriesType)theEObject;
			T result = caseSoundLevelTimeSeriesType(soundLevelTimeSeriesType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.SOUND_VALUES_TYPE: {
			SoundValuesType soundValuesType = (SoundValuesType)theEObject;
			T result = caseSoundValuesType(soundValuesType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.SPECULAR_COLOUR_TYPE: {
			SpecularColourType specularColourType = (SpecularColourType)theEObject;
			T result = caseSpecularColourType(specularColourType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.SPECULAR_HIGHLIGHT_TYPE: {
			SpecularHighlightType specularHighlightType = (SpecularHighlightType)theEObject;
			T result = caseSpecularHighlightType(specularHighlightType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.SPINE_CURVE_TYPE: {
			SpineCurveType spineCurveType = (SpineCurveType)theEObject;
			T result = caseSpineCurveType(spineCurveType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.START_OF_NEXT_HATCH_LINE_TYPE: {
			StartOfNextHatchLineType startOfNextHatchLineType = (StartOfNextHatchLineType)theEObject;
			T result = caseStartOfNextHatchLineType(startOfNextHatchLineType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.START_PROFILE_TYPE: {
			StartProfileType startProfileType = (StartProfileType)theEObject;
			T result = caseStartProfileType(startProfileType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.START_TIME_TYPE: {
			StartTimeType startTimeType = (StartTimeType)theEObject;
			T result = caseStartTimeType(startTimeType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.START_TIME_TYPE1: {
			StartTimeType1 startTimeType1 = (StartTimeType1)theEObject;
			T result = caseStartTimeType1(startTimeType1);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.STATUS_TIME_TYPE: {
			StatusTimeType statusTimeType = (StatusTimeType)theEObject;
			T result = caseStatusTimeType(statusTimeType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.STYLE_OF_SYMBOL_TYPE: {
			StyleOfSymbolType styleOfSymbolType = (StyleOfSymbolType)theEObject;
			T result = caseStyleOfSymbolType(styleOfSymbolType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.STYLES_TYPE: {
			StylesType stylesType = (StylesType)theEObject;
			T result = caseStylesType(stylesType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.STYLES_TYPE1: {
			StylesType1 stylesType1 = (StylesType1)theEObject;
			T result = caseStylesType1(stylesType1);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.STYLES_TYPE2: {
			StylesType2 stylesType2 = (StylesType2)theEObject;
			T result = caseStylesType2(stylesType2);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.SUB_CONTRACTOR_TYPE: {
			SubContractorType subContractorType = (SubContractorType)theEObject;
			T result = caseSubContractorType(subContractorType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.SUBMITTED_BY_TYPE: {
			SubmittedByType submittedByType = (SubmittedByType)theEObject;
			T result = caseSubmittedByType(submittedByType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.SUBMITTED_ON_TYPE: {
			SubmittedOnType submittedOnType = (SubmittedOnType)theEObject;
			T result = caseSubmittedOnType(submittedOnType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.SUBSEQUENT_APPLIED_LOADS_TYPE: {
			SubsequentAppliedLoadsType subsequentAppliedLoadsType = (SubsequentAppliedLoadsType)theEObject;
			T result = caseSubsequentAppliedLoadsType(subsequentAppliedLoadsType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.SUBSEQUENT_APPLIED_LOADS_TYPE1: {
			SubsequentAppliedLoadsType1 subsequentAppliedLoadsType1 = (SubsequentAppliedLoadsType1)theEObject;
			T result = caseSubsequentAppliedLoadsType1(subsequentAppliedLoadsType1);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.SUBSEQUENT_THICKNESS_TYPE: {
			SubsequentThicknessType subsequentThicknessType = (SubsequentThicknessType)theEObject;
			T result = caseSubsequentThicknessType(subsequentThicknessType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.SUFFIX_TITLES_TYPE: {
			SuffixTitlesType suffixTitlesType = (SuffixTitlesType)theEObject;
			T result = caseSuffixTitlesType(suffixTitlesType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.SUPPLIERS_TYPE: {
			SuppliersType suppliersType = (SuppliersType)theEObject;
			T result = caseSuppliersType(suppliersType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.SURFACE_COLOUR_TYPE: {
			SurfaceColourType surfaceColourType = (SurfaceColourType)theEObject;
			T result = caseSurfaceColourType(surfaceColourType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.SURFACE_ON_RELATED_ELEMENT_TYPE: {
			SurfaceOnRelatedElementType surfaceOnRelatedElementType = (SurfaceOnRelatedElementType)theEObject;
			T result = caseSurfaceOnRelatedElementType(surfaceOnRelatedElementType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.SURFACE_ON_RELATING_ELEMENT_TYPE: {
			SurfaceOnRelatingElementType surfaceOnRelatingElementType = (SurfaceOnRelatingElementType)theEObject;
			T result = caseSurfaceOnRelatingElementType(surfaceOnRelatingElementType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.SWEPT_AREA_TYPE: {
			SweptAreaType sweptAreaType = (SweptAreaType)theEObject;
			T result = caseSweptAreaType(sweptAreaType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.SWEPT_CURVE_TYPE: {
			SweptCurveType sweptCurveType = (SweptCurveType)theEObject;
			T result = caseSweptCurveType(sweptCurveType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.SYMBOL_TYPE: {
			SymbolType symbolType = (SymbolType)theEObject;
			T result = caseSymbolType(symbolType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.TARGET_TYPE: {
			TargetType targetType = (TargetType)theEObject;
			T result = caseTargetType(targetType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.TARGET_USERS_TYPE: {
			TargetUsersType targetUsersType = (TargetUsersType)theEObject;
			T result = caseTargetUsersType(targetUsersType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.TELEPHONE_NUMBERS_TYPE: {
			TelephoneNumbersType telephoneNumbersType = (TelephoneNumbersType)theEObject;
			T result = caseTelephoneNumbersType(telephoneNumbersType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.TEMPERATURE_TIME_SERIES_TYPE: {
			TemperatureTimeSeriesType temperatureTimeSeriesType = (TemperatureTimeSeriesType)theEObject;
			T result = caseTemperatureTimeSeriesType(temperatureTimeSeriesType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.TEXT_CHARACTER_APPEARANCE_TYPE: {
			TextCharacterAppearanceType textCharacterAppearanceType = (TextCharacterAppearanceType)theEObject;
			T result = caseTextCharacterAppearanceType(textCharacterAppearanceType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.TEXT_FONT_STYLE_TYPE: {
			TextFontStyleType textFontStyleType = (TextFontStyleType)theEObject;
			T result = caseTextFontStyleType(textFontStyleType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.TEXT_INDENT_TYPE: {
			TextIndentType textIndentType = (TextIndentType)theEObject;
			T result = caseTextIndentType(textIndentType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.TEXT_STYLE_TYPE: {
			TextStyleType textStyleType = (TextStyleType)theEObject;
			T result = caseTextStyleType(textStyleType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.TEXTURE_COORDINATES_TYPE: {
			TextureCoordinatesType textureCoordinatesType = (TextureCoordinatesType)theEObject;
			T result = caseTextureCoordinatesType(textureCoordinatesType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.TEXTURE_MAPS_TYPE: {
			TextureMapsType textureMapsType = (TextureMapsType)theEObject;
			T result = caseTextureMapsType(textureMapsType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.TEXTURE_POINTS_TYPE: {
			TexturePointsType texturePointsType = (TexturePointsType)theEObject;
			T result = caseTexturePointsType(texturePointsType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.TEXTURES_TYPE: {
			TexturesType texturesType = (TexturesType)theEObject;
			T result = caseTexturesType(texturesType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.TEXTURE_TRANSFORM_TYPE: {
			TextureTransformType textureTransformType = (TextureTransformType)theEObject;
			T result = caseTextureTransformType(textureTransformType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.TEXTURE_VERTICES_TYPE: {
			TextureVerticesType textureVerticesType = (TextureVerticesType)theEObject;
			T result = caseTextureVerticesType(textureVerticesType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.THE_ACTOR_TYPE: {
			TheActorType theActorType = (TheActorType)theEObject;
			T result = caseTheActorType(theActorType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.THE_ORGANIZATION_TYPE: {
			TheOrganizationType theOrganizationType = (TheOrganizationType)theEObject;
			T result = caseTheOrganizationType(theOrganizationType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.THE_PERSON_TYPE: {
			ThePersonType thePersonType = (ThePersonType)theEObject;
			T result = caseThePersonType(thePersonType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.THERMAL_LOAD_TIME_SERIES_VALUES_TYPE: {
			ThermalLoadTimeSeriesValuesType thermalLoadTimeSeriesValuesType = (ThermalLoadTimeSeriesValuesType)theEObject;
			T result = caseThermalLoadTimeSeriesValuesType(thermalLoadTimeSeriesValuesType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.TILES_TYPE: {
			TilesType tilesType = (TilesType)theEObject;
			T result = caseTilesType(tilesType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.TILING_PATTERN_TYPE: {
			TilingPatternType tilingPatternType = (TilingPatternType)theEObject;
			T result = caseTilingPatternType(tilingPatternType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.TIME_COMPONENT_TYPE: {
			TimeComponentType timeComponentType = (TimeComponentType)theEObject;
			T result = caseTimeComponentType(timeComponentType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.TIME_FOR_TASK_TYPE: {
			TimeForTaskType timeForTaskType = (TimeForTaskType)theEObject;
			T result = caseTimeForTaskType(timeForTaskType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.TIME_SERIES_REFERENCES_TYPE: {
			TimeSeriesReferencesType timeSeriesReferencesType = (TimeSeriesReferencesType)theEObject;
			T result = caseTimeSeriesReferencesType(timeSeriesReferencesType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.TIME_SERIES_TYPE: {
			TimeSeriesType timeSeriesType = (TimeSeriesType)theEObject;
			T result = caseTimeSeriesType(timeSeriesType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.TIME_STAMP_TYPE: {
			TimeStampType timeStampType = (TimeStampType)theEObject;
			T result = caseTimeStampType(timeStampType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.TOTAL_REPLACEMENT_COST_TYPE: {
			TotalReplacementCostType totalReplacementCostType = (TotalReplacementCostType)theEObject;
			T result = caseTotalReplacementCostType(totalReplacementCostType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.TRANSMISSION_COLOUR_TYPE: {
			TransmissionColourType transmissionColourType = (TransmissionColourType)theEObject;
			T result = caseTransmissionColourType(transmissionColourType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.TRANSMISSION_COLOUR_TYPE1: {
			TransmissionColourType1 transmissionColourType1 = (TransmissionColourType1)theEObject;
			T result = caseTransmissionColourType1(transmissionColourType1);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.TREE_ROOT_EXPRESSION_TYPE: {
			TreeRootExpressionType treeRootExpressionType = (TreeRootExpressionType)theEObject;
			T result = caseTreeRootExpressionType(treeRootExpressionType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.TRIM1_TYPE: {
			Trim1Type trim1Type = (Trim1Type)theEObject;
			T result = caseTrim1Type(trim1Type);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.TRIM2_TYPE: {
			Trim2Type trim2Type = (Trim2Type)theEObject;
			T result = caseTrim2Type(trim2Type);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.TRUE_NORTH_TYPE: {
			TrueNorthType trueNorthType = (TrueNorthType)theEObject;
			T result = caseTrueNorthType(trueNorthType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.UAXES_TYPE: {
			UAxesType uAxesType = (UAxesType)theEObject;
			T result = caseUAxesType(uAxesType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.UNIT_BASIS_TYPE: {
			UnitBasisType unitBasisType = (UnitBasisType)theEObject;
			T result = caseUnitBasisType(unitBasisType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.UNIT_COMPONENT_TYPE: {
			UnitComponentType unitComponentType = (UnitComponentType)theEObject;
			T result = caseUnitComponentType(unitComponentType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.UNITS_IN_CONTEXT_TYPE: {
			UnitsInContextType unitsInContextType = (UnitsInContextType)theEObject;
			T result = caseUnitsInContextType(unitsInContextType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.UNITS_TYPE: {
			UnitsType unitsType = (UnitsType)theEObject;
			T result = caseUnitsType(unitsType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.UNIT_TYPE: {
			UnitType unitType = (UnitType)theEObject;
			T result = caseUnitType(unitType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.UNIT_TYPE1: {
			UnitType1 unitType1 = (UnitType1)theEObject;
			T result = caseUnitType1(unitType1);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.UNIT_TYPE2: {
			UnitType2 unitType2 = (UnitType2)theEObject;
			T result = caseUnitType2(unitType2);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.UNIT_TYPE3: {
			UnitType3 unitType3 = (UnitType3)theEObject;
			T result = caseUnitType3(unitType3);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.UNIT_TYPE4: {
			UnitType4 unitType4 = (UnitType4)theEObject;
			T result = caseUnitType4(unitType4);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.UNIT_TYPE5: {
			UnitType5 unitType5 = (UnitType5)theEObject;
			T result = caseUnitType5(unitType5);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.UNIT_TYPE6: {
			UnitType6 unitType6 = (UnitType6)theEObject;
			T result = caseUnitType6(unitType6);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.UOS: {
			Uos uos = (Uos)theEObject;
			T result = caseUos(uos);
			if (result == null) result = caseCommon_Uos(uos);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.UPDATE_DATE_TYPE: {
			UpdateDateType updateDateType = (UpdateDateType)theEObject;
			T result = caseUpdateDateType(updateDateType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.UPPER_BOUND_VALUE_TYPE: {
			UpperBoundValueType upperBoundValueType = (UpperBoundValueType)theEObject;
			T result = caseUpperBoundValueType(upperBoundValueType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.UPPER_VALUE_TYPE: {
			UpperValueType upperValueType = (UpperValueType)theEObject;
			T result = caseUpperValueType(upperValueType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.USER_TYPE: {
			UserType userType = (UserType)theEObject;
			T result = caseUserType(userType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.VALID_FROM_TYPE: {
			ValidFromType validFromType = (ValidFromType)theEObject;
			T result = caseValidFromType(validFromType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.VALID_UNTIL_TYPE: {
			ValidUntilType validUntilType = (ValidUntilType)theEObject;
			T result = caseValidUntilType(validUntilType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.VALUE_COMPONENT_TYPE: {
			ValueComponentType valueComponentType = (ValueComponentType)theEObject;
			T result = caseValueComponentType(valueComponentType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.VALUES_TYPE: {
			ValuesType valuesType = (ValuesType)theEObject;
			T result = caseValuesType(valuesType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.VALUES_TYPE1: {
			ValuesType1 valuesType1 = (ValuesType1)theEObject;
			T result = caseValuesType1(valuesType1);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.VARYING_APPLIED_LOAD_LOCATION_TYPE: {
			VaryingAppliedLoadLocationType varyingAppliedLoadLocationType = (VaryingAppliedLoadLocationType)theEObject;
			T result = caseVaryingAppliedLoadLocationType(varyingAppliedLoadLocationType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.VARYING_APPLIED_LOAD_LOCATION_TYPE1: {
			VaryingAppliedLoadLocationType1 varyingAppliedLoadLocationType1 = (VaryingAppliedLoadLocationType1)theEObject;
			T result = caseVaryingAppliedLoadLocationType1(varyingAppliedLoadLocationType1);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.VARYING_THICKNESS_LOCATION_TYPE: {
			VaryingThicknessLocationType varyingThicknessLocationType = (VaryingThicknessLocationType)theEObject;
			T result = caseVaryingThicknessLocationType(varyingThicknessLocationType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.VAXES_TYPE: {
			VAxesType vAxesType = (VAxesType)theEObject;
			T result = caseVAxesType(vAxesType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.VELOCITY_TIME_SERIES_TYPE: {
			VelocityTimeSeriesType velocityTimeSeriesType = (VelocityTimeSeriesType)theEObject;
			T result = caseVelocityTimeSeriesType(velocityTimeSeriesType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.VERSION_DATE_TYPE: {
			VersionDateType versionDateType = (VersionDateType)theEObject;
			T result = caseVersionDateType(versionDateType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.VERTEX_GEOMETRY_TYPE: {
			VertexGeometryType vertexGeometryType = (VertexGeometryType)theEObject;
			T result = caseVertexGeometryType(vertexGeometryType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.VOIDS_TYPE: {
			VoidsType voidsType = (VoidsType)theEObject;
			T result = caseVoidsType(voidsType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.WAXES_TYPE: {
			WAxesType wAxesType = (WAxesType)theEObject;
			T result = caseWAxesType(wAxesType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.WEIGHTS_DATA_TYPE: {
			WeightsDataType weightsDataType = (WeightsDataType)theEObject;
			T result = caseWeightsDataType(weightsDataType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.WET_BULB_TEMPERATURE_TIME_SERIES_TYPE: {
			WetBulbTemperatureTimeSeriesType wetBulbTemperatureTimeSeriesType = (WetBulbTemperatureTimeSeriesType)theEObject;
			T result = caseWetBulbTemperatureTimeSeriesType(wetBulbTemperatureTimeSeriesType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.WORD_SPACING_TYPE: {
			WordSpacingType wordSpacingType = (WordSpacingType)theEObject;
			T result = caseWordSpacingType(wordSpacingType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.WORLD_COORDINATE_SYSTEM_TYPE: {
			WorldCoordinateSystemType worldCoordinateSystemType = (WorldCoordinateSystemType)theEObject;
			T result = caseWorldCoordinateSystemType(worldCoordinateSystemType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		case FinalPackage.ZONE_TYPE: {
			ZoneType zoneType = (ZoneType)theEObject;
			T result = caseZoneType(zoneType);
			if (result == null) result = defaultCase(theEObject);
			return result;
		}
		default: return defaultCase(theEObject);
		}
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Acting Role Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Acting Role Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseActingRoleType(ActingRoleType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Actor Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Actor Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseActorType(ActorType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Actual Finish Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Actual Finish Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseActualFinishType(ActualFinishType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Actual Start Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Actual Start Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseActualStartType(ActualStartType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Additional Conditions Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Additional Conditions Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseAdditionalConditionsType(AdditionalConditionsType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Addresses Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Addresses Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseAddressesType(AddressesType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Addresses Type1</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Addresses Type1</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseAddressesType1(AddressesType1 object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Address Lines Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Address Lines Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseAddressLinesType(AddressLinesType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Annotated Curve Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Annotated Curve Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseAnnotatedCurveType(AnnotatedCurveType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Applicable Dates Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Applicable Dates Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseApplicableDatesType(ApplicableDatesType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Applicable Date Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Applicable Date Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseApplicableDateType(ApplicableDateType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Application Developer Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Application Developer Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseApplicationDeveloperType(ApplicationDeveloperType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Applied Condition Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Applied Condition Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseAppliedConditionType(AppliedConditionType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Applied Condition Type1</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Applied Condition Type1</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseAppliedConditionType1(AppliedConditionType1 object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Applied Load Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Applied Load Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseAppliedLoadType(AppliedLoadType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Applied Value Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Applied Value Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseAppliedValueType(AppliedValueType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Approval Date Time Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Approval Date Time Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseApprovalDateTimeType(ApprovalDateTimeType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Approval Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Approval Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseApprovalType(ApprovalType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Approval Type1</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Approval Type1</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseApprovalType1(ApprovalType1 object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Approved Properties Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Approved Properties Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseApprovedPropertiesType(ApprovedPropertiesType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Assigned Items Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Assigned Items Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseAssignedItemsType(AssignedItemsType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Axis1 Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Axis1 Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseAxis1Type(Axis1Type object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Axis2 Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Axis2 Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseAxis2Type(Axis2Type object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Axis3 Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Axis3 Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseAxis3Type(Axis3Type object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Axis Curve Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Axis Curve Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseAxisCurveType(AxisCurveType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Axis Position Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Axis Position Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseAxisPositionType(AxisPositionType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Axis Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Axis Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseAxisType(AxisType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Axis Type1</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Axis Type1</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseAxisType1(AxisType1 object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Axis Type2</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Axis Type2</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseAxisType2(AxisType2 object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Background Colour Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Background Colour Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseBackgroundColourType(BackgroundColourType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Base Quantity Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Base Quantity Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseBaseQuantityType(BaseQuantityType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Base Surface Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Base Surface Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseBaseSurfaceType(BaseSurfaceType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Basis Curve Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Basis Curve Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseBasisCurveType(BasisCurveType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Basis Curve Type1</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Basis Curve Type1</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseBasisCurveType1(BasisCurveType1 object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Basis Curve Type2</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Basis Curve Type2</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseBasisCurveType2(BasisCurveType2 object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Basis Curve Type3</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Basis Curve Type3</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseBasisCurveType3(BasisCurveType3 object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Basis Surface Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Basis Surface Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseBasisSurfaceType(BasisSurfaceType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Basis Surface Type1</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Basis Surface Type1</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseBasisSurfaceType1(BasisSurfaceType1 object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Basis Surface Type2</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Basis Surface Type2</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseBasisSurfaceType2(BasisSurfaceType2 object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Benchmark Values Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Benchmark Values Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseBenchmarkValuesType(BenchmarkValuesType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Bounds Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Bounds Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseBoundsType(BoundsType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Bound Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Bound Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseBoundType(BoundType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Building Address Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Building Address Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseBuildingAddressType(BuildingAddressType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Caused By Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Caused By Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseCausedByType(CausedByType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Cfs Faces Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Cfs Faces Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseCfsFacesType(CfsFacesType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Character Spacing Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Character Spacing Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseCharacterSpacingType(CharacterSpacingType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Classified Constraint Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Classified Constraint Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseClassifiedConstraintType(ClassifiedConstraintType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Classified Material Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Classified Material Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseClassifiedMaterialType(ClassifiedMaterialType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Colour Appearance Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Colour Appearance Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseColourAppearanceType(ColourAppearanceType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Colour Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Colour Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseColourType(ColourType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Component Of Total Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Component Of Total Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseComponentOfTotalType(ComponentOfTotalType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Components Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Components Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseComponentsType(ComponentsType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Condition Coordinate System Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Condition Coordinate System Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseConditionCoordinateSystemType(ConditionCoordinateSystemType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Connection Constraint Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Connection Constraint Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseConnectionConstraintType(ConnectionConstraintType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Connection Geometry Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Connection Geometry Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseConnectionGeometryType(ConnectionGeometryType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Connection Geometry Type1</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Connection Geometry Type1</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseConnectionGeometryType1(ConnectionGeometryType1 object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Contents Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Contents Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseContentsType(ContentsType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Context Of Items Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Context Of Items Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseContextOfItemsType(ContextOfItemsType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Control Points List Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Control Points List Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseControlPointsListType(ControlPointsListType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Conversion Factor Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Conversion Factor Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseConversionFactorType(ConversionFactorType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Coordinates Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Coordinates Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseCoordinatesType(CoordinatesType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Coordinates Type1</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Coordinates Type1</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseCoordinatesType1(CoordinatesType1 object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Corner Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Corner Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseCornerType(CornerType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Creating Actor Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Creating Actor Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseCreatingActorType(CreatingActorType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Creation Date Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Creation Date Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseCreationDateType(CreationDateType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Creation Time Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Creation Time Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseCreationTimeType(CreationTimeType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Creation Time Type1</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Creation Time Type1</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseCreationTimeType1(CreationTimeType1 object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Creators Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Creators Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseCreatorsType(CreatorsType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Criterion Date Time Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Criterion Date Time Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseCriterionDateTimeType(CriterionDateTimeType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Criterion Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Criterion Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseCriterionType(CriterionType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Cross Section Positions Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Cross Section Positions Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseCrossSectionPositionsType(CrossSectionPositionsType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Cross Section Reinforcement Definitions Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Cross Section Reinforcement Definitions Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseCrossSectionReinforcementDefinitionsType(CrossSectionReinforcementDefinitionsType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Cross Sections Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Cross Sections Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseCrossSectionsType(CrossSectionsType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Current Value Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Current Value Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseCurrentValueType(CurrentValueType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Current Value Type1</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Current Value Type1</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseCurrentValueType1(CurrentValueType1 object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Curve Colour Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Curve Colour Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseCurveColourType(CurveColourType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Curve Font Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Curve Font Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseCurveFontType(CurveFontType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Curve Font Type1</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Curve Font Type1</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseCurveFontType1(CurveFontType1 object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Curve On Related Element Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Curve On Related Element Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseCurveOnRelatedElementType(CurveOnRelatedElementType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Curve On Relating Element Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Curve On Relating Element Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseCurveOnRelatingElementType(CurveOnRelatingElementType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Curve Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Curve Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseCurveType(CurveType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Curve Width Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Curve Width Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseCurveWidthType(CurveWidthType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Data Value Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Data Value Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseDataValueType(DataValueType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Date Component Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Date Component Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseDateComponentType(DateComponentType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Defined Unit Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Defined Unit Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseDefinedUnitType(DefinedUnitType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Defined Values Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Defined Values Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseDefinedValuesType(DefinedValuesType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Defining Unit Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Defining Unit Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseDefiningUnitType(DefiningUnitType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Defining Values Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Defining Values Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseDefiningValuesType(DefiningValuesType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Definition Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Definition Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseDefinitionType(DefinitionType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Dependant Property Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Dependant Property Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseDependantPropertyType(DependantPropertyType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Depending Property Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Depending Property Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseDependingPropertyType(DependingPropertyType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Depreciated Value Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Depreciated Value Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseDepreciatedValueType(DepreciatedValueType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Diffuse Colour Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Diffuse Colour Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseDiffuseColourType(DiffuseColourType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Diffuse Reflection Colour Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Diffuse Reflection Colour Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseDiffuseReflectionColourType(DiffuseReflectionColourType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Diffuse Transmission Colour Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Diffuse Transmission Colour Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseDiffuseTransmissionColourType(DiffuseTransmissionColourType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Diffuse Transmission Colour Type1</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Diffuse Transmission Colour Type1</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseDiffuseTransmissionColourType1(DiffuseTransmissionColourType1 object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Dimensions Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Dimensions Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseDimensionsType(DimensionsType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Direction Ratios Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Direction Ratios Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseDirectionRatiosType(DirectionRatiosType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Directrix Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Directrix Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseDirectrixType(DirectrixType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Directrix Type1</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Directrix Type1</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseDirectrixType1(DirectrixType1 object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Dir Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Dir Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseDirType(DirType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Distribution Data Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Distribution Data Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseDistributionDataType(DistributionDataType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Document Owner Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Document Owner Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseDocumentOwnerType(DocumentOwnerType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Document References Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Document References Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseDocumentReferencesType(DocumentReferencesType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Document Root</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Document Root</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseDocumentRoot(DocumentRoot object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Early Finish Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Early Finish Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseEarlyFinishType(EarlyFinishType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Early Start Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Early Start Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseEarlyStartType(EarlyStartType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Edge Element Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Edge Element Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseEdgeElementType(EdgeElementType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Edge End Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Edge End Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseEdgeEndType(EdgeEndType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Edge Geometry Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Edge Geometry Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseEdgeGeometryType(EdgeGeometryType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Edge List Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Edge List Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseEdgeListType(EdgeListType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Edge List Type1</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Edge List Type1</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseEdgeListType1(EdgeListType1 object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Edge Start Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Edge Start Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseEdgeStartType(EdgeStartType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Edition Date Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Edition Date Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseEditionDateType(EditionDateType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Editors Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Editors Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseEditorsType(EditorsType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Electronic Format Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Electronic Format Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseElectronicFormatType(ElectronicFormatType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Electronic Mail Addresses Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Electronic Mail Addresses Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseElectronicMailAddressesType(ElectronicMailAddressesType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Elements Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Elements Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseElementsType(ElementsType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Elements Type1</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Elements Type1</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseElementsType1(ElementsType1 object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Enclosure Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Enclosure Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseEnclosureType(EnclosureType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>End Profile Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>End Profile Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseEndProfileType(EndProfileType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>End Time Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>End Time Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseEndTimeType(EndTimeType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Enumeration Reference Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Enumeration Reference Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseEnumerationReferenceType(EnumerationReferenceType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Enumeration Values Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Enumeration Values Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseEnumerationValuesType(EnumerationValuesType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Enumeration Values Type1</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Enumeration Values Type1</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseEnumerationValuesType1(EnumerationValuesType1 object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Extended Properties Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Extended Properties Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseExtendedPropertiesType(ExtendedPropertiesType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Extent Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Extent Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseExtentType(ExtentType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Extruded Direction Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Extruded Direction Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseExtrudedDirectionType(ExtrudedDirectionType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Extruded Direction Type1</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Extruded Direction Type1</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseExtrudedDirectionType1(ExtrudedDirectionType1 object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Face Surface Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Face Surface Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseFaceSurfaceType(FaceSurfaceType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Facsimile Numbers Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Facsimile Numbers Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseFacsimileNumbersType(FacsimileNumbersType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Fbsm Faces Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Fbsm Faces Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseFbsmFacesType(FbsmFacesType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Fill Styles Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Fill Styles Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseFillStylesType(FillStylesType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Fill Style Target Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Fill Style Target Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseFillStyleTargetType(FillStyleTargetType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Finish Time Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Finish Time Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseFinishTimeType(FinishTimeType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>First Operand Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>First Operand Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseFirstOperandType(FirstOperandType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Fixed Until Date Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Fixed Until Date Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseFixedUntilDateType(FixedUntilDateType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Flow Condition Time Series Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Flow Condition Time Series Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseFlowConditionTimeSeriesType(FlowConditionTimeSeriesType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Flowrate Single Value Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Flowrate Single Value Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseFlowrateSingleValueType(FlowrateSingleValueType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Flowrate Time Series Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Flowrate Time Series Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseFlowrateTimeSeriesType(FlowrateTimeSeriesType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Fluid Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Fluid Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseFluidType(FluidType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Font Family Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Font Family Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseFontFamilyType(FontFamilyType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Font Size Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Font Size Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseFontSizeType(FontSizeType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>For Layer Set Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>For Layer Set Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseForLayerSetType(ForLayerSetType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Has Properties Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Has Properties Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseHasPropertiesType(HasPropertiesType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Has Properties Type1</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Has Properties Type1</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseHasPropertiesType1(HasPropertiesType1 object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Has Property Sets Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Has Property Sets Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseHasPropertySetsType(HasPropertySetsType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Has Quantities Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Has Quantities Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseHasQuantitiesType(HasQuantitiesType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Has Results Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Has Results Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseHasResultsType(HasResultsType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Hatch Line Appearance Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Hatch Line Appearance Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseHatchLineAppearanceType(HatchLineAppearanceType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc2 DComposite Curve</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc2 DComposite Curve</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfc2DCompositeCurve(Ifc2DCompositeCurve object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Absorbed Dose Measure Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Absorbed Dose Measure Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcAbsorbedDoseMeasureType(IfcAbsorbedDoseMeasureType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Acceleration Measure Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Acceleration Measure Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcAccelerationMeasureType(IfcAccelerationMeasureType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Action Request</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Action Request</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcActionRequest(IfcActionRequest object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Action Source Type Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Action Source Type Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcActionSourceTypeEnumType(IfcActionSourceTypeEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Action Type Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Action Type Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcActionTypeEnumType(IfcActionTypeEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Actor</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Actor</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcActor(IfcActor object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Actor Role</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Actor Role</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcActorRole(IfcActorRole object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Actor Select</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Actor Select</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcActorSelect(IfcActorSelect object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Actuator Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Actuator Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcActuatorType(IfcActuatorType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Actuator Type Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Actuator Type Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcActuatorTypeEnumType(IfcActuatorTypeEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Address</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Address</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcAddress(IfcAddress object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Address Type Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Address Type Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcAddressTypeEnumType(IfcAddressTypeEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Ahead Or Behind Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Ahead Or Behind Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcAheadOrBehindType(IfcAheadOrBehindType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Air Terminal Box Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Air Terminal Box Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcAirTerminalBoxType(IfcAirTerminalBoxType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Air Terminal Box Type Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Air Terminal Box Type Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcAirTerminalBoxTypeEnumType(IfcAirTerminalBoxTypeEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Air Terminal Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Air Terminal Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcAirTerminalType(IfcAirTerminalType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Air Terminal Type Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Air Terminal Type Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcAirTerminalTypeEnumType(IfcAirTerminalTypeEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Air To Air Heat Recovery Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Air To Air Heat Recovery Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcAirToAirHeatRecoveryType(IfcAirToAirHeatRecoveryType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Air To Air Heat Recovery Type Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Air To Air Heat Recovery Type Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcAirToAirHeatRecoveryTypeEnumType(IfcAirToAirHeatRecoveryTypeEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Alarm Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Alarm Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcAlarmType(IfcAlarmType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Alarm Type Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Alarm Type Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcAlarmTypeEnumType(IfcAlarmTypeEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Amount Of Substance Measure Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Amount Of Substance Measure Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcAmountOfSubstanceMeasureType(IfcAmountOfSubstanceMeasureType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Analysis Model Type Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Analysis Model Type Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcAnalysisModelTypeEnumType(IfcAnalysisModelTypeEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Analysis Theory Type Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Analysis Theory Type Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcAnalysisTheoryTypeEnumType(IfcAnalysisTheoryTypeEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Angular Dimension</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Angular Dimension</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcAngularDimension(IfcAngularDimension object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Angular Velocity Measure Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Angular Velocity Measure Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcAngularVelocityMeasureType(IfcAngularVelocityMeasureType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Annotation</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Annotation</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcAnnotation(IfcAnnotation object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Annotation Curve Occurrence</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Annotation Curve Occurrence</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcAnnotationCurveOccurrence(IfcAnnotationCurveOccurrence object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Annotation Fill Area</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Annotation Fill Area</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcAnnotationFillArea(IfcAnnotationFillArea object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Annotation Fill Area Occurrence</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Annotation Fill Area Occurrence</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcAnnotationFillAreaOccurrence(IfcAnnotationFillAreaOccurrence object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Annotation Occurrence</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Annotation Occurrence</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcAnnotationOccurrence(IfcAnnotationOccurrence object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Annotation Surface</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Annotation Surface</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcAnnotationSurface(IfcAnnotationSurface object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Annotation Surface Occurrence</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Annotation Surface Occurrence</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcAnnotationSurfaceOccurrence(IfcAnnotationSurfaceOccurrence object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Annotation Symbol Occurrence</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Annotation Symbol Occurrence</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcAnnotationSymbolOccurrence(IfcAnnotationSymbolOccurrence object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Annotation Text Occurrence</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Annotation Text Occurrence</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcAnnotationTextOccurrence(IfcAnnotationTextOccurrence object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Application</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Application</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcApplication(IfcApplication object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Applied Value</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Applied Value</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcAppliedValue(IfcAppliedValue object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Applied Value Relationship</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Applied Value Relationship</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcAppliedValueRelationship(IfcAppliedValueRelationship object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Applied Value Select</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Applied Value Select</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcAppliedValueSelect(IfcAppliedValueSelect object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Approval</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Approval</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcApproval(IfcApproval object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Approval Actor Relationship</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Approval Actor Relationship</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcApprovalActorRelationship(IfcApprovalActorRelationship object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Approval Property Relationship</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Approval Property Relationship</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcApprovalPropertyRelationship(IfcApprovalPropertyRelationship object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Approval Relationship</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Approval Relationship</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcApprovalRelationship(IfcApprovalRelationship object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Arbitrary Closed Profile Def</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Arbitrary Closed Profile Def</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcArbitraryClosedProfileDef(IfcArbitraryClosedProfileDef object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Arbitrary Open Profile Def</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Arbitrary Open Profile Def</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcArbitraryOpenProfileDef(IfcArbitraryOpenProfileDef object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Arbitrary Profile Def With Voids</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Arbitrary Profile Def With Voids</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcArbitraryProfileDefWithVoids(IfcArbitraryProfileDefWithVoids object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Area Measure Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Area Measure Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcAreaMeasureType(IfcAreaMeasureType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Arithmetic Operator Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Arithmetic Operator Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcArithmeticOperatorEnumType(IfcArithmeticOperatorEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Assembly Place Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Assembly Place Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcAssemblyPlaceEnumType(IfcAssemblyPlaceEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Asset</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Asset</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcAsset(IfcAsset object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Asymmetric IShape Profile Def</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Asymmetric IShape Profile Def</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcAsymmetricIShapeProfileDef(IfcAsymmetricIShapeProfileDef object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Axis1 Placement</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Axis1 Placement</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcAxis1Placement(IfcAxis1Placement object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Axis2 Placement</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Axis2 Placement</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcAxis2Placement(IfcAxis2Placement object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Axis2 Placement2 D</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Axis2 Placement2 D</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcAxis2Placement2D(IfcAxis2Placement2D object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Axis2 Placement3 D</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Axis2 Placement3 D</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcAxis2Placement3D(IfcAxis2Placement3D object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Beam</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Beam</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcBeam(IfcBeam object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Beam Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Beam Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcBeamType(IfcBeamType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Beam Type Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Beam Type Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcBeamTypeEnumType(IfcBeamTypeEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Benchmark Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Benchmark Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcBenchmarkEnumType(IfcBenchmarkEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Bezier Curve</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Bezier Curve</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcBezierCurve(IfcBezierCurve object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Blob Texture</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Blob Texture</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcBlobTexture(IfcBlobTexture object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Block</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Block</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcBlock(IfcBlock object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Boiler Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Boiler Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcBoilerType(IfcBoilerType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Boiler Type Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Boiler Type Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcBoilerTypeEnumType(IfcBoilerTypeEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Boolean Clipping Result</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Boolean Clipping Result</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcBooleanClippingResult(IfcBooleanClippingResult object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Boolean Operand</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Boolean Operand</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcBooleanOperand(IfcBooleanOperand object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Boolean Operator Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Boolean Operator Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcBooleanOperatorType(IfcBooleanOperatorType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Boolean Result</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Boolean Result</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcBooleanResult(IfcBooleanResult object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Boolean Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Boolean Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcBooleanType(IfcBooleanType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Boundary Condition</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Boundary Condition</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcBoundaryCondition(IfcBoundaryCondition object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Boundary Edge Condition</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Boundary Edge Condition</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcBoundaryEdgeCondition(IfcBoundaryEdgeCondition object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Boundary Face Condition</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Boundary Face Condition</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcBoundaryFaceCondition(IfcBoundaryFaceCondition object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Boundary Node Condition</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Boundary Node Condition</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcBoundaryNodeCondition(IfcBoundaryNodeCondition object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Boundary Node Condition Warping</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Boundary Node Condition Warping</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcBoundaryNodeConditionWarping(IfcBoundaryNodeConditionWarping object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Bounded Curve</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Bounded Curve</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcBoundedCurve(IfcBoundedCurve object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Bounded Surface</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Bounded Surface</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcBoundedSurface(IfcBoundedSurface object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Bounding Box</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Bounding Box</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcBoundingBox(IfcBoundingBox object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Box Alignment Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Box Alignment Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcBoxAlignmentType(IfcBoxAlignmentType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Boxed Half Space</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Boxed Half Space</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcBoxedHalfSpace(IfcBoxedHalfSpace object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc BSpline Curve</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc BSpline Curve</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcBSplineCurve(IfcBSplineCurve object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc BSpline Curve Form Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc BSpline Curve Form Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcBSplineCurveFormType(IfcBSplineCurveFormType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Building</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Building</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcBuilding(IfcBuilding object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Building Element</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Building Element</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcBuildingElement(IfcBuildingElement object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Building Element Component</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Building Element Component</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcBuildingElementComponent(IfcBuildingElementComponent object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Building Element Part</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Building Element Part</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcBuildingElementPart(IfcBuildingElementPart object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Building Element Proxy</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Building Element Proxy</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcBuildingElementProxy(IfcBuildingElementProxy object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Building Element Proxy Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Building Element Proxy Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcBuildingElementProxyType(IfcBuildingElementProxyType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Building Element Proxy Type Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Building Element Proxy Type Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcBuildingElementProxyTypeEnumType(IfcBuildingElementProxyTypeEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Building Element Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Building Element Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcBuildingElementType(IfcBuildingElementType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Building Storey</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Building Storey</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcBuildingStorey(IfcBuildingStorey object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Cable Carrier Fitting Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Cable Carrier Fitting Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcCableCarrierFittingType(IfcCableCarrierFittingType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Cable Carrier Fitting Type Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Cable Carrier Fitting Type Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcCableCarrierFittingTypeEnumType(IfcCableCarrierFittingTypeEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Cable Carrier Segment Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Cable Carrier Segment Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcCableCarrierSegmentType(IfcCableCarrierSegmentType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Cable Carrier Segment Type Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Cable Carrier Segment Type Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcCableCarrierSegmentTypeEnumType(IfcCableCarrierSegmentTypeEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Cable Segment Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Cable Segment Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcCableSegmentType(IfcCableSegmentType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Cable Segment Type Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Cable Segment Type Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcCableSegmentTypeEnumType(IfcCableSegmentTypeEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Calendar Date</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Calendar Date</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcCalendarDate(IfcCalendarDate object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Cartesian Point</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Cartesian Point</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcCartesianPoint(IfcCartesianPoint object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Cartesian Transformation Operator</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Cartesian Transformation Operator</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcCartesianTransformationOperator(IfcCartesianTransformationOperator object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Cartesian Transformation Operator2 D</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Cartesian Transformation Operator2 D</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcCartesianTransformationOperator2D(IfcCartesianTransformationOperator2D object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Cartesian Transformation Operator2 Dnon Uniform</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Cartesian Transformation Operator2 Dnon Uniform</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcCartesianTransformationOperator2DnonUniform(IfcCartesianTransformationOperator2DnonUniform object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Cartesian Transformation Operator3 D</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Cartesian Transformation Operator3 D</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcCartesianTransformationOperator3D(IfcCartesianTransformationOperator3D object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Cartesian Transformation Operator3 Dnon Uniform</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Cartesian Transformation Operator3 Dnon Uniform</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcCartesianTransformationOperator3DnonUniform(IfcCartesianTransformationOperator3DnonUniform object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Center Line Profile Def</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Center Line Profile Def</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcCenterLineProfileDef(IfcCenterLineProfileDef object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Chamfer Edge Feature</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Chamfer Edge Feature</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcChamferEdgeFeature(IfcChamferEdgeFeature object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Change Action Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Change Action Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcChangeActionEnumType(IfcChangeActionEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Character Style Select</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Character Style Select</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcCharacterStyleSelect(IfcCharacterStyleSelect object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Chiller Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Chiller Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcChillerType(IfcChillerType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Chiller Type Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Chiller Type Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcChillerTypeEnumType(IfcChillerTypeEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Circle</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Circle</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcCircle(IfcCircle object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Circle Hollow Profile Def</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Circle Hollow Profile Def</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcCircleHollowProfileDef(IfcCircleHollowProfileDef object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Circle Profile Def</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Circle Profile Def</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcCircleProfileDef(IfcCircleProfileDef object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Classification</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Classification</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcClassification(IfcClassification object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Classification Item</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Classification Item</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcClassificationItem(IfcClassificationItem object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Classification Item Relationship</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Classification Item Relationship</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcClassificationItemRelationship(IfcClassificationItemRelationship object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Classification Notation</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Classification Notation</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcClassificationNotation(IfcClassificationNotation object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Classification Notation Facet</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Classification Notation Facet</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcClassificationNotationFacet(IfcClassificationNotationFacet object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Classification Notation Select</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Classification Notation Select</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcClassificationNotationSelect(IfcClassificationNotationSelect object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Classification Reference</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Classification Reference</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcClassificationReference(IfcClassificationReference object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Closed Shell</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Closed Shell</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcClosedShell(IfcClosedShell object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Coil Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Coil Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcCoilType(IfcCoilType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Coil Type Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Coil Type Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcCoilTypeEnumType(IfcCoilTypeEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Colour</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Colour</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcColour(IfcColour object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Colour Or Factor</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Colour Or Factor</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcColourOrFactor(IfcColourOrFactor object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Colour Rgb</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Colour Rgb</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcColourRgb(IfcColourRgb object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Colour Specification</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Colour Specification</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcColourSpecification(IfcColourSpecification object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Column</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Column</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcColumn(IfcColumn object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Column Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Column Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcColumnType(IfcColumnType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Column Type Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Column Type Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcColumnTypeEnumType(IfcColumnTypeEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Complex Number</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Complex Number</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcComplexNumber(IfcComplexNumber object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Complex Number Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Complex Number Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcComplexNumberType(IfcComplexNumberType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Complex Property</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Complex Property</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcComplexProperty(IfcComplexProperty object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Composite Curve</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Composite Curve</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcCompositeCurve(IfcCompositeCurve object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Composite Curve Segment</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Composite Curve Segment</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcCompositeCurveSegment(IfcCompositeCurveSegment object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Composite Profile Def</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Composite Profile Def</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcCompositeProfileDef(IfcCompositeProfileDef object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Compound Plane Angle Measure</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Compound Plane Angle Measure</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcCompoundPlaneAngleMeasure(IfcCompoundPlaneAngleMeasure object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Compound Plane Angle Measure Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Compound Plane Angle Measure Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcCompoundPlaneAngleMeasureType(IfcCompoundPlaneAngleMeasureType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Compressor Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Compressor Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcCompressorType(IfcCompressorType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Compressor Type Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Compressor Type Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcCompressorTypeEnumType(IfcCompressorTypeEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Condenser Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Condenser Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcCondenserType(IfcCondenserType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Condenser Type Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Condenser Type Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcCondenserTypeEnumType(IfcCondenserTypeEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Condition</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Condition</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcCondition(IfcCondition object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Condition Criterion</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Condition Criterion</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcConditionCriterion(IfcConditionCriterion object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Condition Criterion Select</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Condition Criterion Select</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcConditionCriterionSelect(IfcConditionCriterionSelect object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Conic</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Conic</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcConic(IfcConic object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Connected Face Set</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Connected Face Set</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcConnectedFaceSet(IfcConnectedFaceSet object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Connection Curve Geometry</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Connection Curve Geometry</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcConnectionCurveGeometry(IfcConnectionCurveGeometry object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Connection Geometry</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Connection Geometry</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcConnectionGeometry(IfcConnectionGeometry object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Connection Point Eccentricity</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Connection Point Eccentricity</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcConnectionPointEccentricity(IfcConnectionPointEccentricity object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Connection Point Geometry</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Connection Point Geometry</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcConnectionPointGeometry(IfcConnectionPointGeometry object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Connection Port Geometry</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Connection Port Geometry</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcConnectionPortGeometry(IfcConnectionPortGeometry object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Connection Surface Geometry</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Connection Surface Geometry</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcConnectionSurfaceGeometry(IfcConnectionSurfaceGeometry object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Connection Type Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Connection Type Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcConnectionTypeEnumType(IfcConnectionTypeEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Constraint</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Constraint</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcConstraint(IfcConstraint object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Constraint Aggregation Relationship</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Constraint Aggregation Relationship</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcConstraintAggregationRelationship(IfcConstraintAggregationRelationship object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Constraint Classification Relationship</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Constraint Classification Relationship</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcConstraintClassificationRelationship(IfcConstraintClassificationRelationship object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Constraint Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Constraint Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcConstraintEnumType(IfcConstraintEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Constraint Relationship</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Constraint Relationship</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcConstraintRelationship(IfcConstraintRelationship object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Construction Equipment Resource</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Construction Equipment Resource</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcConstructionEquipmentResource(IfcConstructionEquipmentResource object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Construction Material Resource</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Construction Material Resource</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcConstructionMaterialResource(IfcConstructionMaterialResource object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Construction Product Resource</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Construction Product Resource</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcConstructionProductResource(IfcConstructionProductResource object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Construction Resource</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Construction Resource</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcConstructionResource(IfcConstructionResource object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Context Dependent Measure Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Context Dependent Measure Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcContextDependentMeasureType(IfcContextDependentMeasureType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Context Dependent Unit</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Context Dependent Unit</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcContextDependentUnit(IfcContextDependentUnit object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Control</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Control</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcControl(IfcControl object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Controller Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Controller Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcControllerType(IfcControllerType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Controller Type Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Controller Type Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcControllerTypeEnumType(IfcControllerTypeEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Conversion Based Unit</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Conversion Based Unit</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcConversionBasedUnit(IfcConversionBasedUnit object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Cooled Beam Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Cooled Beam Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcCooledBeamType(IfcCooledBeamType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Cooled Beam Type Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Cooled Beam Type Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcCooledBeamTypeEnumType(IfcCooledBeamTypeEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Cooling Tower Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Cooling Tower Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcCoolingTowerType(IfcCoolingTowerType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Cooling Tower Type Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Cooling Tower Type Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcCoolingTowerTypeEnumType(IfcCoolingTowerTypeEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Coordinated Universal Time Offset</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Coordinated Universal Time Offset</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcCoordinatedUniversalTimeOffset(IfcCoordinatedUniversalTimeOffset object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Cost Item</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Cost Item</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcCostItem(IfcCostItem object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Cost Schedule</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Cost Schedule</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcCostSchedule(IfcCostSchedule object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Cost Schedule Type Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Cost Schedule Type Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcCostScheduleTypeEnumType(IfcCostScheduleTypeEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Cost Value</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Cost Value</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcCostValue(IfcCostValue object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Count Measure Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Count Measure Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcCountMeasureType(IfcCountMeasureType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Covering</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Covering</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcCovering(IfcCovering object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Covering Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Covering Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcCoveringType(IfcCoveringType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Covering Type Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Covering Type Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcCoveringTypeEnumType(IfcCoveringTypeEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Crane Rail AShape Profile Def</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Crane Rail AShape Profile Def</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcCraneRailAShapeProfileDef(IfcCraneRailAShapeProfileDef object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Crane Rail FShape Profile Def</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Crane Rail FShape Profile Def</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcCraneRailFShapeProfileDef(IfcCraneRailFShapeProfileDef object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Crew Resource</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Crew Resource</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcCrewResource(IfcCrewResource object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Csg Primitive3 D</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Csg Primitive3 D</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcCsgPrimitive3D(IfcCsgPrimitive3D object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Csg Select</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Csg Select</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcCsgSelect(IfcCsgSelect object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Csg Solid</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Csg Solid</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcCsgSolid(IfcCsgSolid object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc CShape Profile Def</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc CShape Profile Def</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcCShapeProfileDef(IfcCShapeProfileDef object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Currency Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Currency Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcCurrencyEnumType(IfcCurrencyEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Currency Relationship</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Currency Relationship</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcCurrencyRelationship(IfcCurrencyRelationship object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Curtain Wall</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Curtain Wall</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcCurtainWall(IfcCurtainWall object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Curtain Wall Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Curtain Wall Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcCurtainWallType(IfcCurtainWallType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Curtain Wall Type Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Curtain Wall Type Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcCurtainWallTypeEnumType(IfcCurtainWallTypeEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Curvature Measure Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Curvature Measure Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcCurvatureMeasureType(IfcCurvatureMeasureType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Curve</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Curve</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcCurve(IfcCurve object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Curve Bounded Plane</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Curve Bounded Plane</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcCurveBoundedPlane(IfcCurveBoundedPlane object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Curve Font Or Scaled Curve Font Select</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Curve Font Or Scaled Curve Font Select</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcCurveFontOrScaledCurveFontSelect(IfcCurveFontOrScaledCurveFontSelect object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Curve Or Edge Curve</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Curve Or Edge Curve</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcCurveOrEdgeCurve(IfcCurveOrEdgeCurve object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Curve Style</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Curve Style</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcCurveStyle(IfcCurveStyle object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Curve Style Font</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Curve Style Font</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcCurveStyleFont(IfcCurveStyleFont object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Curve Style Font And Scaling</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Curve Style Font And Scaling</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcCurveStyleFontAndScaling(IfcCurveStyleFontAndScaling object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Curve Style Font Pattern</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Curve Style Font Pattern</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcCurveStyleFontPattern(IfcCurveStyleFontPattern object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Curve Style Font Select</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Curve Style Font Select</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcCurveStyleFontSelect(IfcCurveStyleFontSelect object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Damper Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Damper Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcDamperType(IfcDamperType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Damper Type Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Damper Type Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcDamperTypeEnumType(IfcDamperTypeEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Data Origin Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Data Origin Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcDataOriginEnumType(IfcDataOriginEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Date And Time</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Date And Time</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcDateAndTime(IfcDateAndTime object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Date Time Select</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Date Time Select</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcDateTimeSelect(IfcDateTimeSelect object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Day In Month Number Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Day In Month Number Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcDayInMonthNumberType(IfcDayInMonthNumberType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Daylight Saving Hour Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Daylight Saving Hour Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcDaylightSavingHourType(IfcDaylightSavingHourType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Defined Symbol</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Defined Symbol</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcDefinedSymbol(IfcDefinedSymbol object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Defined Symbol Select</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Defined Symbol Select</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcDefinedSymbolSelect(IfcDefinedSymbolSelect object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Derived Measure Value</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Derived Measure Value</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcDerivedMeasureValue(IfcDerivedMeasureValue object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Derived Profile Def</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Derived Profile Def</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcDerivedProfileDef(IfcDerivedProfileDef object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Derived Unit</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Derived Unit</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcDerivedUnit(IfcDerivedUnit object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Derived Unit Element</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Derived Unit Element</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcDerivedUnitElement(IfcDerivedUnitElement object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Derived Unit Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Derived Unit Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcDerivedUnitEnumType(IfcDerivedUnitEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Descriptive Measure Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Descriptive Measure Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcDescriptiveMeasureType(IfcDescriptiveMeasureType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Diameter Dimension</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Diameter Dimension</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcDiameterDimension(IfcDiameterDimension object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Dimensional Exponents</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Dimensional Exponents</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcDimensionalExponents(IfcDimensionalExponents object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Dimension Callout Relationship</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Dimension Callout Relationship</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcDimensionCalloutRelationship(IfcDimensionCalloutRelationship object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Dimension Count Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Dimension Count Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcDimensionCountType(IfcDimensionCountType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Dimension Curve</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Dimension Curve</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcDimensionCurve(IfcDimensionCurve object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Dimension Curve Directed Callout</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Dimension Curve Directed Callout</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcDimensionCurveDirectedCallout(IfcDimensionCurveDirectedCallout object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Dimension Curve Terminator</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Dimension Curve Terminator</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcDimensionCurveTerminator(IfcDimensionCurveTerminator object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Dimension Extent Usage Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Dimension Extent Usage Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcDimensionExtentUsageType(IfcDimensionExtentUsageType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Dimension Pair</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Dimension Pair</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcDimensionPair(IfcDimensionPair object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Direction</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Direction</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcDirection(IfcDirection object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Direction Sense Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Direction Sense Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcDirectionSenseEnumType(IfcDirectionSenseEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Discrete Accessory</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Discrete Accessory</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcDiscreteAccessory(IfcDiscreteAccessory object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Discrete Accessory Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Discrete Accessory Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcDiscreteAccessoryType(IfcDiscreteAccessoryType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Distribution Chamber Element</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Distribution Chamber Element</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcDistributionChamberElement(IfcDistributionChamberElement object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Distribution Chamber Element Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Distribution Chamber Element Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcDistributionChamberElementType(IfcDistributionChamberElementType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Distribution Chamber Element Type Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Distribution Chamber Element Type Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcDistributionChamberElementTypeEnumType(IfcDistributionChamberElementTypeEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Distribution Control Element</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Distribution Control Element</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcDistributionControlElement(IfcDistributionControlElement object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Distribution Control Element Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Distribution Control Element Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcDistributionControlElementType(IfcDistributionControlElementType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Distribution Element</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Distribution Element</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcDistributionElement(IfcDistributionElement object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Distribution Element Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Distribution Element Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcDistributionElementType(IfcDistributionElementType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Distribution Flow Element</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Distribution Flow Element</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcDistributionFlowElement(IfcDistributionFlowElement object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Distribution Flow Element Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Distribution Flow Element Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcDistributionFlowElementType(IfcDistributionFlowElementType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Distribution Port</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Distribution Port</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcDistributionPort(IfcDistributionPort object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Document Confidentiality Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Document Confidentiality Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcDocumentConfidentialityEnumType(IfcDocumentConfidentialityEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Document Electronic Format</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Document Electronic Format</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcDocumentElectronicFormat(IfcDocumentElectronicFormat object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Document Information</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Document Information</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcDocumentInformation(IfcDocumentInformation object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Document Information Relationship</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Document Information Relationship</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcDocumentInformationRelationship(IfcDocumentInformationRelationship object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Document Reference</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Document Reference</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcDocumentReference(IfcDocumentReference object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Document Select</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Document Select</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcDocumentSelect(IfcDocumentSelect object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Document Status Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Document Status Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcDocumentStatusEnumType(IfcDocumentStatusEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Door</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Door</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcDoor(IfcDoor object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Door Lining Properties</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Door Lining Properties</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcDoorLiningProperties(IfcDoorLiningProperties object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Door Panel Operation Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Door Panel Operation Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcDoorPanelOperationEnumType(IfcDoorPanelOperationEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Door Panel Position Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Door Panel Position Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcDoorPanelPositionEnumType(IfcDoorPanelPositionEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Door Panel Properties</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Door Panel Properties</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcDoorPanelProperties(IfcDoorPanelProperties object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Door Style</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Door Style</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcDoorStyle(IfcDoorStyle object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Door Style Construction Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Door Style Construction Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcDoorStyleConstructionEnumType(IfcDoorStyleConstructionEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Door Style Operation Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Door Style Operation Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcDoorStyleOperationEnumType(IfcDoorStyleOperationEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Dose Equivalent Measure Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Dose Equivalent Measure Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcDoseEquivalentMeasureType(IfcDoseEquivalentMeasureType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Draughting Callout</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Draughting Callout</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcDraughtingCallout(IfcDraughtingCallout object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Draughting Callout Element</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Draughting Callout Element</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcDraughtingCalloutElement(IfcDraughtingCalloutElement object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Draughting Callout Relationship</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Draughting Callout Relationship</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcDraughtingCalloutRelationship(IfcDraughtingCalloutRelationship object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Draughting Pre Defined Colour</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Draughting Pre Defined Colour</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcDraughtingPreDefinedColour(IfcDraughtingPreDefinedColour object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Draughting Pre Defined Curve Font</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Draughting Pre Defined Curve Font</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcDraughtingPreDefinedCurveFont(IfcDraughtingPreDefinedCurveFont object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Draughting Pre Defined Text Font</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Draughting Pre Defined Text Font</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcDraughtingPreDefinedTextFont(IfcDraughtingPreDefinedTextFont object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Duct Fitting Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Duct Fitting Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcDuctFittingType(IfcDuctFittingType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Duct Fitting Type Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Duct Fitting Type Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcDuctFittingTypeEnumType(IfcDuctFittingTypeEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Duct Segment Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Duct Segment Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcDuctSegmentType(IfcDuctSegmentType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Duct Segment Type Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Duct Segment Type Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcDuctSegmentTypeEnumType(IfcDuctSegmentTypeEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Duct Silencer Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Duct Silencer Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcDuctSilencerType(IfcDuctSilencerType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Duct Silencer Type Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Duct Silencer Type Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcDuctSilencerTypeEnumType(IfcDuctSilencerTypeEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Dynamic Viscosity Measure Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Dynamic Viscosity Measure Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcDynamicViscosityMeasureType(IfcDynamicViscosityMeasureType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Edge</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Edge</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcEdge(IfcEdge object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Edge Curve</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Edge Curve</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcEdgeCurve(IfcEdgeCurve object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Edge Feature</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Edge Feature</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcEdgeFeature(IfcEdgeFeature object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Edge Loop</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Edge Loop</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcEdgeLoop(IfcEdgeLoop object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Electrical Base Properties</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Electrical Base Properties</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcElectricalBaseProperties(IfcElectricalBaseProperties object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Electrical Circuit</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Electrical Circuit</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcElectricalCircuit(IfcElectricalCircuit object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Electrical Element</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Electrical Element</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcElectricalElement(IfcElectricalElement object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Electric Appliance Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Electric Appliance Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcElectricApplianceType(IfcElectricApplianceType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Electric Appliance Type Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Electric Appliance Type Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcElectricApplianceTypeEnumType(IfcElectricApplianceTypeEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Electric Capacitance Measure Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Electric Capacitance Measure Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcElectricCapacitanceMeasureType(IfcElectricCapacitanceMeasureType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Electric Charge Measure Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Electric Charge Measure Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcElectricChargeMeasureType(IfcElectricChargeMeasureType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Electric Conductance Measure Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Electric Conductance Measure Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcElectricConductanceMeasureType(IfcElectricConductanceMeasureType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Electric Current Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Electric Current Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcElectricCurrentEnumType(IfcElectricCurrentEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Electric Current Measure Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Electric Current Measure Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcElectricCurrentMeasureType(IfcElectricCurrentMeasureType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Electric Distribution Point</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Electric Distribution Point</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcElectricDistributionPoint(IfcElectricDistributionPoint object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Electric Distribution Point Function Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Electric Distribution Point Function Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcElectricDistributionPointFunctionEnumType(IfcElectricDistributionPointFunctionEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Electric Flow Storage Device Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Electric Flow Storage Device Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcElectricFlowStorageDeviceType(IfcElectricFlowStorageDeviceType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Electric Flow Storage Device Type Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Electric Flow Storage Device Type Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcElectricFlowStorageDeviceTypeEnumType(IfcElectricFlowStorageDeviceTypeEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Electric Generator Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Electric Generator Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcElectricGeneratorType(IfcElectricGeneratorType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Electric Generator Type Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Electric Generator Type Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcElectricGeneratorTypeEnumType(IfcElectricGeneratorTypeEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Electric Heater Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Electric Heater Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcElectricHeaterType(IfcElectricHeaterType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Electric Heater Type Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Electric Heater Type Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcElectricHeaterTypeEnumType(IfcElectricHeaterTypeEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Electric Motor Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Electric Motor Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcElectricMotorType(IfcElectricMotorType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Electric Motor Type Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Electric Motor Type Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcElectricMotorTypeEnumType(IfcElectricMotorTypeEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Electric Resistance Measure Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Electric Resistance Measure Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcElectricResistanceMeasureType(IfcElectricResistanceMeasureType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Electric Time Control Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Electric Time Control Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcElectricTimeControlType(IfcElectricTimeControlType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Electric Time Control Type Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Electric Time Control Type Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcElectricTimeControlTypeEnumType(IfcElectricTimeControlTypeEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Electric Voltage Measure Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Electric Voltage Measure Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcElectricVoltageMeasureType(IfcElectricVoltageMeasureType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Element</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Element</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcElement(IfcElement object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Elementary Surface</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Elementary Surface</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcElementarySurface(IfcElementarySurface object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Element Assembly</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Element Assembly</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcElementAssembly(IfcElementAssembly object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Element Assembly Type Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Element Assembly Type Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcElementAssemblyTypeEnumType(IfcElementAssemblyTypeEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Element Component</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Element Component</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcElementComponent(IfcElementComponent object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Element Component Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Element Component Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcElementComponentType(IfcElementComponentType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Element Composition Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Element Composition Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcElementCompositionEnumType(IfcElementCompositionEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Element Quantity</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Element Quantity</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcElementQuantity(IfcElementQuantity object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Element Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Element Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcElementType(IfcElementType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Ellipse</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Ellipse</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcEllipse(IfcEllipse object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Ellipse Profile Def</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Ellipse Profile Def</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcEllipseProfileDef(IfcEllipseProfileDef object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Energy Conversion Device</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Energy Conversion Device</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcEnergyConversionDevice(IfcEnergyConversionDevice object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Energy Conversion Device Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Energy Conversion Device Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcEnergyConversionDeviceType(IfcEnergyConversionDeviceType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Energy Measure Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Energy Measure Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcEnergyMeasureType(IfcEnergyMeasureType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Energy Properties</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Energy Properties</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcEnergyProperties(IfcEnergyProperties object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Energy Sequence Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Energy Sequence Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcEnergySequenceEnumType(IfcEnergySequenceEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Environmental Impact Category Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Environmental Impact Category Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcEnvironmentalImpactCategoryEnumType(IfcEnvironmentalImpactCategoryEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Environmental Impact Value</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Environmental Impact Value</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcEnvironmentalImpactValue(IfcEnvironmentalImpactValue object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Equipment Element</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Equipment Element</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcEquipmentElement(IfcEquipmentElement object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Equipment Standard</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Equipment Standard</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcEquipmentStandard(IfcEquipmentStandard object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Evaporative Cooler Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Evaporative Cooler Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcEvaporativeCoolerType(IfcEvaporativeCoolerType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Evaporative Cooler Type Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Evaporative Cooler Type Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcEvaporativeCoolerTypeEnumType(IfcEvaporativeCoolerTypeEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Evaporator Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Evaporator Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcEvaporatorType(IfcEvaporatorType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Evaporator Type Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Evaporator Type Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcEvaporatorTypeEnumType(IfcEvaporatorTypeEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Extended Material Properties</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Extended Material Properties</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcExtendedMaterialProperties(IfcExtendedMaterialProperties object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Externally Defined Hatch Style</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Externally Defined Hatch Style</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcExternallyDefinedHatchStyle(IfcExternallyDefinedHatchStyle object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Externally Defined Surface Style</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Externally Defined Surface Style</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcExternallyDefinedSurfaceStyle(IfcExternallyDefinedSurfaceStyle object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Externally Defined Symbol</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Externally Defined Symbol</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcExternallyDefinedSymbol(IfcExternallyDefinedSymbol object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Externally Defined Text Font</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Externally Defined Text Font</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcExternallyDefinedTextFont(IfcExternallyDefinedTextFont object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc External Reference</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc External Reference</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcExternalReference(IfcExternalReference object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Extruded Area Solid</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Extruded Area Solid</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcExtrudedAreaSolid(IfcExtrudedAreaSolid object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Face</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Face</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcFace(IfcFace object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Face Based Surface Model</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Face Based Surface Model</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcFaceBasedSurfaceModel(IfcFaceBasedSurfaceModel object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Face Bound</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Face Bound</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcFaceBound(IfcFaceBound object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Face Outer Bound</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Face Outer Bound</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcFaceOuterBound(IfcFaceOuterBound object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Face Surface</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Face Surface</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcFaceSurface(IfcFaceSurface object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Faceted Brep</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Faceted Brep</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcFacetedBrep(IfcFacetedBrep object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Faceted Brep With Voids</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Faceted Brep With Voids</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcFacetedBrepWithVoids(IfcFacetedBrepWithVoids object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Failure Connection Condition</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Failure Connection Condition</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcFailureConnectionCondition(IfcFailureConnectionCondition object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Fan Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Fan Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcFanType(IfcFanType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Fan Type Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Fan Type Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcFanTypeEnumType(IfcFanTypeEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Fastener</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Fastener</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcFastener(IfcFastener object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Fastener Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Fastener Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcFastenerType(IfcFastenerType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Feature Element</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Feature Element</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcFeatureElement(IfcFeatureElement object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Feature Element Addition</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Feature Element Addition</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcFeatureElementAddition(IfcFeatureElementAddition object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Feature Element Subtraction</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Feature Element Subtraction</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcFeatureElementSubtraction(IfcFeatureElementSubtraction object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Fill Area Style</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Fill Area Style</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcFillAreaStyle(IfcFillAreaStyle object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Fill Area Style Hatching</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Fill Area Style Hatching</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcFillAreaStyleHatching(IfcFillAreaStyleHatching object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Fill Area Style Tiles</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Fill Area Style Tiles</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcFillAreaStyleTiles(IfcFillAreaStyleTiles object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Fill Area Style Tile Shape Select</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Fill Area Style Tile Shape Select</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcFillAreaStyleTileShapeSelect(IfcFillAreaStyleTileShapeSelect object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Fill Area Style Tile Symbol With Style</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Fill Area Style Tile Symbol With Style</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcFillAreaStyleTileSymbolWithStyle(IfcFillAreaStyleTileSymbolWithStyle object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Fill Style Select</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Fill Style Select</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcFillStyleSelect(IfcFillStyleSelect object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Filter Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Filter Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcFilterType(IfcFilterType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Filter Type Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Filter Type Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcFilterTypeEnumType(IfcFilterTypeEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Fire Suppression Terminal Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Fire Suppression Terminal Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcFireSuppressionTerminalType(IfcFireSuppressionTerminalType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Fire Suppression Terminal Type Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Fire Suppression Terminal Type Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcFireSuppressionTerminalTypeEnumType(IfcFireSuppressionTerminalTypeEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Flow Controller</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Flow Controller</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcFlowController(IfcFlowController object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Flow Controller Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Flow Controller Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcFlowControllerType(IfcFlowControllerType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Flow Direction Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Flow Direction Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcFlowDirectionEnumType(IfcFlowDirectionEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Flow Fitting</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Flow Fitting</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcFlowFitting(IfcFlowFitting object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Flow Fitting Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Flow Fitting Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcFlowFittingType(IfcFlowFittingType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Flow Instrument Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Flow Instrument Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcFlowInstrumentType(IfcFlowInstrumentType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Flow Instrument Type Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Flow Instrument Type Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcFlowInstrumentTypeEnumType(IfcFlowInstrumentTypeEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Flow Meter Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Flow Meter Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcFlowMeterType(IfcFlowMeterType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Flow Meter Type Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Flow Meter Type Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcFlowMeterTypeEnumType(IfcFlowMeterTypeEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Flow Moving Device</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Flow Moving Device</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcFlowMovingDevice(IfcFlowMovingDevice object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Flow Moving Device Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Flow Moving Device Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcFlowMovingDeviceType(IfcFlowMovingDeviceType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Flow Segment</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Flow Segment</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcFlowSegment(IfcFlowSegment object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Flow Segment Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Flow Segment Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcFlowSegmentType(IfcFlowSegmentType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Flow Storage Device</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Flow Storage Device</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcFlowStorageDevice(IfcFlowStorageDevice object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Flow Storage Device Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Flow Storage Device Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcFlowStorageDeviceType(IfcFlowStorageDeviceType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Flow Terminal</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Flow Terminal</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcFlowTerminal(IfcFlowTerminal object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Flow Terminal Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Flow Terminal Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcFlowTerminalType(IfcFlowTerminalType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Flow Treatment Device</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Flow Treatment Device</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcFlowTreatmentDevice(IfcFlowTreatmentDevice object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Flow Treatment Device Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Flow Treatment Device Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcFlowTreatmentDeviceType(IfcFlowTreatmentDeviceType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Fluid Flow Properties</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Fluid Flow Properties</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcFluidFlowProperties(IfcFluidFlowProperties object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Font Style Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Font Style Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcFontStyleType(IfcFontStyleType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Font Variant Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Font Variant Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcFontVariantType(IfcFontVariantType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Font Weight Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Font Weight Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcFontWeightType(IfcFontWeightType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Footing</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Footing</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcFooting(IfcFooting object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Footing Type Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Footing Type Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcFootingTypeEnumType(IfcFootingTypeEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Force Measure Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Force Measure Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcForceMeasureType(IfcForceMeasureType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Frequency Measure Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Frequency Measure Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcFrequencyMeasureType(IfcFrequencyMeasureType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Fuel Properties</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Fuel Properties</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcFuelProperties(IfcFuelProperties object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Furnishing Element</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Furnishing Element</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcFurnishingElement(IfcFurnishingElement object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Furnishing Element Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Furnishing Element Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcFurnishingElementType(IfcFurnishingElementType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Furniture Standard</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Furniture Standard</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcFurnitureStandard(IfcFurnitureStandard object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Furniture Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Furniture Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcFurnitureType(IfcFurnitureType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Gas Terminal Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Gas Terminal Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcGasTerminalType(IfcGasTerminalType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Gas Terminal Type Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Gas Terminal Type Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcGasTerminalTypeEnumType(IfcGasTerminalTypeEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc General Material Properties</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc General Material Properties</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcGeneralMaterialProperties(IfcGeneralMaterialProperties object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc General Profile Properties</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc General Profile Properties</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcGeneralProfileProperties(IfcGeneralProfileProperties object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Geometric Curve Set</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Geometric Curve Set</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcGeometricCurveSet(IfcGeometricCurveSet object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Geometric Projection Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Geometric Projection Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcGeometricProjectionEnumType(IfcGeometricProjectionEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Geometric Representation Context</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Geometric Representation Context</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcGeometricRepresentationContext(IfcGeometricRepresentationContext object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Geometric Representation Item</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Geometric Representation Item</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcGeometricRepresentationItem(IfcGeometricRepresentationItem object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Geometric Representation Sub Context</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Geometric Representation Sub Context</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcGeometricRepresentationSubContext(IfcGeometricRepresentationSubContext object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Geometric Representation Sub Context Temp</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Geometric Representation Sub Context Temp</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcGeometricRepresentationSubContextTemp(IfcGeometricRepresentationSubContextTemp object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Geometric Set</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Geometric Set</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcGeometricSet(IfcGeometricSet object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Geometric Set Select</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Geometric Set Select</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcGeometricSetSelect(IfcGeometricSetSelect object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Globally Unique Id Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Globally Unique Id Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcGloballyUniqueIdType(IfcGloballyUniqueIdType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Global Or Local Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Global Or Local Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcGlobalOrLocalEnumType(IfcGlobalOrLocalEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Grid</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Grid</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcGrid(IfcGrid object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Grid Axis</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Grid Axis</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcGridAxis(IfcGridAxis object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Grid Placement</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Grid Placement</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcGridPlacement(IfcGridPlacement object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Group</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Group</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcGroup(IfcGroup object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Half Space Solid</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Half Space Solid</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcHalfSpaceSolid(IfcHalfSpaceSolid object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Hatch Line Distance Select</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Hatch Line Distance Select</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcHatchLineDistanceSelect(IfcHatchLineDistanceSelect object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Heat Exchanger Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Heat Exchanger Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcHeatExchangerType(IfcHeatExchangerType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Heat Exchanger Type Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Heat Exchanger Type Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcHeatExchangerTypeEnumType(IfcHeatExchangerTypeEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Heat Flux Density Measure Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Heat Flux Density Measure Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcHeatFluxDensityMeasureType(IfcHeatFluxDensityMeasureType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Heating Value Measure Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Heating Value Measure Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcHeatingValueMeasureType(IfcHeatingValueMeasureType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Hour In Day Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Hour In Day Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcHourInDayType(IfcHourInDayType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Humidifier Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Humidifier Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcHumidifierType(IfcHumidifierType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Humidifier Type Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Humidifier Type Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcHumidifierTypeEnumType(IfcHumidifierTypeEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Hygroscopic Material Properties</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Hygroscopic Material Properties</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcHygroscopicMaterialProperties(IfcHygroscopicMaterialProperties object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Identifier Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Identifier Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcIdentifierType(IfcIdentifierType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Illuminance Measure Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Illuminance Measure Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcIlluminanceMeasureType(IfcIlluminanceMeasureType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Image Texture</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Image Texture</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcImageTexture(IfcImageTexture object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Inductance Measure Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Inductance Measure Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcInductanceMeasureType(IfcInductanceMeasureType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Integer Count Rate Measure Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Integer Count Rate Measure Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcIntegerCountRateMeasureType(IfcIntegerCountRateMeasureType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Integer Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Integer Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcIntegerType(IfcIntegerType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Internal Or External Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Internal Or External Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcInternalOrExternalEnumType(IfcInternalOrExternalEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Inventory</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Inventory</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcInventory(IfcInventory object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Inventory Type Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Inventory Type Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcInventoryTypeEnumType(IfcInventoryTypeEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Ion Concentration Measure Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Ion Concentration Measure Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcIonConcentrationMeasureType(IfcIonConcentrationMeasureType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Irregular Time Series</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Irregular Time Series</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcIrregularTimeSeries(IfcIrregularTimeSeries object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Irregular Time Series Value</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Irregular Time Series Value</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcIrregularTimeSeriesValue(IfcIrregularTimeSeriesValue object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc IShape Profile Def</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc IShape Profile Def</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcIShapeProfileDef(IfcIShapeProfileDef object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Isothermal Moisture Capacity Measure Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Isothermal Moisture Capacity Measure Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcIsothermalMoistureCapacityMeasureType(IfcIsothermalMoistureCapacityMeasureType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Junction Box Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Junction Box Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcJunctionBoxType(IfcJunctionBoxType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Junction Box Type Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Junction Box Type Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcJunctionBoxTypeEnumType(IfcJunctionBoxTypeEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Kinematic Viscosity Measure Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Kinematic Viscosity Measure Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcKinematicViscosityMeasureType(IfcKinematicViscosityMeasureType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Label Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Label Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcLabelType(IfcLabelType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Labor Resource</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Labor Resource</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcLaborResource(IfcLaborResource object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Lamp Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Lamp Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcLampType(IfcLampType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Lamp Type Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Lamp Type Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcLampTypeEnumType(IfcLampTypeEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Layered Item</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Layered Item</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcLayeredItem(IfcLayeredItem object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Layer Set Direction Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Layer Set Direction Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcLayerSetDirectionEnumType(IfcLayerSetDirectionEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Length Measure Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Length Measure Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcLengthMeasureType(IfcLengthMeasureType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Library Information</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Library Information</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcLibraryInformation(IfcLibraryInformation object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Library Reference</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Library Reference</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcLibraryReference(IfcLibraryReference object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Library Select</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Library Select</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcLibrarySelect(IfcLibrarySelect object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Light Distribution Curve Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Light Distribution Curve Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcLightDistributionCurveEnumType(IfcLightDistributionCurveEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Light Distribution Data</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Light Distribution Data</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcLightDistributionData(IfcLightDistributionData object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Light Distribution Data Source Select</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Light Distribution Data Source Select</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcLightDistributionDataSourceSelect(IfcLightDistributionDataSourceSelect object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Light Emission Source Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Light Emission Source Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcLightEmissionSourceEnumType(IfcLightEmissionSourceEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Light Fixture Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Light Fixture Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcLightFixtureType(IfcLightFixtureType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Light Fixture Type Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Light Fixture Type Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcLightFixtureTypeEnumType(IfcLightFixtureTypeEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Light Intensity Distribution</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Light Intensity Distribution</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcLightIntensityDistribution(IfcLightIntensityDistribution object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Light Source</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Light Source</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcLightSource(IfcLightSource object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Light Source Ambient</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Light Source Ambient</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcLightSourceAmbient(IfcLightSourceAmbient object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Light Source Directional</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Light Source Directional</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcLightSourceDirectional(IfcLightSourceDirectional object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Light Source Goniometric</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Light Source Goniometric</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcLightSourceGoniometric(IfcLightSourceGoniometric object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Light Source Positional</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Light Source Positional</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcLightSourcePositional(IfcLightSourcePositional object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Light Source Spot</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Light Source Spot</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcLightSourceSpot(IfcLightSourceSpot object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Line</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Line</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcLine(IfcLine object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Linear Dimension</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Linear Dimension</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcLinearDimension(IfcLinearDimension object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Linear Force Measure Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Linear Force Measure Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcLinearForceMeasureType(IfcLinearForceMeasureType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Linear Moment Measure Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Linear Moment Measure Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcLinearMomentMeasureType(IfcLinearMomentMeasureType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Linear Stiffness Measure Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Linear Stiffness Measure Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcLinearStiffnessMeasureType(IfcLinearStiffnessMeasureType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Linear Velocity Measure Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Linear Velocity Measure Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcLinearVelocityMeasureType(IfcLinearVelocityMeasureType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Load Group Type Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Load Group Type Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcLoadGroupTypeEnumType(IfcLoadGroupTypeEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Local Placement</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Local Placement</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcLocalPlacement(IfcLocalPlacement object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Local Time</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Local Time</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcLocalTime(IfcLocalTime object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Logical Operator Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Logical Operator Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcLogicalOperatorEnumType(IfcLogicalOperatorEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Logical Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Logical Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcLogicalType(IfcLogicalType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Loop</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Loop</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcLoop(IfcLoop object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc LShape Profile Def</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc LShape Profile Def</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcLShapeProfileDef(IfcLShapeProfileDef object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Luminous Flux Measure Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Luminous Flux Measure Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcLuminousFluxMeasureType(IfcLuminousFluxMeasureType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Luminous Intensity Distribution Measure Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Luminous Intensity Distribution Measure Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcLuminousIntensityDistributionMeasureType(IfcLuminousIntensityDistributionMeasureType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Luminous Intensity Measure Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Luminous Intensity Measure Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcLuminousIntensityMeasureType(IfcLuminousIntensityMeasureType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Magnetic Flux Density Measure Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Magnetic Flux Density Measure Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcMagneticFluxDensityMeasureType(IfcMagneticFluxDensityMeasureType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Magnetic Flux Measure Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Magnetic Flux Measure Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcMagneticFluxMeasureType(IfcMagneticFluxMeasureType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Manifold Solid Brep</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Manifold Solid Brep</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcManifoldSolidBrep(IfcManifoldSolidBrep object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Mapped Item</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Mapped Item</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcMappedItem(IfcMappedItem object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Mass Density Measure Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Mass Density Measure Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcMassDensityMeasureType(IfcMassDensityMeasureType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Mass Flow Rate Measure Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Mass Flow Rate Measure Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcMassFlowRateMeasureType(IfcMassFlowRateMeasureType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Mass Measure Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Mass Measure Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcMassMeasureType(IfcMassMeasureType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Mass Per Length Measure Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Mass Per Length Measure Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcMassPerLengthMeasureType(IfcMassPerLengthMeasureType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Material</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Material</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcMaterial(IfcMaterial object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Material Classification Relationship</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Material Classification Relationship</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcMaterialClassificationRelationship(IfcMaterialClassificationRelationship object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Material Definition Representation</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Material Definition Representation</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcMaterialDefinitionRepresentation(IfcMaterialDefinitionRepresentation object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Material Layer</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Material Layer</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcMaterialLayer(IfcMaterialLayer object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Material Layer Set</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Material Layer Set</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcMaterialLayerSet(IfcMaterialLayerSet object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Material Layer Set Usage</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Material Layer Set Usage</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcMaterialLayerSetUsage(IfcMaterialLayerSetUsage object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Material List</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Material List</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcMaterialList(IfcMaterialList object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Material Properties</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Material Properties</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcMaterialProperties(IfcMaterialProperties object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Material Select</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Material Select</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcMaterialSelect(IfcMaterialSelect object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Measure Value</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Measure Value</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcMeasureValue(IfcMeasureValue object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Measure With Unit</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Measure With Unit</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcMeasureWithUnit(IfcMeasureWithUnit object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Mechanical Concrete Material Properties</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Mechanical Concrete Material Properties</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcMechanicalConcreteMaterialProperties(IfcMechanicalConcreteMaterialProperties object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Mechanical Fastener</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Mechanical Fastener</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcMechanicalFastener(IfcMechanicalFastener object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Mechanical Fastener Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Mechanical Fastener Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcMechanicalFastenerType(IfcMechanicalFastenerType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Mechanical Material Properties</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Mechanical Material Properties</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcMechanicalMaterialProperties(IfcMechanicalMaterialProperties object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Mechanical Steel Material Properties</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Mechanical Steel Material Properties</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcMechanicalSteelMaterialProperties(IfcMechanicalSteelMaterialProperties object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Member</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Member</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcMember(IfcMember object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Member Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Member Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcMemberType(IfcMemberType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Member Type Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Member Type Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcMemberTypeEnumType(IfcMemberTypeEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Metric</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Metric</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcMetric(IfcMetric object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Metric Value Select</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Metric Value Select</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcMetricValueSelect(IfcMetricValueSelect object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Minute In Hour Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Minute In Hour Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcMinuteInHourType(IfcMinuteInHourType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Modulus Of Elasticity Measure Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Modulus Of Elasticity Measure Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcModulusOfElasticityMeasureType(IfcModulusOfElasticityMeasureType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Modulus Of Linear Subgrade Reaction Measure Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Modulus Of Linear Subgrade Reaction Measure Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcModulusOfLinearSubgradeReactionMeasureType(IfcModulusOfLinearSubgradeReactionMeasureType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Modulus Of Rotational Subgrade Reaction Measure Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Modulus Of Rotational Subgrade Reaction Measure Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcModulusOfRotationalSubgradeReactionMeasureType(IfcModulusOfRotationalSubgradeReactionMeasureType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Modulus Of Subgrade Reaction Measure Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Modulus Of Subgrade Reaction Measure Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcModulusOfSubgradeReactionMeasureType(IfcModulusOfSubgradeReactionMeasureType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Moisture Diffusivity Measure Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Moisture Diffusivity Measure Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcMoistureDiffusivityMeasureType(IfcMoistureDiffusivityMeasureType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Molecular Weight Measure Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Molecular Weight Measure Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcMolecularWeightMeasureType(IfcMolecularWeightMeasureType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Moment Of Inertia Measure Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Moment Of Inertia Measure Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcMomentOfInertiaMeasureType(IfcMomentOfInertiaMeasureType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Monetary Measure Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Monetary Measure Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcMonetaryMeasureType(IfcMonetaryMeasureType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Monetary Unit</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Monetary Unit</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcMonetaryUnit(IfcMonetaryUnit object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Month In Year Number Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Month In Year Number Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcMonthInYearNumberType(IfcMonthInYearNumberType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Motor Connection Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Motor Connection Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcMotorConnectionType(IfcMotorConnectionType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Motor Connection Type Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Motor Connection Type Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcMotorConnectionTypeEnumType(IfcMotorConnectionTypeEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Move</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Move</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcMove(IfcMove object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Named Unit</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Named Unit</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcNamedUnit(IfcNamedUnit object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Normalised Ratio Measure Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Normalised Ratio Measure Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcNormalisedRatioMeasureType(IfcNormalisedRatioMeasureType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Null Style Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Null Style Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcNullStyleType(IfcNullStyleType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Numeric Measure Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Numeric Measure Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcNumericMeasureType(IfcNumericMeasureType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Object</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Object</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcObject(IfcObject object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Object Definition</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Object Definition</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcObjectDefinition(IfcObjectDefinition object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Objective</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Objective</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcObjective(IfcObjective object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Objective Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Objective Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcObjectiveEnumType(IfcObjectiveEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Object Placement</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Object Placement</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcObjectPlacement(IfcObjectPlacement object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Object Reference Select</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Object Reference Select</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcObjectReferenceSelect(IfcObjectReferenceSelect object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Object Type Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Object Type Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcObjectTypeEnumType(IfcObjectTypeEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Occupant</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Occupant</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcOccupant(IfcOccupant object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Occupant Type Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Occupant Type Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcOccupantTypeEnumType(IfcOccupantTypeEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Offset Curve2 D</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Offset Curve2 D</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcOffsetCurve2D(IfcOffsetCurve2D object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Offset Curve3 D</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Offset Curve3 D</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcOffsetCurve3D(IfcOffsetCurve3D object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc One Direction Repeat Factor</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc One Direction Repeat Factor</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcOneDirectionRepeatFactor(IfcOneDirectionRepeatFactor object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Opening Element</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Opening Element</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcOpeningElement(IfcOpeningElement object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Open Shell</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Open Shell</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcOpenShell(IfcOpenShell object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Optical Material Properties</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Optical Material Properties</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcOpticalMaterialProperties(IfcOpticalMaterialProperties object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Order Action</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Order Action</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcOrderAction(IfcOrderAction object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Organization</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Organization</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcOrganization(IfcOrganization object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Organization Relationship</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Organization Relationship</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcOrganizationRelationship(IfcOrganizationRelationship object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Orientation Select</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Orientation Select</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcOrientationSelect(IfcOrientationSelect object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Oriented Edge</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Oriented Edge</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcOrientedEdge(IfcOrientedEdge object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Oriented Edge Temp</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Oriented Edge Temp</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcOrientedEdgeTemp(IfcOrientedEdgeTemp object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Outlet Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Outlet Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcOutletType(IfcOutletType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Outlet Type Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Outlet Type Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcOutletTypeEnumType(IfcOutletTypeEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Owner History</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Owner History</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcOwnerHistory(IfcOwnerHistory object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Parameterized Profile Def</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Parameterized Profile Def</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcParameterizedProfileDef(IfcParameterizedProfileDef object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Parameter Value Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Parameter Value Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcParameterValueType(IfcParameterValueType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Path</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Path</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcPath(IfcPath object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Performance History</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Performance History</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcPerformanceHistory(IfcPerformanceHistory object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Permeable Covering Operation Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Permeable Covering Operation Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcPermeableCoveringOperationEnumType(IfcPermeableCoveringOperationEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Permeable Covering Properties</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Permeable Covering Properties</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcPermeableCoveringProperties(IfcPermeableCoveringProperties object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Permit</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Permit</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcPermit(IfcPermit object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Person</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Person</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcPerson(IfcPerson object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Person And Organization</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Person And Organization</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcPersonAndOrganization(IfcPersonAndOrganization object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc PH Measure Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc PH Measure Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcPHMeasureType(IfcPHMeasureType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Physical Complex Quantity</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Physical Complex Quantity</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcPhysicalComplexQuantity(IfcPhysicalComplexQuantity object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Physical Or Virtual Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Physical Or Virtual Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcPhysicalOrVirtualEnumType(IfcPhysicalOrVirtualEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Physical Quantity</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Physical Quantity</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcPhysicalQuantity(IfcPhysicalQuantity object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Physical Simple Quantity</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Physical Simple Quantity</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcPhysicalSimpleQuantity(IfcPhysicalSimpleQuantity object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Pile</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Pile</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcPile(IfcPile object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Pile Construction Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Pile Construction Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcPileConstructionEnumType(IfcPileConstructionEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Pile Type Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Pile Type Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcPileTypeEnumType(IfcPileTypeEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Pipe Fitting Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Pipe Fitting Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcPipeFittingType(IfcPipeFittingType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Pipe Fitting Type Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Pipe Fitting Type Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcPipeFittingTypeEnumType(IfcPipeFittingTypeEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Pipe Segment Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Pipe Segment Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcPipeSegmentType(IfcPipeSegmentType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Pipe Segment Type Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Pipe Segment Type Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcPipeSegmentTypeEnumType(IfcPipeSegmentTypeEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Pixel Texture</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Pixel Texture</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcPixelTexture(IfcPixelTexture object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Placement</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Placement</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcPlacement(IfcPlacement object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Planar Box</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Planar Box</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcPlanarBox(IfcPlanarBox object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Planar Extent</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Planar Extent</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcPlanarExtent(IfcPlanarExtent object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Planar Force Measure Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Planar Force Measure Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcPlanarForceMeasureType(IfcPlanarForceMeasureType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Plane</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Plane</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcPlane(IfcPlane object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Plane Angle Measure Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Plane Angle Measure Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcPlaneAngleMeasureType(IfcPlaneAngleMeasureType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Plate</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Plate</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcPlate(IfcPlate object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Plate Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Plate Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcPlateType(IfcPlateType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Plate Type Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Plate Type Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcPlateTypeEnumType(IfcPlateTypeEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Point</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Point</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcPoint(IfcPoint object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Point On Curve</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Point On Curve</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcPointOnCurve(IfcPointOnCurve object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Point On Surface</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Point On Surface</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcPointOnSurface(IfcPointOnSurface object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Point Or Vertex Point</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Point Or Vertex Point</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcPointOrVertexPoint(IfcPointOrVertexPoint object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Polygonal Bounded Half Space</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Polygonal Bounded Half Space</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcPolygonalBoundedHalfSpace(IfcPolygonalBoundedHalfSpace object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Polyline</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Polyline</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcPolyline(IfcPolyline object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Poly Loop</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Poly Loop</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcPolyLoop(IfcPolyLoop object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Port</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Port</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcPort(IfcPort object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Positive Length Measure Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Positive Length Measure Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcPositiveLengthMeasureType(IfcPositiveLengthMeasureType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Positive Plane Angle Measure Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Positive Plane Angle Measure Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcPositivePlaneAngleMeasureType(IfcPositivePlaneAngleMeasureType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Positive Ratio Measure Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Positive Ratio Measure Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcPositiveRatioMeasureType(IfcPositiveRatioMeasureType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Postal Address</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Postal Address</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcPostalAddress(IfcPostalAddress object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Power Measure Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Power Measure Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcPowerMeasureType(IfcPowerMeasureType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Pre Defined Colour</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Pre Defined Colour</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcPreDefinedColour(IfcPreDefinedColour object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Pre Defined Curve Font</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Pre Defined Curve Font</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcPreDefinedCurveFont(IfcPreDefinedCurveFont object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Pre Defined Dimension Symbol</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Pre Defined Dimension Symbol</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcPreDefinedDimensionSymbol(IfcPreDefinedDimensionSymbol object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Pre Defined Item</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Pre Defined Item</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcPreDefinedItem(IfcPreDefinedItem object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Pre Defined Point Marker Symbol</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Pre Defined Point Marker Symbol</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcPreDefinedPointMarkerSymbol(IfcPreDefinedPointMarkerSymbol object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Pre Defined Symbol</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Pre Defined Symbol</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcPreDefinedSymbol(IfcPreDefinedSymbol object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Pre Defined Terminator Symbol</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Pre Defined Terminator Symbol</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcPreDefinedTerminatorSymbol(IfcPreDefinedTerminatorSymbol object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Pre Defined Text Font</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Pre Defined Text Font</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcPreDefinedTextFont(IfcPreDefinedTextFont object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Presentable Text Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Presentable Text Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcPresentableTextType(IfcPresentableTextType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Presentation Layer Assignment</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Presentation Layer Assignment</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcPresentationLayerAssignment(IfcPresentationLayerAssignment object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Presentation Layer With Style</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Presentation Layer With Style</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcPresentationLayerWithStyle(IfcPresentationLayerWithStyle object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Presentation Style</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Presentation Style</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcPresentationStyle(IfcPresentationStyle object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Presentation Style Assignment</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Presentation Style Assignment</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcPresentationStyleAssignment(IfcPresentationStyleAssignment object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Presentation Style Select</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Presentation Style Select</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcPresentationStyleSelect(IfcPresentationStyleSelect object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Pressure Measure Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Pressure Measure Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcPressureMeasureType(IfcPressureMeasureType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Procedure</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Procedure</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcProcedure(IfcProcedure object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Procedure Type Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Procedure Type Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcProcedureTypeEnumType(IfcProcedureTypeEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Process</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Process</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcProcess(IfcProcess object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Product</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Product</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcProduct(IfcProduct object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Product Definition Shape</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Product Definition Shape</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcProductDefinitionShape(IfcProductDefinitionShape object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Product Representation</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Product Representation</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcProductRepresentation(IfcProductRepresentation object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Products Of Combustion Properties</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Products Of Combustion Properties</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcProductsOfCombustionProperties(IfcProductsOfCombustionProperties object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Profile Def</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Profile Def</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcProfileDef(IfcProfileDef object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Profile Properties</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Profile Properties</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcProfileProperties(IfcProfileProperties object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Profile Type Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Profile Type Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcProfileTypeEnumType(IfcProfileTypeEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Project</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Project</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcProject(IfcProject object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Projected Or True Length Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Projected Or True Length Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcProjectedOrTrueLengthEnumType(IfcProjectedOrTrueLengthEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Projection Curve</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Projection Curve</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcProjectionCurve(IfcProjectionCurve object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Projection Element</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Projection Element</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcProjectionElement(IfcProjectionElement object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Project Order</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Project Order</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcProjectOrder(IfcProjectOrder object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Project Order Record</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Project Order Record</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcProjectOrderRecord(IfcProjectOrderRecord object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Project Order Record Type Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Project Order Record Type Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcProjectOrderRecordTypeEnumType(IfcProjectOrderRecordTypeEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Project Order Type Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Project Order Type Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcProjectOrderTypeEnumType(IfcProjectOrderTypeEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Property</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Property</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcProperty(IfcProperty object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Property Bounded Value</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Property Bounded Value</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcPropertyBoundedValue(IfcPropertyBoundedValue object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Property Constraint Relationship</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Property Constraint Relationship</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcPropertyConstraintRelationship(IfcPropertyConstraintRelationship object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Property Definition</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Property Definition</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcPropertyDefinition(IfcPropertyDefinition object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Property Dependency Relationship</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Property Dependency Relationship</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcPropertyDependencyRelationship(IfcPropertyDependencyRelationship object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Property Enumerated Value</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Property Enumerated Value</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcPropertyEnumeratedValue(IfcPropertyEnumeratedValue object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Property Enumeration</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Property Enumeration</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcPropertyEnumeration(IfcPropertyEnumeration object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Property List Value</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Property List Value</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcPropertyListValue(IfcPropertyListValue object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Property Reference Value</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Property Reference Value</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcPropertyReferenceValue(IfcPropertyReferenceValue object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Property Set</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Property Set</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcPropertySet(IfcPropertySet object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Property Set Definition</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Property Set Definition</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcPropertySetDefinition(IfcPropertySetDefinition object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Property Single Value</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Property Single Value</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcPropertySingleValue(IfcPropertySingleValue object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Property Source Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Property Source Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcPropertySourceEnumType(IfcPropertySourceEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Property Table Value</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Property Table Value</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcPropertyTableValue(IfcPropertyTableValue object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Protective Device Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Protective Device Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcProtectiveDeviceType(IfcProtectiveDeviceType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Protective Device Type Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Protective Device Type Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcProtectiveDeviceTypeEnumType(IfcProtectiveDeviceTypeEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Proxy</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Proxy</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcProxy(IfcProxy object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Pump Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Pump Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcPumpType(IfcPumpType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Pump Type Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Pump Type Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcPumpTypeEnumType(IfcPumpTypeEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Quantity Area</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Quantity Area</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcQuantityArea(IfcQuantityArea object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Quantity Count</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Quantity Count</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcQuantityCount(IfcQuantityCount object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Quantity Length</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Quantity Length</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcQuantityLength(IfcQuantityLength object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Quantity Time</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Quantity Time</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcQuantityTime(IfcQuantityTime object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Quantity Volume</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Quantity Volume</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcQuantityVolume(IfcQuantityVolume object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Quantity Weight</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Quantity Weight</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcQuantityWeight(IfcQuantityWeight object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Radio Activity Measure Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Radio Activity Measure Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcRadioActivityMeasureType(IfcRadioActivityMeasureType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Radius Dimension</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Radius Dimension</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcRadiusDimension(IfcRadiusDimension object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Railing</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Railing</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcRailing(IfcRailing object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Railing Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Railing Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcRailingType(IfcRailingType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Railing Type Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Railing Type Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcRailingTypeEnumType(IfcRailingTypeEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Ramp</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Ramp</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcRamp(IfcRamp object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Ramp Flight</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Ramp Flight</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcRampFlight(IfcRampFlight object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Ramp Flight Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Ramp Flight Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcRampFlightType(IfcRampFlightType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Ramp Flight Type Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Ramp Flight Type Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcRampFlightTypeEnumType(IfcRampFlightTypeEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Ramp Type Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Ramp Type Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcRampTypeEnumType(IfcRampTypeEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Ratio Measure Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Ratio Measure Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcRatioMeasureType(IfcRatioMeasureType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Rational Bezier Curve</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Rational Bezier Curve</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcRationalBezierCurve(IfcRationalBezierCurve object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Real Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Real Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcRealType(IfcRealType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Rectangle Hollow Profile Def</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Rectangle Hollow Profile Def</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcRectangleHollowProfileDef(IfcRectangleHollowProfileDef object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Rectangle Profile Def</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Rectangle Profile Def</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcRectangleProfileDef(IfcRectangleProfileDef object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Rectangular Pyramid</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Rectangular Pyramid</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcRectangularPyramid(IfcRectangularPyramid object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Rectangular Trimmed Surface</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Rectangular Trimmed Surface</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcRectangularTrimmedSurface(IfcRectangularTrimmedSurface object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc References Value Document</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc References Value Document</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcReferencesValueDocument(IfcReferencesValueDocument object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Reflectance Method Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Reflectance Method Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcReflectanceMethodEnumType(IfcReflectanceMethodEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Regular Time Series</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Regular Time Series</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcRegularTimeSeries(IfcRegularTimeSeries object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Reinforcement Bar Properties</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Reinforcement Bar Properties</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcReinforcementBarProperties(IfcReinforcementBarProperties object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Reinforcement Definition Properties</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Reinforcement Definition Properties</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcReinforcementDefinitionProperties(IfcReinforcementDefinitionProperties object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Reinforcing Bar</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Reinforcing Bar</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcReinforcingBar(IfcReinforcingBar object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Reinforcing Bar Role Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Reinforcing Bar Role Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcReinforcingBarRoleEnumType(IfcReinforcingBarRoleEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Reinforcing Bar Surface Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Reinforcing Bar Surface Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcReinforcingBarSurfaceEnumType(IfcReinforcingBarSurfaceEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Reinforcing Element</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Reinforcing Element</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcReinforcingElement(IfcReinforcingElement object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Reinforcing Mesh</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Reinforcing Mesh</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcReinforcingMesh(IfcReinforcingMesh object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Rel Aggregates</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Rel Aggregates</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcRelAggregates(IfcRelAggregates object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Rel Assigns</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Rel Assigns</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcRelAssigns(IfcRelAssigns object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Rel Assigns Tasks</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Rel Assigns Tasks</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcRelAssignsTasks(IfcRelAssignsTasks object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Rel Assigns To Actor</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Rel Assigns To Actor</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcRelAssignsToActor(IfcRelAssignsToActor object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Rel Assigns To Control</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Rel Assigns To Control</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcRelAssignsToControl(IfcRelAssignsToControl object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Rel Assigns To Group</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Rel Assigns To Group</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcRelAssignsToGroup(IfcRelAssignsToGroup object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Rel Assigns To Process</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Rel Assigns To Process</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcRelAssignsToProcess(IfcRelAssignsToProcess object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Rel Assigns To Product</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Rel Assigns To Product</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcRelAssignsToProduct(IfcRelAssignsToProduct object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Rel Assigns To Project Order</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Rel Assigns To Project Order</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcRelAssignsToProjectOrder(IfcRelAssignsToProjectOrder object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Rel Assigns To Resource</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Rel Assigns To Resource</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcRelAssignsToResource(IfcRelAssignsToResource object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Rel Associates</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Rel Associates</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcRelAssociates(IfcRelAssociates object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Rel Associates Applied Value</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Rel Associates Applied Value</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcRelAssociatesAppliedValue(IfcRelAssociatesAppliedValue object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Rel Associates Approval</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Rel Associates Approval</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcRelAssociatesApproval(IfcRelAssociatesApproval object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Rel Associates Classification</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Rel Associates Classification</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcRelAssociatesClassification(IfcRelAssociatesClassification object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Rel Associates Constraint</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Rel Associates Constraint</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcRelAssociatesConstraint(IfcRelAssociatesConstraint object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Rel Associates Document</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Rel Associates Document</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcRelAssociatesDocument(IfcRelAssociatesDocument object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Rel Associates Library</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Rel Associates Library</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcRelAssociatesLibrary(IfcRelAssociatesLibrary object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Rel Associates Material</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Rel Associates Material</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcRelAssociatesMaterial(IfcRelAssociatesMaterial object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Rel Associates Profile Properties</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Rel Associates Profile Properties</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcRelAssociatesProfileProperties(IfcRelAssociatesProfileProperties object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Relationship</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Relationship</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcRelationship(IfcRelationship object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Relaxation</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Relaxation</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcRelaxation(IfcRelaxation object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Rel Connects</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Rel Connects</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcRelConnects(IfcRelConnects object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Rel Connects Elements</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Rel Connects Elements</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcRelConnectsElements(IfcRelConnectsElements object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Rel Connects Path Elements</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Rel Connects Path Elements</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcRelConnectsPathElements(IfcRelConnectsPathElements object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Rel Connects Ports</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Rel Connects Ports</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcRelConnectsPorts(IfcRelConnectsPorts object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Rel Connects Port To Element</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Rel Connects Port To Element</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcRelConnectsPortToElement(IfcRelConnectsPortToElement object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Rel Connects Structural Activity</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Rel Connects Structural Activity</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcRelConnectsStructuralActivity(IfcRelConnectsStructuralActivity object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Rel Connects Structural Element</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Rel Connects Structural Element</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcRelConnectsStructuralElement(IfcRelConnectsStructuralElement object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Rel Connects Structural Member</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Rel Connects Structural Member</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcRelConnectsStructuralMember(IfcRelConnectsStructuralMember object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Rel Connects With Eccentricity</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Rel Connects With Eccentricity</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcRelConnectsWithEccentricity(IfcRelConnectsWithEccentricity object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Rel Connects With Realizing Elements</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Rel Connects With Realizing Elements</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcRelConnectsWithRealizingElements(IfcRelConnectsWithRealizingElements object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Rel Contained In Spatial Structure</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Rel Contained In Spatial Structure</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcRelContainedInSpatialStructure(IfcRelContainedInSpatialStructure object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Rel Covers Bldg Elements</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Rel Covers Bldg Elements</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcRelCoversBldgElements(IfcRelCoversBldgElements object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Rel Covers Spaces</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Rel Covers Spaces</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcRelCoversSpaces(IfcRelCoversSpaces object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Rel Decomposes</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Rel Decomposes</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcRelDecomposes(IfcRelDecomposes object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Rel Defines</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Rel Defines</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcRelDefines(IfcRelDefines object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Rel Defines By Properties</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Rel Defines By Properties</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcRelDefinesByProperties(IfcRelDefinesByProperties object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Rel Defines By Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Rel Defines By Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcRelDefinesByType(IfcRelDefinesByType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Rel Fills Element</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Rel Fills Element</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcRelFillsElement(IfcRelFillsElement object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Rel Flow Control Elements</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Rel Flow Control Elements</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcRelFlowControlElements(IfcRelFlowControlElements object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Rel Interaction Requirements</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Rel Interaction Requirements</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcRelInteractionRequirements(IfcRelInteractionRequirements object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Rel Nests</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Rel Nests</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcRelNests(IfcRelNests object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Rel Occupies Spaces</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Rel Occupies Spaces</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcRelOccupiesSpaces(IfcRelOccupiesSpaces object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Rel Overrides Properties</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Rel Overrides Properties</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcRelOverridesProperties(IfcRelOverridesProperties object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Rel Projects Element</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Rel Projects Element</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcRelProjectsElement(IfcRelProjectsElement object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Rel Referenced In Spatial Structure</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Rel Referenced In Spatial Structure</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcRelReferencedInSpatialStructure(IfcRelReferencedInSpatialStructure object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Rel Schedules Cost Items</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Rel Schedules Cost Items</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcRelSchedulesCostItems(IfcRelSchedulesCostItems object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Rel Sequence</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Rel Sequence</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcRelSequence(IfcRelSequence object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Rel Services Buildings</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Rel Services Buildings</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcRelServicesBuildings(IfcRelServicesBuildings object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Rel Space Boundary</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Rel Space Boundary</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcRelSpaceBoundary(IfcRelSpaceBoundary object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Rel Voids Element</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Rel Voids Element</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcRelVoidsElement(IfcRelVoidsElement object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Representation</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Representation</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcRepresentation(IfcRepresentation object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Representation Context</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Representation Context</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcRepresentationContext(IfcRepresentationContext object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Representation Item</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Representation Item</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcRepresentationItem(IfcRepresentationItem object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Representation Map</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Representation Map</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcRepresentationMap(IfcRepresentationMap object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Resource</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Resource</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcResource(IfcResource object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Resource Consumption Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Resource Consumption Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcResourceConsumptionEnumType(IfcResourceConsumptionEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Revolved Area Solid</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Revolved Area Solid</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcRevolvedAreaSolid(IfcRevolvedAreaSolid object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Rib Plate Direction Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Rib Plate Direction Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcRibPlateDirectionEnumType(IfcRibPlateDirectionEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Rib Plate Profile Properties</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Rib Plate Profile Properties</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcRibPlateProfileProperties(IfcRibPlateProfileProperties object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Right Circular Cone</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Right Circular Cone</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcRightCircularCone(IfcRightCircularCone object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Right Circular Cylinder</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Right Circular Cylinder</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcRightCircularCylinder(IfcRightCircularCylinder object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Role Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Role Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcRoleEnumType(IfcRoleEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Roof</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Roof</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcRoof(IfcRoof object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Roof Type Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Roof Type Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcRoofTypeEnumType(IfcRoofTypeEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Root</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Root</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcRoot(IfcRoot object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Rotational Frequency Measure Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Rotational Frequency Measure Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcRotationalFrequencyMeasureType(IfcRotationalFrequencyMeasureType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Rotational Mass Measure Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Rotational Mass Measure Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcRotationalMassMeasureType(IfcRotationalMassMeasureType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Rotational Stiffness Measure Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Rotational Stiffness Measure Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcRotationalStiffnessMeasureType(IfcRotationalStiffnessMeasureType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Rounded Edge Feature</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Rounded Edge Feature</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcRoundedEdgeFeature(IfcRoundedEdgeFeature object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Rounded Rectangle Profile Def</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Rounded Rectangle Profile Def</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcRoundedRectangleProfileDef(IfcRoundedRectangleProfileDef object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Sanitary Terminal Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Sanitary Terminal Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcSanitaryTerminalType(IfcSanitaryTerminalType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Sanitary Terminal Type Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Sanitary Terminal Type Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcSanitaryTerminalTypeEnumType(IfcSanitaryTerminalTypeEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Schedule Time Control</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Schedule Time Control</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcScheduleTimeControl(IfcScheduleTimeControl object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Second In Minute Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Second In Minute Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcSecondInMinuteType(IfcSecondInMinuteType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Sectional Area Integral Measure Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Sectional Area Integral Measure Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcSectionalAreaIntegralMeasureType(IfcSectionalAreaIntegralMeasureType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Sectioned Spine</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Sectioned Spine</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcSectionedSpine(IfcSectionedSpine object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Section Modulus Measure Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Section Modulus Measure Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcSectionModulusMeasureType(IfcSectionModulusMeasureType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Section Properties</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Section Properties</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcSectionProperties(IfcSectionProperties object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Section Reinforcement Properties</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Section Reinforcement Properties</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcSectionReinforcementProperties(IfcSectionReinforcementProperties object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Section Type Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Section Type Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcSectionTypeEnumType(IfcSectionTypeEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Sensor Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Sensor Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcSensorType(IfcSensorType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Sensor Type Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Sensor Type Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcSensorTypeEnumType(IfcSensorTypeEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Sequence Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Sequence Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcSequenceEnumType(IfcSequenceEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Service Life</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Service Life</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcServiceLife(IfcServiceLife object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Service Life Factor</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Service Life Factor</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcServiceLifeFactor(IfcServiceLifeFactor object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Service Life Factor Type Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Service Life Factor Type Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcServiceLifeFactorTypeEnumType(IfcServiceLifeFactorTypeEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Service Life Type Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Service Life Type Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcServiceLifeTypeEnumType(IfcServiceLifeTypeEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Shape Aspect</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Shape Aspect</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcShapeAspect(IfcShapeAspect object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Shape Model</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Shape Model</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcShapeModel(IfcShapeModel object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Shape Representation</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Shape Representation</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcShapeRepresentation(IfcShapeRepresentation object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Shear Modulus Measure Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Shear Modulus Measure Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcShearModulusMeasureType(IfcShearModulusMeasureType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Shell</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Shell</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcShell(IfcShell object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Shell Based Surface Model</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Shell Based Surface Model</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcShellBasedSurfaceModel(IfcShellBasedSurfaceModel object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Simple Property</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Simple Property</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcSimpleProperty(IfcSimpleProperty object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Simple Value</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Simple Value</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcSimpleValue(IfcSimpleValue object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc SI Prefix Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc SI Prefix Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcSIPrefixType(IfcSIPrefixType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Site</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Site</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcSite(IfcSite object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc SI Unit</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc SI Unit</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcSIUnit(IfcSIUnit object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc SI Unit Name Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc SI Unit Name Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcSIUnitNameType(IfcSIUnitNameType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc SI Unit Temp</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc SI Unit Temp</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcSIUnitTemp(IfcSIUnitTemp object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Size Select</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Size Select</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcSizeSelect(IfcSizeSelect object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Slab</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Slab</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcSlab(IfcSlab object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Slab Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Slab Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcSlabType(IfcSlabType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Slab Type Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Slab Type Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcSlabTypeEnumType(IfcSlabTypeEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Slippage Connection Condition</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Slippage Connection Condition</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcSlippageConnectionCondition(IfcSlippageConnectionCondition object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Solid Angle Measure Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Solid Angle Measure Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcSolidAngleMeasureType(IfcSolidAngleMeasureType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Solid Model</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Solid Model</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcSolidModel(IfcSolidModel object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Sound Power Measure Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Sound Power Measure Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcSoundPowerMeasureType(IfcSoundPowerMeasureType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Sound Pressure Measure Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Sound Pressure Measure Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcSoundPressureMeasureType(IfcSoundPressureMeasureType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Sound Properties</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Sound Properties</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcSoundProperties(IfcSoundProperties object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Sound Scale Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Sound Scale Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcSoundScaleEnumType(IfcSoundScaleEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Sound Value</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Sound Value</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcSoundValue(IfcSoundValue object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Space</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Space</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcSpace(IfcSpace object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Space Heater Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Space Heater Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcSpaceHeaterType(IfcSpaceHeaterType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Space Heater Type Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Space Heater Type Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcSpaceHeaterTypeEnumType(IfcSpaceHeaterTypeEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Space Program</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Space Program</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcSpaceProgram(IfcSpaceProgram object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Space Thermal Load Properties</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Space Thermal Load Properties</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcSpaceThermalLoadProperties(IfcSpaceThermalLoadProperties object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Space Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Space Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcSpaceType(IfcSpaceType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Space Type Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Space Type Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcSpaceTypeEnumType(IfcSpaceTypeEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Spatial Structure Element</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Spatial Structure Element</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcSpatialStructureElement(IfcSpatialStructureElement object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Spatial Structure Element Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Spatial Structure Element Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcSpatialStructureElementType(IfcSpatialStructureElementType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Specific Heat Capacity Measure Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Specific Heat Capacity Measure Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcSpecificHeatCapacityMeasureType(IfcSpecificHeatCapacityMeasureType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Specular Exponent Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Specular Exponent Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcSpecularExponentType(IfcSpecularExponentType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Specular Highlight Select</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Specular Highlight Select</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcSpecularHighlightSelect(IfcSpecularHighlightSelect object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Specular Roughness Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Specular Roughness Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcSpecularRoughnessType(IfcSpecularRoughnessType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Sphere</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Sphere</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcSphere(IfcSphere object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Stack Terminal Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Stack Terminal Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcStackTerminalType(IfcStackTerminalType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Stack Terminal Type Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Stack Terminal Type Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcStackTerminalTypeEnumType(IfcStackTerminalTypeEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Stair</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Stair</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcStair(IfcStair object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Stair Flight</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Stair Flight</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcStairFlight(IfcStairFlight object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Stair Flight Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Stair Flight Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcStairFlightType(IfcStairFlightType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Stair Flight Type Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Stair Flight Type Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcStairFlightTypeEnumType(IfcStairFlightTypeEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Stair Type Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Stair Type Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcStairTypeEnumType(IfcStairTypeEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc State Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc State Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcStateEnumType(IfcStateEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Structural Action</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Structural Action</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcStructuralAction(IfcStructuralAction object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Structural Activity</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Structural Activity</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcStructuralActivity(IfcStructuralActivity object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Structural Activity Assignment Select</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Structural Activity Assignment Select</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcStructuralActivityAssignmentSelect(IfcStructuralActivityAssignmentSelect object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Structural Analysis Model</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Structural Analysis Model</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcStructuralAnalysisModel(IfcStructuralAnalysisModel object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Structural Connection</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Structural Connection</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcStructuralConnection(IfcStructuralConnection object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Structural Connection Condition</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Structural Connection Condition</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcStructuralConnectionCondition(IfcStructuralConnectionCondition object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Structural Curve Connection</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Structural Curve Connection</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcStructuralCurveConnection(IfcStructuralCurveConnection object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Structural Curve Member</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Structural Curve Member</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcStructuralCurveMember(IfcStructuralCurveMember object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Structural Curve Member Varying</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Structural Curve Member Varying</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcStructuralCurveMemberVarying(IfcStructuralCurveMemberVarying object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Structural Curve Type Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Structural Curve Type Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcStructuralCurveTypeEnumType(IfcStructuralCurveTypeEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Structural Item</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Structural Item</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcStructuralItem(IfcStructuralItem object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Structural Linear Action</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Structural Linear Action</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcStructuralLinearAction(IfcStructuralLinearAction object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Structural Linear Action Varying</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Structural Linear Action Varying</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcStructuralLinearActionVarying(IfcStructuralLinearActionVarying object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Structural Load</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Structural Load</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcStructuralLoad(IfcStructuralLoad object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Structural Load Group</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Structural Load Group</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcStructuralLoadGroup(IfcStructuralLoadGroup object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Structural Load Linear Force</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Structural Load Linear Force</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcStructuralLoadLinearForce(IfcStructuralLoadLinearForce object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Structural Load Planar Force</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Structural Load Planar Force</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcStructuralLoadPlanarForce(IfcStructuralLoadPlanarForce object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Structural Load Single Displacement</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Structural Load Single Displacement</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcStructuralLoadSingleDisplacement(IfcStructuralLoadSingleDisplacement object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Structural Load Single Displacement Distortion</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Structural Load Single Displacement Distortion</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcStructuralLoadSingleDisplacementDistortion(IfcStructuralLoadSingleDisplacementDistortion object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Structural Load Single Force</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Structural Load Single Force</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcStructuralLoadSingleForce(IfcStructuralLoadSingleForce object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Structural Load Single Force Warping</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Structural Load Single Force Warping</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcStructuralLoadSingleForceWarping(IfcStructuralLoadSingleForceWarping object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Structural Load Static</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Structural Load Static</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcStructuralLoadStatic(IfcStructuralLoadStatic object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Structural Load Temperature</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Structural Load Temperature</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcStructuralLoadTemperature(IfcStructuralLoadTemperature object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Structural Member</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Structural Member</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcStructuralMember(IfcStructuralMember object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Structural Planar Action</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Structural Planar Action</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcStructuralPlanarAction(IfcStructuralPlanarAction object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Structural Planar Action Varying</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Structural Planar Action Varying</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcStructuralPlanarActionVarying(IfcStructuralPlanarActionVarying object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Structural Point Action</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Structural Point Action</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcStructuralPointAction(IfcStructuralPointAction object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Structural Point Connection</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Structural Point Connection</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcStructuralPointConnection(IfcStructuralPointConnection object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Structural Point Reaction</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Structural Point Reaction</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcStructuralPointReaction(IfcStructuralPointReaction object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Structural Profile Properties</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Structural Profile Properties</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcStructuralProfileProperties(IfcStructuralProfileProperties object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Structural Reaction</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Structural Reaction</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcStructuralReaction(IfcStructuralReaction object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Structural Result Group</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Structural Result Group</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcStructuralResultGroup(IfcStructuralResultGroup object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Structural Steel Profile Properties</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Structural Steel Profile Properties</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcStructuralSteelProfileProperties(IfcStructuralSteelProfileProperties object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Structural Surface Connection</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Structural Surface Connection</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcStructuralSurfaceConnection(IfcStructuralSurfaceConnection object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Structural Surface Member</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Structural Surface Member</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcStructuralSurfaceMember(IfcStructuralSurfaceMember object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Structural Surface Member Varying</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Structural Surface Member Varying</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcStructuralSurfaceMemberVarying(IfcStructuralSurfaceMemberVarying object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Structural Surface Type Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Structural Surface Type Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcStructuralSurfaceTypeEnumType(IfcStructuralSurfaceTypeEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Structured Dimension Callout</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Structured Dimension Callout</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcStructuredDimensionCallout(IfcStructuredDimensionCallout object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Styled Item</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Styled Item</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcStyledItem(IfcStyledItem object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Styled Representation</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Styled Representation</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcStyledRepresentation(IfcStyledRepresentation object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Style Model</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Style Model</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcStyleModel(IfcStyleModel object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Sub Contract Resource</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Sub Contract Resource</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcSubContractResource(IfcSubContractResource object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Subedge</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Subedge</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcSubedge(IfcSubedge object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Surface</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Surface</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcSurface(IfcSurface object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Surface Curve Swept Area Solid</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Surface Curve Swept Area Solid</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcSurfaceCurveSweptAreaSolid(IfcSurfaceCurveSweptAreaSolid object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Surface Of Linear Extrusion</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Surface Of Linear Extrusion</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcSurfaceOfLinearExtrusion(IfcSurfaceOfLinearExtrusion object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Surface Of Revolution</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Surface Of Revolution</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcSurfaceOfRevolution(IfcSurfaceOfRevolution object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Surface Or Face Surface</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Surface Or Face Surface</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcSurfaceOrFaceSurface(IfcSurfaceOrFaceSurface object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Surface Side Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Surface Side Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcSurfaceSideType(IfcSurfaceSideType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Surface Style</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Surface Style</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcSurfaceStyle(IfcSurfaceStyle object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Surface Style Element Select</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Surface Style Element Select</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcSurfaceStyleElementSelect(IfcSurfaceStyleElementSelect object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Surface Style Lighting</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Surface Style Lighting</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcSurfaceStyleLighting(IfcSurfaceStyleLighting object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Surface Style Refraction</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Surface Style Refraction</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcSurfaceStyleRefraction(IfcSurfaceStyleRefraction object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Surface Style Rendering</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Surface Style Rendering</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcSurfaceStyleRendering(IfcSurfaceStyleRendering object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Surface Style Shading</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Surface Style Shading</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcSurfaceStyleShading(IfcSurfaceStyleShading object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Surface Style With Textures</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Surface Style With Textures</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcSurfaceStyleWithTextures(IfcSurfaceStyleWithTextures object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Surface Texture</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Surface Texture</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcSurfaceTexture(IfcSurfaceTexture object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Surface Texture Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Surface Texture Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcSurfaceTextureEnumType(IfcSurfaceTextureEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Swept Area Solid</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Swept Area Solid</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcSweptAreaSolid(IfcSweptAreaSolid object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Swept Disk Solid</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Swept Disk Solid</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcSweptDiskSolid(IfcSweptDiskSolid object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Swept Surface</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Swept Surface</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcSweptSurface(IfcSweptSurface object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Switching Device Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Switching Device Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcSwitchingDeviceType(IfcSwitchingDeviceType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Switching Device Type Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Switching Device Type Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcSwitchingDeviceTypeEnumType(IfcSwitchingDeviceTypeEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Symbol Style</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Symbol Style</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcSymbolStyle(IfcSymbolStyle object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Symbol Style Select</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Symbol Style Select</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcSymbolStyleSelect(IfcSymbolStyleSelect object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc System</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc System</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcSystem(IfcSystem object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc System Furniture Element Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc System Furniture Element Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcSystemFurnitureElementType(IfcSystemFurnitureElementType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Table</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Table</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcTable(IfcTable object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Table Row</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Table Row</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcTableRow(IfcTableRow object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Tank Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Tank Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcTankType(IfcTankType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Tank Type Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Tank Type Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcTankTypeEnumType(IfcTankTypeEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Task</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Task</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcTask(IfcTask object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Telecom Address</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Telecom Address</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcTelecomAddress(IfcTelecomAddress object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Temperature Gradient Measure Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Temperature Gradient Measure Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcTemperatureGradientMeasureType(IfcTemperatureGradientMeasureType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Tendon</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Tendon</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcTendon(IfcTendon object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Tendon Anchor</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Tendon Anchor</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcTendonAnchor(IfcTendonAnchor object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Tendon Type Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Tendon Type Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcTendonTypeEnumType(IfcTendonTypeEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Terminator Symbol</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Terminator Symbol</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcTerminatorSymbol(IfcTerminatorSymbol object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Text Alignment Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Text Alignment Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcTextAlignmentType(IfcTextAlignmentType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Text Decoration Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Text Decoration Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcTextDecorationType(IfcTextDecorationType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Text Font Name Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Text Font Name Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcTextFontNameType(IfcTextFontNameType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Text Font Select</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Text Font Select</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcTextFontSelect(IfcTextFontSelect object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Text Literal</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Text Literal</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcTextLiteral(IfcTextLiteral object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Text Literal With Extent</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Text Literal With Extent</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcTextLiteralWithExtent(IfcTextLiteralWithExtent object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Text Path Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Text Path Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcTextPathType(IfcTextPathType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Text Style</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Text Style</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcTextStyle(IfcTextStyle object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Text Style Font Model</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Text Style Font Model</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcTextStyleFontModel(IfcTextStyleFontModel object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Text Style For Defined Font</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Text Style For Defined Font</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcTextStyleForDefinedFont(IfcTextStyleForDefinedFont object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Text Style Select</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Text Style Select</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcTextStyleSelect(IfcTextStyleSelect object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Text Style Text Model</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Text Style Text Model</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcTextStyleTextModel(IfcTextStyleTextModel object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Text Style With Box Characteristics</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Text Style With Box Characteristics</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcTextStyleWithBoxCharacteristics(IfcTextStyleWithBoxCharacteristics object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Text Transformation Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Text Transformation Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcTextTransformationType(IfcTextTransformationType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Text Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Text Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcTextType(IfcTextType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Texture Coordinate</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Texture Coordinate</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcTextureCoordinate(IfcTextureCoordinate object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Texture Coordinate Generator</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Texture Coordinate Generator</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcTextureCoordinateGenerator(IfcTextureCoordinateGenerator object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Texture Map</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Texture Map</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcTextureMap(IfcTextureMap object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Texture Vertex</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Texture Vertex</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcTextureVertex(IfcTextureVertex object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Thermal Admittance Measure Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Thermal Admittance Measure Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcThermalAdmittanceMeasureType(IfcThermalAdmittanceMeasureType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Thermal Conductivity Measure Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Thermal Conductivity Measure Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcThermalConductivityMeasureType(IfcThermalConductivityMeasureType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Thermal Expansion Coefficient Measure Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Thermal Expansion Coefficient Measure Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcThermalExpansionCoefficientMeasureType(IfcThermalExpansionCoefficientMeasureType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Thermal Load Source Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Thermal Load Source Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcThermalLoadSourceEnumType(IfcThermalLoadSourceEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Thermal Load Type Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Thermal Load Type Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcThermalLoadTypeEnumType(IfcThermalLoadTypeEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Thermal Material Properties</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Thermal Material Properties</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcThermalMaterialProperties(IfcThermalMaterialProperties object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Thermal Resistance Measure Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Thermal Resistance Measure Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcThermalResistanceMeasureType(IfcThermalResistanceMeasureType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Thermal Transmittance Measure Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Thermal Transmittance Measure Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcThermalTransmittanceMeasureType(IfcThermalTransmittanceMeasureType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Thermodynamic Temperature Measure Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Thermodynamic Temperature Measure Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcThermodynamicTemperatureMeasureType(IfcThermodynamicTemperatureMeasureType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Time Measure Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Time Measure Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcTimeMeasureType(IfcTimeMeasureType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Time Series</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Time Series</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcTimeSeries(IfcTimeSeries object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Time Series Data Type Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Time Series Data Type Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcTimeSeriesDataTypeEnumType(IfcTimeSeriesDataTypeEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Time Series Reference Relationship</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Time Series Reference Relationship</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcTimeSeriesReferenceRelationship(IfcTimeSeriesReferenceRelationship object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Time Series Schedule</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Time Series Schedule</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcTimeSeriesSchedule(IfcTimeSeriesSchedule object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Time Series Schedule Type Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Time Series Schedule Type Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcTimeSeriesScheduleTypeEnumType(IfcTimeSeriesScheduleTypeEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Time Series Value</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Time Series Value</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcTimeSeriesValue(IfcTimeSeriesValue object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Time Stamp Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Time Stamp Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcTimeStampType(IfcTimeStampType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Topological Representation Item</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Topological Representation Item</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcTopologicalRepresentationItem(IfcTopologicalRepresentationItem object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Topology Representation</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Topology Representation</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcTopologyRepresentation(IfcTopologyRepresentation object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Torque Measure Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Torque Measure Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcTorqueMeasureType(IfcTorqueMeasureType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Transformer Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Transformer Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcTransformerType(IfcTransformerType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Transformer Type Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Transformer Type Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcTransformerTypeEnumType(IfcTransformerTypeEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Transition Code Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Transition Code Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcTransitionCodeType(IfcTransitionCodeType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Transport Element</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Transport Element</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcTransportElement(IfcTransportElement object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Transport Element Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Transport Element Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcTransportElementType(IfcTransportElementType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Transport Element Type Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Transport Element Type Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcTransportElementTypeEnumType(IfcTransportElementTypeEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Trapezium Profile Def</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Trapezium Profile Def</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcTrapeziumProfileDef(IfcTrapeziumProfileDef object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Trimmed Curve</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Trimmed Curve</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcTrimmedCurve(IfcTrimmedCurve object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Trimming Preference Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Trimming Preference Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcTrimmingPreferenceType(IfcTrimmingPreferenceType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Trimming Select</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Trimming Select</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcTrimmingSelect(IfcTrimmingSelect object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc TShape Profile Def</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc TShape Profile Def</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcTShapeProfileDef(IfcTShapeProfileDef object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Tube Bundle Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Tube Bundle Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcTubeBundleType(IfcTubeBundleType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Tube Bundle Type Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Tube Bundle Type Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcTubeBundleTypeEnumType(IfcTubeBundleTypeEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Two Direction Repeat Factor</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Two Direction Repeat Factor</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcTwoDirectionRepeatFactor(IfcTwoDirectionRepeatFactor object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Type Object</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Type Object</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcTypeObject(IfcTypeObject object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Type Product</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Type Product</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcTypeProduct(IfcTypeProduct object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Unit</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Unit</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcUnit(IfcUnit object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Unitary Equipment Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Unitary Equipment Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcUnitaryEquipmentType(IfcUnitaryEquipmentType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Unitary Equipment Type Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Unitary Equipment Type Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcUnitaryEquipmentTypeEnumType(IfcUnitaryEquipmentTypeEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Unit Assignment</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Unit Assignment</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcUnitAssignment(IfcUnitAssignment object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Unit Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Unit Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcUnitEnumType(IfcUnitEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc UShape Profile Def</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc UShape Profile Def</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcUShapeProfileDef(IfcUShapeProfileDef object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Value</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Value</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcValue(IfcValue object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Valve Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Valve Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcValveType(IfcValveType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Valve Type Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Valve Type Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcValveTypeEnumType(IfcValveTypeEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Vapor Permeability Measure Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Vapor Permeability Measure Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcVaporPermeabilityMeasureType(IfcVaporPermeabilityMeasureType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Vector</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Vector</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcVector(IfcVector object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Vector Or Direction</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Vector Or Direction</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcVectorOrDirection(IfcVectorOrDirection object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Vertex</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Vertex</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcVertex(IfcVertex object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Vertex Based Texture Map</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Vertex Based Texture Map</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcVertexBasedTextureMap(IfcVertexBasedTextureMap object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Vertex Loop</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Vertex Loop</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcVertexLoop(IfcVertexLoop object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Vertex Point</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Vertex Point</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcVertexPoint(IfcVertexPoint object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Vibration Isolator Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Vibration Isolator Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcVibrationIsolatorType(IfcVibrationIsolatorType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Vibration Isolator Type Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Vibration Isolator Type Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcVibrationIsolatorTypeEnumType(IfcVibrationIsolatorTypeEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Virtual Element</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Virtual Element</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcVirtualElement(IfcVirtualElement object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Virtual Grid Intersection</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Virtual Grid Intersection</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcVirtualGridIntersection(IfcVirtualGridIntersection object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Volume Measure Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Volume Measure Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcVolumeMeasureType(IfcVolumeMeasureType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Volumetric Flow Rate Measure Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Volumetric Flow Rate Measure Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcVolumetricFlowRateMeasureType(IfcVolumetricFlowRateMeasureType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Wall</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Wall</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcWall(IfcWall object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Wall Standard Case</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Wall Standard Case</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcWallStandardCase(IfcWallStandardCase object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Wall Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Wall Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcWallType(IfcWallType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Wall Type Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Wall Type Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcWallTypeEnumType(IfcWallTypeEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Warping Constant Measure Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Warping Constant Measure Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcWarpingConstantMeasureType(IfcWarpingConstantMeasureType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Warping Moment Measure Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Warping Moment Measure Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcWarpingMomentMeasureType(IfcWarpingMomentMeasureType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Waste Terminal Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Waste Terminal Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcWasteTerminalType(IfcWasteTerminalType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Waste Terminal Type Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Waste Terminal Type Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcWasteTerminalTypeEnumType(IfcWasteTerminalTypeEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Water Properties</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Water Properties</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcWaterProperties(IfcWaterProperties object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Window</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Window</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcWindow(IfcWindow object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Window Lining Properties</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Window Lining Properties</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcWindowLiningProperties(IfcWindowLiningProperties object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Window Panel Operation Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Window Panel Operation Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcWindowPanelOperationEnumType(IfcWindowPanelOperationEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Window Panel Position Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Window Panel Position Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcWindowPanelPositionEnumType(IfcWindowPanelPositionEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Window Panel Properties</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Window Panel Properties</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcWindowPanelProperties(IfcWindowPanelProperties object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Window Style</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Window Style</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcWindowStyle(IfcWindowStyle object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Window Style Construction Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Window Style Construction Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcWindowStyleConstructionEnumType(IfcWindowStyleConstructionEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Window Style Operation Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Window Style Operation Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcWindowStyleOperationEnumType(IfcWindowStyleOperationEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Work Control</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Work Control</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcWorkControl(IfcWorkControl object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Work Control Type Enum Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Work Control Type Enum Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcWorkControlTypeEnumType(IfcWorkControlTypeEnumType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Work Plan</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Work Plan</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcWorkPlan(IfcWorkPlan object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Work Schedule</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Work Schedule</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcWorkSchedule(IfcWorkSchedule object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Year Number Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Year Number Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcYearNumberType(IfcYearNumberType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc Zone</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc Zone</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcZone(IfcZone object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ifc ZShape Profile Def</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ifc ZShape Profile Def</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfcZShapeProfileDef(IfcZShapeProfileDef object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Incorporation Date Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Incorporation Date Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIncorporationDateType(IncorporationDateType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Inner Boundaries Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Inner Boundaries Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseInnerBoundariesType(InnerBoundariesType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Inner Boundaries Type1</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Inner Boundaries Type1</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseInnerBoundariesType1(InnerBoundariesType1 object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Inner Curves Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Inner Curves Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseInnerCurvesType(InnerCurvesType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Intersecting Axes Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Intersecting Axes Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIntersectingAxesType(IntersectingAxesType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Item Of Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Item Of Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseItemOfType(ItemOfType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Items Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Items Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseItemsType(ItemsType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Item Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Item Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseItemType(ItemType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Item Type1</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Item Type1</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseItemType1(ItemType1 object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Jurisdiction Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Jurisdiction Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseJurisdictionType(JurisdictionType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Last Modifying Application Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Last Modifying Application Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseLastModifyingApplicationType(LastModifyingApplicationType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Last Modifying User Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Last Modifying User Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseLastModifyingUserType(LastModifyingUserType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Last Revision Time Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Last Revision Time Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseLastRevisionTimeType(LastRevisionTimeType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Last Update Date Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Last Update Date Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseLastUpdateDateType(LastUpdateDateType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Late Finish Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Late Finish Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseLateFinishType(LateFinishType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Late Start Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Late Start Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseLateStartType(LateStartType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Layer Styles Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Layer Styles Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseLayerStylesType(LayerStylesType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Letter Spacing Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Letter Spacing Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseLetterSpacingType(LetterSpacingType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Library Reference Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Library Reference Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseLibraryReferenceType(LibraryReferenceType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Light Colour Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Light Colour Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseLightColourType(LightColourType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Light Distribution Data Source Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Light Distribution Data Source Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseLightDistributionDataSourceType(LightDistributionDataSourceType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Line Height Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Line Height Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseLineHeightType(LineHeightType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>List Values Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>List Values Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseListValuesType(ListValuesType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>List Values Type1</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>List Values Type1</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseListValuesType1(ListValuesType1 object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>List Values Type2</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>List Values Type2</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseListValuesType2(ListValuesType2 object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Loaded By Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Loaded By Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseLoadedByType(LoadedByType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Local Origin Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Local Origin Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseLocalOriginType(LocalOriginType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Location At Related Element Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Location At Related Element Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseLocationAtRelatedElementType(LocationAtRelatedElementType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Location At Relating Element Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Location At Relating Element Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseLocationAtRelatingElementType(LocationAtRelatingElementType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Location Of Interaction Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Location Of Interaction Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseLocationOfInteractionType(LocationOfInteractionType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Location Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Location Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseLocationType(LocationType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Loop Vertex Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Loop Vertex Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseLoopVertexType(LoopVertexType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Lower Bound Value Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Lower Bound Value Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseLowerBoundValueType(LowerBoundValueType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Lower Value Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Lower Value Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseLowerValueType(LowerValueType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Luminous Intensity Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Luminous Intensity Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseLuminousIntensityType(LuminousIntensityType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Mapped Representation Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Mapped Representation Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseMappedRepresentationType(MappedRepresentationType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Mapping Origin Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Mapping Origin Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseMappingOriginType(MappingOriginType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Mapping Source Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Mapping Source Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseMappingSourceType(MappingSourceType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Mapping Target Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Mapping Target Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseMappingTargetType(MappingTargetType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Material Classifications Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Material Classifications Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseMaterialClassificationsType(MaterialClassificationsType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Material Layers Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Material Layers Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseMaterialLayersType(MaterialLayersType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Materials Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Materials Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseMaterialsType(MaterialsType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Material Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Material Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseMaterialType(MaterialType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Material Type1</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Material Type1</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseMaterialType1(MaterialType1 object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Middle Names Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Middle Names Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseMiddleNamesType(MiddleNamesType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Most Used Value Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Most Used Value Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseMostUsedValueType(MostUsedValueType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Move From Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Move From Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseMoveFromType(MoveFromType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Move To Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Move To Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseMoveToType(MoveToType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Nominal Value Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Nominal Value Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseNominalValueType(NominalValueType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Notation Facets Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Notation Facets Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseNotationFacetsType(NotationFacetsType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Notation Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Notation Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseNotationType(NotationType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Object Placement Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Object Placement Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseObjectPlacementType(ObjectPlacementType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Offset Distances Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Offset Distances Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseOffsetDistancesType(OffsetDistancesType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Operator Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Operator Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseOperatorType(OperatorType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Orientation Of2 DPlane Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Orientation Of2 DPlane Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseOrientationOf2DPlaneType(OrientationOf2DPlaneType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Orientation Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Orientation Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseOrientationType(OrientationType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Orientation Type1</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Orientation Type1</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseOrientationType1(OrientationType1 object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Orientation Type2</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Orientation Type2</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseOrientationType2(OrientationType2 object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Original Value Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Original Value Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseOriginalValueType(OriginalValueType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Original Value Type1</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Original Value Type1</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseOriginalValueType1(OriginalValueType1 object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Outer Boundary Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Outer Boundary Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseOuterBoundaryType(OuterBoundaryType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Outer Boundary Type1</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Outer Boundary Type1</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseOuterBoundaryType1(OuterBoundaryType1 object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Outer Curve Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Outer Curve Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseOuterCurveType(OuterCurveType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Outer Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Outer Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseOuterType(OuterType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Overriding Properties Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Overriding Properties Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseOverridingPropertiesType(OverridingPropertiesType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Owner History Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Owner History Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseOwnerHistoryType(OwnerHistoryType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Owner Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Owner Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseOwnerType(OwnerType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Owning Application Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Owning Application Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseOwningApplicationType(OwningApplicationType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Owning User Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Owning User Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseOwningUserType(OwningUserType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Parameter Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Parameter Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseParameterType(ParameterType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Parent Context Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Parent Context Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseParentContextType(ParentContextType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Parent Curve Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Parent Curve Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseParentCurveType(ParentCurveType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Parent Edge Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Parent Edge Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseParentEdgeType(ParentEdgeType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Parent Profile Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Parent Profile Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseParentProfileType(ParentProfileType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Part Of Product Definition Shape Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Part Of Product Definition Shape Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T casePartOfProductDefinitionShapeType(PartOfProductDefinitionShapeType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Pattern List Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Pattern List Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T casePatternListType(PatternListType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Pattern Start Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Pattern Start Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T casePatternStartType(PatternStartType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Pixel Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Pixel Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T casePixelType(PixelType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Placement Location Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Placement Location Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T casePlacementLocationType(PlacementLocationType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Placement Ref Direction Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Placement Ref Direction Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T casePlacementRefDirectionType(PlacementRefDirectionType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Placement Rel To Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Placement Rel To Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T casePlacementRelToType(PlacementRelToType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Placement Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Placement Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T casePlacementType(PlacementType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Placement Type1</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Placement Type1</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T casePlacementType1(PlacementType1 object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Pnt Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Pnt Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T casePntType(PntType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Point Of Reference Hatch Line Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Point Of Reference Hatch Line Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T casePointOfReferenceHatchLineType(PointOfReferenceHatchLineType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Point On Related Element Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Point On Related Element Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T casePointOnRelatedElementType(PointOnRelatedElementType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Point On Relating Element Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Point On Relating Element Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T casePointOnRelatingElementType(PointOnRelatingElementType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Points Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Points Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T casePointsType(PointsType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Polygonal Boundary Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Polygonal Boundary Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T casePolygonalBoundaryType(PolygonalBoundaryType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Polygon Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Polygon Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T casePolygonType(PolygonType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Position Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Position Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T casePositionType(PositionType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Position Type1</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Position Type1</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T casePositionType1(PositionType1 object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Position Type2</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Position Type2</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T casePositionType2(PositionType2 object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Position Type3</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Position Type3</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T casePositionType3(PositionType3 object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Position Type4</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Position Type4</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T casePositionType4(PositionType4 object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Position Type5</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Position Type5</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T casePositionType5(PositionType5 object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Position Type6</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Position Type6</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T casePositionType6(PositionType6 object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Position Type7</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Position Type7</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T casePositionType7(PositionType7 object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Position Type8</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Position Type8</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T casePositionType8(PositionType8 object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Prefix Titles Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Prefix Titles Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T casePrefixTitlesType(PrefixTitlesType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Prepared By Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Prepared By Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T casePreparedByType(PreparedByType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Pressure Time Series Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Pressure Time Series Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T casePressureTimeSeriesType(PressureTimeSeriesType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Profile Definition Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Profile Definition Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseProfileDefinitionType(ProfileDefinitionType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Profile Of Port Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Profile Of Port Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseProfileOfPortType(ProfileOfPortType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Profile Orientation Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Profile Orientation Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseProfileOrientationType(ProfileOrientationType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Profile Section Location Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Profile Section Location Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseProfileSectionLocationType(ProfileSectionLocationType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Profiles Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Profiles Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseProfilesType(ProfilesType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Property Reference Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Property Reference Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T casePropertyReferenceType(PropertyReferenceType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Publisher Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Publisher Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T casePublisherType(PublisherType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Punch List Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Punch List Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T casePunchListType(PunchListType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Quantities Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Quantities Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseQuantitiesType(QuantitiesType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Quantity In Process Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Quantity In Process Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseQuantityInProcessType(QuantityInProcessType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Rate Date Time Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Rate Date Time Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseRateDateTimeType(RateDateTimeType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Rate Source Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Rate Source Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseRateSourceType(RateSourceType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Realizing Elements Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Realizing Elements Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseRealizingElementsType(RealizingElementsType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Realizing Element Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Realizing Element Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseRealizingElementType(RealizingElementType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Records Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Records Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseRecordsType(RecordsType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ref Direction Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ref Direction Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseRefDirectionType(RefDirectionType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ref Direction Type1</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ref Direction Type1</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseRefDirectionType1(RefDirectionType1 object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ref Direction Type2</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Ref Direction Type2</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseRefDirectionType2(RefDirectionType2 object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Referenced Document Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Referenced Document Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseReferencedDocumentType(ReferencedDocumentType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Referenced Source Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Referenced Source Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseReferencedSourceType(ReferencedSourceType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Referenced Time Series Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Referenced Time Series Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseReferencedTimeSeriesType(ReferencedTimeSeriesType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Reference Surface Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Reference Surface Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseReferenceSurfaceType(ReferenceSurfaceType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Referencing Values Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Referencing Values Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseReferencingValuesType(ReferencingValuesType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Reflectance Colour Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Reflectance Colour Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseReflectanceColourType(ReflectanceColourType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Reflection Colour Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Reflection Colour Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseReflectionColourType(ReflectionColourType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Reinforcement Section Definitions Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Reinforcement Section Definitions Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseReinforcementSectionDefinitionsType(ReinforcementSectionDefinitionsType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Related Approval Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Related Approval Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseRelatedApprovalType(RelatedApprovalType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Related Building Element Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Related Building Element Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseRelatedBuildingElementType(RelatedBuildingElementType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Related Building Element Type1</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Related Building Element Type1</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseRelatedBuildingElementType1(RelatedBuildingElementType1 object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Related Buildings Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Related Buildings Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseRelatedBuildingsType(RelatedBuildingsType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Related Classifications Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Related Classifications Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseRelatedClassificationsType(RelatedClassificationsType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Related Constraints Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Related Constraints Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseRelatedConstraintsType(RelatedConstraintsType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Related Constraints Type1</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Related Constraints Type1</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseRelatedConstraintsType1(RelatedConstraintsType1 object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Related Control Elements Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Related Control Elements Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseRelatedControlElementsType(RelatedControlElementsType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Related Coverings Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Related Coverings Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseRelatedCoveringsType(RelatedCoveringsType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Related Coverings Type1</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Related Coverings Type1</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseRelatedCoveringsType1(RelatedCoveringsType1 object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Related Documents Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Related Documents Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseRelatedDocumentsType(RelatedDocumentsType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Related Draughting Callout Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Related Draughting Callout Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseRelatedDraughtingCalloutType(RelatedDraughtingCalloutType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Related Elements Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Related Elements Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseRelatedElementsType(RelatedElementsType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Related Elements Type1</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Related Elements Type1</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseRelatedElementsType1(RelatedElementsType1 object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Related Element Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Related Element Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseRelatedElementType(RelatedElementType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Related Element Type1</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Related Element Type1</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseRelatedElementType1(RelatedElementType1 object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Related Feature Element Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Related Feature Element Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseRelatedFeatureElementType(RelatedFeatureElementType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Related Items Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Related Items Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseRelatedItemsType(RelatedItemsType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Related Monetary Unit Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Related Monetary Unit Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseRelatedMonetaryUnitType(RelatedMonetaryUnitType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Related Objects Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Related Objects Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseRelatedObjectsType(RelatedObjectsType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Related Objects Type1</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Related Objects Type1</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseRelatedObjectsType1(RelatedObjectsType1 object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Related Objects Type2</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Related Objects Type2</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseRelatedObjectsType2(RelatedObjectsType2 object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Related Objects Type3</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Related Objects Type3</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseRelatedObjectsType3(RelatedObjectsType3 object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Related Opening Element Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Related Opening Element Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseRelatedOpeningElementType(RelatedOpeningElementType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Related Organizations Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Related Organizations Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseRelatedOrganizationsType(RelatedOrganizationsType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Related Port Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Related Port Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseRelatedPortType(RelatedPortType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Related Priorities Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Related Priorities Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseRelatedPrioritiesType(RelatedPrioritiesType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Related Process Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Related Process Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseRelatedProcessType(RelatedProcessType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Related Properties Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Related Properties Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseRelatedPropertiesType(RelatedPropertiesType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Related Space Program Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Related Space Program Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseRelatedSpaceProgramType(RelatedSpaceProgramType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Related Space Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Related Space Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseRelatedSpaceType(RelatedSpaceType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Related Structural Activity Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Related Structural Activity Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseRelatedStructuralActivityType(RelatedStructuralActivityType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Related Structural Connection Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Related Structural Connection Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseRelatedStructuralConnectionType(RelatedStructuralConnectionType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Related Structural Member Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Related Structural Member Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseRelatedStructuralMemberType(RelatedStructuralMemberType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Relating Actor Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Relating Actor Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseRelatingActorType(RelatingActorType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Relating Applied Value Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Relating Applied Value Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseRelatingAppliedValueType(RelatingAppliedValueType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Relating Approval Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Relating Approval Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseRelatingApprovalType(RelatingApprovalType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Relating Approval Type1</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Relating Approval Type1</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseRelatingApprovalType1(RelatingApprovalType1 object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Relating Building Element Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Relating Building Element Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseRelatingBuildingElementType(RelatingBuildingElementType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Relating Building Element Type1</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Relating Building Element Type1</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseRelatingBuildingElementType1(RelatingBuildingElementType1 object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Relating Classification Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Relating Classification Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseRelatingClassificationType(RelatingClassificationType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Relating Constraint Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Relating Constraint Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseRelatingConstraintType(RelatingConstraintType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Relating Constraint Type1</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Relating Constraint Type1</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseRelatingConstraintType1(RelatingConstraintType1 object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Relating Constraint Type2</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Relating Constraint Type2</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseRelatingConstraintType2(RelatingConstraintType2 object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Relating Constraint Type3</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Relating Constraint Type3</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseRelatingConstraintType3(RelatingConstraintType3 object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Relating Control Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Relating Control Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseRelatingControlType(RelatingControlType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Relating Document Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Relating Document Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseRelatingDocumentType(RelatingDocumentType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Relating Document Type1</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Relating Document Type1</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseRelatingDocumentType1(RelatingDocumentType1 object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Relating Draughting Callout Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Relating Draughting Callout Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseRelatingDraughtingCalloutType(RelatingDraughtingCalloutType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Relating Element Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Relating Element Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseRelatingElementType(RelatingElementType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Relating Element Type1</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Relating Element Type1</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseRelatingElementType1(RelatingElementType1 object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Relating Element Type2</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Relating Element Type2</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseRelatingElementType2(RelatingElementType2 object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Relating Element Type3</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Relating Element Type3</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseRelatingElementType3(RelatingElementType3 object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Relating Flow Element Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Relating Flow Element Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseRelatingFlowElementType(RelatingFlowElementType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Relating Group Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Relating Group Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseRelatingGroupType(RelatingGroupType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Relating Item Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Relating Item Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseRelatingItemType(RelatingItemType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Relating Library Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Relating Library Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseRelatingLibraryType(RelatingLibraryType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Relating Material Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Relating Material Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseRelatingMaterialType(RelatingMaterialType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Relating Monetary Unit Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Relating Monetary Unit Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseRelatingMonetaryUnitType(RelatingMonetaryUnitType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Relating Object Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Relating Object Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseRelatingObjectType(RelatingObjectType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Relating Opening Element Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Relating Opening Element Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseRelatingOpeningElementType(RelatingOpeningElementType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Relating Organization Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Relating Organization Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseRelatingOrganizationType(RelatingOrganizationType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Relating Port Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Relating Port Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseRelatingPortType(RelatingPortType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Relating Port Type1</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Relating Port Type1</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseRelatingPortType1(RelatingPortType1 object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Relating Priorities Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Relating Priorities Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseRelatingPrioritiesType(RelatingPrioritiesType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Relating Process Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Relating Process Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseRelatingProcessType(RelatingProcessType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Relating Process Type1</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Relating Process Type1</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseRelatingProcessType1(RelatingProcessType1 object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Relating Product Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Relating Product Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseRelatingProductType(RelatingProductType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Relating Profile Properties Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Relating Profile Properties Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseRelatingProfilePropertiesType(RelatingProfilePropertiesType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Relating Property Definition Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Relating Property Definition Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseRelatingPropertyDefinitionType(RelatingPropertyDefinitionType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Relating Resource Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Relating Resource Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseRelatingResourceType(RelatingResourceType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Relating Space Program Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Relating Space Program Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseRelatingSpaceProgramType(RelatingSpaceProgramType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Relating Space Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Relating Space Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseRelatingSpaceType(RelatingSpaceType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Relating Structural Member Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Relating Structural Member Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseRelatingStructuralMemberType(RelatingStructuralMemberType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Relating Structure Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Relating Structure Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseRelatingStructureType(RelatingStructureType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Relating Structure Type1</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Relating Structure Type1</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseRelatingStructureType1(RelatingStructureType1 object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Relating System Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Relating System Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseRelatingSystemType(RelatingSystemType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Relating Type Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Relating Type Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseRelatingTypeType(RelatingTypeType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Relative Placement Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Relative Placement Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseRelativePlacementType(RelativePlacementType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Relaxations Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Relaxations Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseRelaxationsType(RelaxationsType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Repeat Factor Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Repeat Factor Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseRepeatFactorType(RepeatFactorType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Representation Contexts Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Representation Contexts Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseRepresentationContextsType(RepresentationContextsType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Representation Maps Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Representation Maps Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseRepresentationMapsType(RepresentationMapsType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Representations Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Representations Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseRepresentationsType(RepresentationsType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Representation Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Representation Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseRepresentationType(RepresentationType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Represented Material Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Represented Material Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseRepresentedMaterialType(RepresentedMaterialType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Requested Location Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Requested Location Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseRequestedLocationType(RequestedLocationType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Responsible Persons Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Responsible Persons Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseResponsiblePersonsType(ResponsiblePersonsType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Responsible Person Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Responsible Person Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseResponsiblePersonType(ResponsiblePersonType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Result For Load Group Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Result For Load Group Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseResultForLoadGroupType(ResultForLoadGroupType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Result Values Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Result Values Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseResultValuesType(ResultValuesType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Roles Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Roles Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseRolesType(RolesType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Roles Type1</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Roles Type1</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseRolesType1(RolesType1 object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Roles Type2</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Roles Type2</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseRolesType2(RolesType2 object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Role Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Role Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseRoleType(RoleType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Row Cells Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Row Cells Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseRowCellsType(RowCellsType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Rows Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Rows Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseRowsType(RowsType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Sbsm Boundary Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Sbsm Boundary Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseSbsmBoundaryType(SbsmBoundaryType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Schedule Finish Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Schedule Finish Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseScheduleFinishType(ScheduleFinishType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Schedule Start Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Schedule Start Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseScheduleStartType(ScheduleStartType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Secondary Plane Angle Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Secondary Plane Angle Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseSecondaryPlaneAngleType(SecondaryPlaneAngleType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Second Operand Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Second Operand Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseSecondOperandType(SecondOperandType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Second Repeat Factor Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Second Repeat Factor Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseSecondRepeatFactorType(SecondRepeatFactorType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Section Definition Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Section Definition Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseSectionDefinitionType(SectionDefinitionType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Segments Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Segments Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseSegmentsType(SegmentsType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Shape Aspect Style Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Shape Aspect Style Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseShapeAspectStyleType(ShapeAspectStyleType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Shape Aspect Style Type1</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Shape Aspect Style Type1</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseShapeAspectStyleType1(ShapeAspectStyleType1 object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Shape Aspect Style Type2</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Shape Aspect Style Type2</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseShapeAspectStyleType2(ShapeAspectStyleType2 object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Shape Aspect Style Type3</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Shape Aspect Style Type3</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseShapeAspectStyleType3(ShapeAspectStyleType3 object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Shape Aspect Style Type4</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Shape Aspect Style Type4</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseShapeAspectStyleType4(ShapeAspectStyleType4 object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Shape Representations Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Shape Representations Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseShapeRepresentationsType(ShapeRepresentationsType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Site Address Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Site Address Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseSiteAddressType(SiteAddressType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Sound Level Single Value Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Sound Level Single Value Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseSoundLevelSingleValueType(SoundLevelSingleValueType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Sound Level Time Series Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Sound Level Time Series Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseSoundLevelTimeSeriesType(SoundLevelTimeSeriesType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Sound Values Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Sound Values Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseSoundValuesType(SoundValuesType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Specular Colour Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Specular Colour Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseSpecularColourType(SpecularColourType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Specular Highlight Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Specular Highlight Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseSpecularHighlightType(SpecularHighlightType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Spine Curve Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Spine Curve Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseSpineCurveType(SpineCurveType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Start Of Next Hatch Line Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Start Of Next Hatch Line Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseStartOfNextHatchLineType(StartOfNextHatchLineType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Start Profile Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Start Profile Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseStartProfileType(StartProfileType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Start Time Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Start Time Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseStartTimeType(StartTimeType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Start Time Type1</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Start Time Type1</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseStartTimeType1(StartTimeType1 object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Status Time Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Status Time Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseStatusTimeType(StatusTimeType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Style Of Symbol Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Style Of Symbol Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseStyleOfSymbolType(StyleOfSymbolType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Styles Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Styles Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseStylesType(StylesType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Styles Type1</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Styles Type1</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseStylesType1(StylesType1 object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Styles Type2</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Styles Type2</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseStylesType2(StylesType2 object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Sub Contractor Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Sub Contractor Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseSubContractorType(SubContractorType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Submitted By Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Submitted By Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseSubmittedByType(SubmittedByType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Submitted On Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Submitted On Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseSubmittedOnType(SubmittedOnType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Subsequent Applied Loads Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Subsequent Applied Loads Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseSubsequentAppliedLoadsType(SubsequentAppliedLoadsType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Subsequent Applied Loads Type1</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Subsequent Applied Loads Type1</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseSubsequentAppliedLoadsType1(SubsequentAppliedLoadsType1 object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Subsequent Thickness Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Subsequent Thickness Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseSubsequentThicknessType(SubsequentThicknessType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Suffix Titles Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Suffix Titles Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseSuffixTitlesType(SuffixTitlesType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Suppliers Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Suppliers Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseSuppliersType(SuppliersType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Surface Colour Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Surface Colour Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseSurfaceColourType(SurfaceColourType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Surface On Related Element Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Surface On Related Element Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseSurfaceOnRelatedElementType(SurfaceOnRelatedElementType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Surface On Relating Element Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Surface On Relating Element Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseSurfaceOnRelatingElementType(SurfaceOnRelatingElementType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Swept Area Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Swept Area Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseSweptAreaType(SweptAreaType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Swept Curve Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Swept Curve Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseSweptCurveType(SweptCurveType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Symbol Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Symbol Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseSymbolType(SymbolType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Target Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Target Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseTargetType(TargetType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Target Users Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Target Users Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseTargetUsersType(TargetUsersType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Telephone Numbers Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Telephone Numbers Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseTelephoneNumbersType(TelephoneNumbersType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Temperature Time Series Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Temperature Time Series Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseTemperatureTimeSeriesType(TemperatureTimeSeriesType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Text Character Appearance Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Text Character Appearance Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseTextCharacterAppearanceType(TextCharacterAppearanceType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Text Font Style Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Text Font Style Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseTextFontStyleType(TextFontStyleType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Text Indent Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Text Indent Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseTextIndentType(TextIndentType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Text Style Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Text Style Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseTextStyleType(TextStyleType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Texture Coordinates Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Texture Coordinates Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseTextureCoordinatesType(TextureCoordinatesType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Texture Maps Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Texture Maps Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseTextureMapsType(TextureMapsType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Texture Points Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Texture Points Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseTexturePointsType(TexturePointsType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Textures Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Textures Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseTexturesType(TexturesType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Texture Transform Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Texture Transform Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseTextureTransformType(TextureTransformType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Texture Vertices Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Texture Vertices Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseTextureVerticesType(TextureVerticesType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>The Actor Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>The Actor Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseTheActorType(TheActorType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>The Organization Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>The Organization Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseTheOrganizationType(TheOrganizationType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>The Person Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>The Person Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseThePersonType(ThePersonType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Thermal Load Time Series Values Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Thermal Load Time Series Values Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseThermalLoadTimeSeriesValuesType(ThermalLoadTimeSeriesValuesType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Tiles Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Tiles Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseTilesType(TilesType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Tiling Pattern Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Tiling Pattern Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseTilingPatternType(TilingPatternType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Time Component Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Time Component Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseTimeComponentType(TimeComponentType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Time For Task Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Time For Task Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseTimeForTaskType(TimeForTaskType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Time Series References Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Time Series References Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseTimeSeriesReferencesType(TimeSeriesReferencesType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Time Series Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Time Series Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseTimeSeriesType(TimeSeriesType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Time Stamp Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Time Stamp Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseTimeStampType(TimeStampType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Total Replacement Cost Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Total Replacement Cost Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseTotalReplacementCostType(TotalReplacementCostType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Transmission Colour Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Transmission Colour Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseTransmissionColourType(TransmissionColourType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Transmission Colour Type1</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Transmission Colour Type1</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseTransmissionColourType1(TransmissionColourType1 object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Tree Root Expression Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Tree Root Expression Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseTreeRootExpressionType(TreeRootExpressionType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Trim1 Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Trim1 Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseTrim1Type(Trim1Type object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Trim2 Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Trim2 Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseTrim2Type(Trim2Type object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>True North Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>True North Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseTrueNorthType(TrueNorthType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>UAxes Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>UAxes Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseUAxesType(UAxesType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Unit Basis Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Unit Basis Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseUnitBasisType(UnitBasisType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Unit Component Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Unit Component Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseUnitComponentType(UnitComponentType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Units In Context Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Units In Context Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseUnitsInContextType(UnitsInContextType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Units Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Units Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseUnitsType(UnitsType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Unit Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Unit Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseUnitType(UnitType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Unit Type1</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Unit Type1</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseUnitType1(UnitType1 object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Unit Type2</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Unit Type2</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseUnitType2(UnitType2 object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Unit Type3</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Unit Type3</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseUnitType3(UnitType3 object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Unit Type4</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Unit Type4</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseUnitType4(UnitType4 object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Unit Type5</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Unit Type5</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseUnitType5(UnitType5 object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Unit Type6</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Unit Type6</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseUnitType6(UnitType6 object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Uos</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Uos</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseUos(Uos object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Update Date Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Update Date Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseUpdateDateType(UpdateDateType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Upper Bound Value Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Upper Bound Value Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseUpperBoundValueType(UpperBoundValueType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Upper Value Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Upper Value Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseUpperValueType(UpperValueType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>User Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>User Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseUserType(UserType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Valid From Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Valid From Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseValidFromType(ValidFromType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Valid Until Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Valid Until Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseValidUntilType(ValidUntilType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Value Component Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Value Component Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseValueComponentType(ValueComponentType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Values Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Values Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseValuesType(ValuesType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Values Type1</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Values Type1</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseValuesType1(ValuesType1 object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Varying Applied Load Location Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Varying Applied Load Location Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseVaryingAppliedLoadLocationType(VaryingAppliedLoadLocationType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Varying Applied Load Location Type1</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Varying Applied Load Location Type1</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseVaryingAppliedLoadLocationType1(VaryingAppliedLoadLocationType1 object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Varying Thickness Location Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Varying Thickness Location Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseVaryingThicknessLocationType(VaryingThicknessLocationType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>VAxes Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>VAxes Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseVAxesType(VAxesType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Velocity Time Series Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Velocity Time Series Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseVelocityTimeSeriesType(VelocityTimeSeriesType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Version Date Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Version Date Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseVersionDateType(VersionDateType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Vertex Geometry Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Vertex Geometry Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseVertexGeometryType(VertexGeometryType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Voids Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Voids Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseVoidsType(VoidsType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>WAxes Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>WAxes Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseWAxesType(WAxesType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Weights Data Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Weights Data Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseWeightsDataType(WeightsDataType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Wet Bulb Temperature Time Series Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Wet Bulb Temperature Time Series Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseWetBulbTemperatureTimeSeriesType(WetBulbTemperatureTimeSeriesType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Word Spacing Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Word Spacing Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseWordSpacingType(WordSpacingType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>World Coordinate System Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>World Coordinate System Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseWorldCoordinateSystemType(WorldCoordinateSystemType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Zone Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Zone Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseZoneType(ZoneType object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Entity</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Entity</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseEntity(Entity object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Uos</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Uos</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseCommon_Uos(org.iso.standard._10303.part._28.version._2.xmlschema.common.Uos object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch, but this is the last case anyway.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject)
	 * @generated
	 */
	@Override
	public T defaultCase(EObject object) {
		return null;
	}

} //FinalSwitch
