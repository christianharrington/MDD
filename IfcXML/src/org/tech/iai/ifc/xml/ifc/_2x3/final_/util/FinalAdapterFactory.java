/**
 */
package org.tech.iai.ifc.xml.ifc._2x3.final_.util;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

import org.iso.standard._10303.part._28.version._2.xmlschema.common.Entity;

import org.tech.iai.ifc.xml.ifc._2x3.final_.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.FinalPackage
 * @generated
 */
public class FinalAdapterFactory extends AdapterFactoryImpl {
	/**
	 * The cached model package.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected static FinalPackage modelPackage;

	/**
	 * Creates an instance of the adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public FinalAdapterFactory() {
		if (modelPackage == null) {
			modelPackage = FinalPackage.eINSTANCE;
		}
	}

	/**
	 * Returns whether this factory is applicable for the type of the object.
	 * <!-- begin-user-doc -->
	 * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
	 * <!-- end-user-doc -->
	 * @return whether this factory is applicable for the type of the object.
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object object) {
		if (object == modelPackage) {
			return true;
		}
		if (object instanceof EObject) {
			return ((EObject)object).eClass().getEPackage() == modelPackage;
		}
		return false;
	}

	/**
	 * The switch that delegates to the <code>createXXX</code> methods.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FinalSwitch<Adapter> modelSwitch =
		new FinalSwitch<Adapter>() {
			@Override
			public Adapter caseActingRoleType(ActingRoleType object) {
				return createActingRoleTypeAdapter();
			}
			@Override
			public Adapter caseActorType(ActorType object) {
				return createActorTypeAdapter();
			}
			@Override
			public Adapter caseActualFinishType(ActualFinishType object) {
				return createActualFinishTypeAdapter();
			}
			@Override
			public Adapter caseActualStartType(ActualStartType object) {
				return createActualStartTypeAdapter();
			}
			@Override
			public Adapter caseAdditionalConditionsType(AdditionalConditionsType object) {
				return createAdditionalConditionsTypeAdapter();
			}
			@Override
			public Adapter caseAddressesType(AddressesType object) {
				return createAddressesTypeAdapter();
			}
			@Override
			public Adapter caseAddressesType1(AddressesType1 object) {
				return createAddressesType1Adapter();
			}
			@Override
			public Adapter caseAddressLinesType(AddressLinesType object) {
				return createAddressLinesTypeAdapter();
			}
			@Override
			public Adapter caseAnnotatedCurveType(AnnotatedCurveType object) {
				return createAnnotatedCurveTypeAdapter();
			}
			@Override
			public Adapter caseApplicableDatesType(ApplicableDatesType object) {
				return createApplicableDatesTypeAdapter();
			}
			@Override
			public Adapter caseApplicableDateType(ApplicableDateType object) {
				return createApplicableDateTypeAdapter();
			}
			@Override
			public Adapter caseApplicationDeveloperType(ApplicationDeveloperType object) {
				return createApplicationDeveloperTypeAdapter();
			}
			@Override
			public Adapter caseAppliedConditionType(AppliedConditionType object) {
				return createAppliedConditionTypeAdapter();
			}
			@Override
			public Adapter caseAppliedConditionType1(AppliedConditionType1 object) {
				return createAppliedConditionType1Adapter();
			}
			@Override
			public Adapter caseAppliedLoadType(AppliedLoadType object) {
				return createAppliedLoadTypeAdapter();
			}
			@Override
			public Adapter caseAppliedValueType(AppliedValueType object) {
				return createAppliedValueTypeAdapter();
			}
			@Override
			public Adapter caseApprovalDateTimeType(ApprovalDateTimeType object) {
				return createApprovalDateTimeTypeAdapter();
			}
			@Override
			public Adapter caseApprovalType(ApprovalType object) {
				return createApprovalTypeAdapter();
			}
			@Override
			public Adapter caseApprovalType1(ApprovalType1 object) {
				return createApprovalType1Adapter();
			}
			@Override
			public Adapter caseApprovedPropertiesType(ApprovedPropertiesType object) {
				return createApprovedPropertiesTypeAdapter();
			}
			@Override
			public Adapter caseAssignedItemsType(AssignedItemsType object) {
				return createAssignedItemsTypeAdapter();
			}
			@Override
			public Adapter caseAxis1Type(Axis1Type object) {
				return createAxis1TypeAdapter();
			}
			@Override
			public Adapter caseAxis2Type(Axis2Type object) {
				return createAxis2TypeAdapter();
			}
			@Override
			public Adapter caseAxis3Type(Axis3Type object) {
				return createAxis3TypeAdapter();
			}
			@Override
			public Adapter caseAxisCurveType(AxisCurveType object) {
				return createAxisCurveTypeAdapter();
			}
			@Override
			public Adapter caseAxisPositionType(AxisPositionType object) {
				return createAxisPositionTypeAdapter();
			}
			@Override
			public Adapter caseAxisType(AxisType object) {
				return createAxisTypeAdapter();
			}
			@Override
			public Adapter caseAxisType1(AxisType1 object) {
				return createAxisType1Adapter();
			}
			@Override
			public Adapter caseAxisType2(AxisType2 object) {
				return createAxisType2Adapter();
			}
			@Override
			public Adapter caseBackgroundColourType(BackgroundColourType object) {
				return createBackgroundColourTypeAdapter();
			}
			@Override
			public Adapter caseBaseQuantityType(BaseQuantityType object) {
				return createBaseQuantityTypeAdapter();
			}
			@Override
			public Adapter caseBaseSurfaceType(BaseSurfaceType object) {
				return createBaseSurfaceTypeAdapter();
			}
			@Override
			public Adapter caseBasisCurveType(BasisCurveType object) {
				return createBasisCurveTypeAdapter();
			}
			@Override
			public Adapter caseBasisCurveType1(BasisCurveType1 object) {
				return createBasisCurveType1Adapter();
			}
			@Override
			public Adapter caseBasisCurveType2(BasisCurveType2 object) {
				return createBasisCurveType2Adapter();
			}
			@Override
			public Adapter caseBasisCurveType3(BasisCurveType3 object) {
				return createBasisCurveType3Adapter();
			}
			@Override
			public Adapter caseBasisSurfaceType(BasisSurfaceType object) {
				return createBasisSurfaceTypeAdapter();
			}
			@Override
			public Adapter caseBasisSurfaceType1(BasisSurfaceType1 object) {
				return createBasisSurfaceType1Adapter();
			}
			@Override
			public Adapter caseBasisSurfaceType2(BasisSurfaceType2 object) {
				return createBasisSurfaceType2Adapter();
			}
			@Override
			public Adapter caseBenchmarkValuesType(BenchmarkValuesType object) {
				return createBenchmarkValuesTypeAdapter();
			}
			@Override
			public Adapter caseBoundsType(BoundsType object) {
				return createBoundsTypeAdapter();
			}
			@Override
			public Adapter caseBoundType(BoundType object) {
				return createBoundTypeAdapter();
			}
			@Override
			public Adapter caseBuildingAddressType(BuildingAddressType object) {
				return createBuildingAddressTypeAdapter();
			}
			@Override
			public Adapter caseCausedByType(CausedByType object) {
				return createCausedByTypeAdapter();
			}
			@Override
			public Adapter caseCfsFacesType(CfsFacesType object) {
				return createCfsFacesTypeAdapter();
			}
			@Override
			public Adapter caseCharacterSpacingType(CharacterSpacingType object) {
				return createCharacterSpacingTypeAdapter();
			}
			@Override
			public Adapter caseClassifiedConstraintType(ClassifiedConstraintType object) {
				return createClassifiedConstraintTypeAdapter();
			}
			@Override
			public Adapter caseClassifiedMaterialType(ClassifiedMaterialType object) {
				return createClassifiedMaterialTypeAdapter();
			}
			@Override
			public Adapter caseColourAppearanceType(ColourAppearanceType object) {
				return createColourAppearanceTypeAdapter();
			}
			@Override
			public Adapter caseColourType(ColourType object) {
				return createColourTypeAdapter();
			}
			@Override
			public Adapter caseComponentOfTotalType(ComponentOfTotalType object) {
				return createComponentOfTotalTypeAdapter();
			}
			@Override
			public Adapter caseComponentsType(ComponentsType object) {
				return createComponentsTypeAdapter();
			}
			@Override
			public Adapter caseConditionCoordinateSystemType(ConditionCoordinateSystemType object) {
				return createConditionCoordinateSystemTypeAdapter();
			}
			@Override
			public Adapter caseConnectionConstraintType(ConnectionConstraintType object) {
				return createConnectionConstraintTypeAdapter();
			}
			@Override
			public Adapter caseConnectionGeometryType(ConnectionGeometryType object) {
				return createConnectionGeometryTypeAdapter();
			}
			@Override
			public Adapter caseConnectionGeometryType1(ConnectionGeometryType1 object) {
				return createConnectionGeometryType1Adapter();
			}
			@Override
			public Adapter caseContentsType(ContentsType object) {
				return createContentsTypeAdapter();
			}
			@Override
			public Adapter caseContextOfItemsType(ContextOfItemsType object) {
				return createContextOfItemsTypeAdapter();
			}
			@Override
			public Adapter caseControlPointsListType(ControlPointsListType object) {
				return createControlPointsListTypeAdapter();
			}
			@Override
			public Adapter caseConversionFactorType(ConversionFactorType object) {
				return createConversionFactorTypeAdapter();
			}
			@Override
			public Adapter caseCoordinatesType(CoordinatesType object) {
				return createCoordinatesTypeAdapter();
			}
			@Override
			public Adapter caseCoordinatesType1(CoordinatesType1 object) {
				return createCoordinatesType1Adapter();
			}
			@Override
			public Adapter caseCornerType(CornerType object) {
				return createCornerTypeAdapter();
			}
			@Override
			public Adapter caseCreatingActorType(CreatingActorType object) {
				return createCreatingActorTypeAdapter();
			}
			@Override
			public Adapter caseCreationDateType(CreationDateType object) {
				return createCreationDateTypeAdapter();
			}
			@Override
			public Adapter caseCreationTimeType(CreationTimeType object) {
				return createCreationTimeTypeAdapter();
			}
			@Override
			public Adapter caseCreationTimeType1(CreationTimeType1 object) {
				return createCreationTimeType1Adapter();
			}
			@Override
			public Adapter caseCreatorsType(CreatorsType object) {
				return createCreatorsTypeAdapter();
			}
			@Override
			public Adapter caseCriterionDateTimeType(CriterionDateTimeType object) {
				return createCriterionDateTimeTypeAdapter();
			}
			@Override
			public Adapter caseCriterionType(CriterionType object) {
				return createCriterionTypeAdapter();
			}
			@Override
			public Adapter caseCrossSectionPositionsType(CrossSectionPositionsType object) {
				return createCrossSectionPositionsTypeAdapter();
			}
			@Override
			public Adapter caseCrossSectionReinforcementDefinitionsType(CrossSectionReinforcementDefinitionsType object) {
				return createCrossSectionReinforcementDefinitionsTypeAdapter();
			}
			@Override
			public Adapter caseCrossSectionsType(CrossSectionsType object) {
				return createCrossSectionsTypeAdapter();
			}
			@Override
			public Adapter caseCurrentValueType(CurrentValueType object) {
				return createCurrentValueTypeAdapter();
			}
			@Override
			public Adapter caseCurrentValueType1(CurrentValueType1 object) {
				return createCurrentValueType1Adapter();
			}
			@Override
			public Adapter caseCurveColourType(CurveColourType object) {
				return createCurveColourTypeAdapter();
			}
			@Override
			public Adapter caseCurveFontType(CurveFontType object) {
				return createCurveFontTypeAdapter();
			}
			@Override
			public Adapter caseCurveFontType1(CurveFontType1 object) {
				return createCurveFontType1Adapter();
			}
			@Override
			public Adapter caseCurveOnRelatedElementType(CurveOnRelatedElementType object) {
				return createCurveOnRelatedElementTypeAdapter();
			}
			@Override
			public Adapter caseCurveOnRelatingElementType(CurveOnRelatingElementType object) {
				return createCurveOnRelatingElementTypeAdapter();
			}
			@Override
			public Adapter caseCurveType(CurveType object) {
				return createCurveTypeAdapter();
			}
			@Override
			public Adapter caseCurveWidthType(CurveWidthType object) {
				return createCurveWidthTypeAdapter();
			}
			@Override
			public Adapter caseDataValueType(DataValueType object) {
				return createDataValueTypeAdapter();
			}
			@Override
			public Adapter caseDateComponentType(DateComponentType object) {
				return createDateComponentTypeAdapter();
			}
			@Override
			public Adapter caseDefinedUnitType(DefinedUnitType object) {
				return createDefinedUnitTypeAdapter();
			}
			@Override
			public Adapter caseDefinedValuesType(DefinedValuesType object) {
				return createDefinedValuesTypeAdapter();
			}
			@Override
			public Adapter caseDefiningUnitType(DefiningUnitType object) {
				return createDefiningUnitTypeAdapter();
			}
			@Override
			public Adapter caseDefiningValuesType(DefiningValuesType object) {
				return createDefiningValuesTypeAdapter();
			}
			@Override
			public Adapter caseDefinitionType(DefinitionType object) {
				return createDefinitionTypeAdapter();
			}
			@Override
			public Adapter caseDependantPropertyType(DependantPropertyType object) {
				return createDependantPropertyTypeAdapter();
			}
			@Override
			public Adapter caseDependingPropertyType(DependingPropertyType object) {
				return createDependingPropertyTypeAdapter();
			}
			@Override
			public Adapter caseDepreciatedValueType(DepreciatedValueType object) {
				return createDepreciatedValueTypeAdapter();
			}
			@Override
			public Adapter caseDiffuseColourType(DiffuseColourType object) {
				return createDiffuseColourTypeAdapter();
			}
			@Override
			public Adapter caseDiffuseReflectionColourType(DiffuseReflectionColourType object) {
				return createDiffuseReflectionColourTypeAdapter();
			}
			@Override
			public Adapter caseDiffuseTransmissionColourType(DiffuseTransmissionColourType object) {
				return createDiffuseTransmissionColourTypeAdapter();
			}
			@Override
			public Adapter caseDiffuseTransmissionColourType1(DiffuseTransmissionColourType1 object) {
				return createDiffuseTransmissionColourType1Adapter();
			}
			@Override
			public Adapter caseDimensionsType(DimensionsType object) {
				return createDimensionsTypeAdapter();
			}
			@Override
			public Adapter caseDirectionRatiosType(DirectionRatiosType object) {
				return createDirectionRatiosTypeAdapter();
			}
			@Override
			public Adapter caseDirectrixType(DirectrixType object) {
				return createDirectrixTypeAdapter();
			}
			@Override
			public Adapter caseDirectrixType1(DirectrixType1 object) {
				return createDirectrixType1Adapter();
			}
			@Override
			public Adapter caseDirType(DirType object) {
				return createDirTypeAdapter();
			}
			@Override
			public Adapter caseDistributionDataType(DistributionDataType object) {
				return createDistributionDataTypeAdapter();
			}
			@Override
			public Adapter caseDocumentOwnerType(DocumentOwnerType object) {
				return createDocumentOwnerTypeAdapter();
			}
			@Override
			public Adapter caseDocumentReferencesType(DocumentReferencesType object) {
				return createDocumentReferencesTypeAdapter();
			}
			@Override
			public Adapter caseDocumentRoot(DocumentRoot object) {
				return createDocumentRootAdapter();
			}
			@Override
			public Adapter caseEarlyFinishType(EarlyFinishType object) {
				return createEarlyFinishTypeAdapter();
			}
			@Override
			public Adapter caseEarlyStartType(EarlyStartType object) {
				return createEarlyStartTypeAdapter();
			}
			@Override
			public Adapter caseEdgeElementType(EdgeElementType object) {
				return createEdgeElementTypeAdapter();
			}
			@Override
			public Adapter caseEdgeEndType(EdgeEndType object) {
				return createEdgeEndTypeAdapter();
			}
			@Override
			public Adapter caseEdgeGeometryType(EdgeGeometryType object) {
				return createEdgeGeometryTypeAdapter();
			}
			@Override
			public Adapter caseEdgeListType(EdgeListType object) {
				return createEdgeListTypeAdapter();
			}
			@Override
			public Adapter caseEdgeListType1(EdgeListType1 object) {
				return createEdgeListType1Adapter();
			}
			@Override
			public Adapter caseEdgeStartType(EdgeStartType object) {
				return createEdgeStartTypeAdapter();
			}
			@Override
			public Adapter caseEditionDateType(EditionDateType object) {
				return createEditionDateTypeAdapter();
			}
			@Override
			public Adapter caseEditorsType(EditorsType object) {
				return createEditorsTypeAdapter();
			}
			@Override
			public Adapter caseElectronicFormatType(ElectronicFormatType object) {
				return createElectronicFormatTypeAdapter();
			}
			@Override
			public Adapter caseElectronicMailAddressesType(ElectronicMailAddressesType object) {
				return createElectronicMailAddressesTypeAdapter();
			}
			@Override
			public Adapter caseElementsType(ElementsType object) {
				return createElementsTypeAdapter();
			}
			@Override
			public Adapter caseElementsType1(ElementsType1 object) {
				return createElementsType1Adapter();
			}
			@Override
			public Adapter caseEnclosureType(EnclosureType object) {
				return createEnclosureTypeAdapter();
			}
			@Override
			public Adapter caseEndProfileType(EndProfileType object) {
				return createEndProfileTypeAdapter();
			}
			@Override
			public Adapter caseEndTimeType(EndTimeType object) {
				return createEndTimeTypeAdapter();
			}
			@Override
			public Adapter caseEnumerationReferenceType(EnumerationReferenceType object) {
				return createEnumerationReferenceTypeAdapter();
			}
			@Override
			public Adapter caseEnumerationValuesType(EnumerationValuesType object) {
				return createEnumerationValuesTypeAdapter();
			}
			@Override
			public Adapter caseEnumerationValuesType1(EnumerationValuesType1 object) {
				return createEnumerationValuesType1Adapter();
			}
			@Override
			public Adapter caseExtendedPropertiesType(ExtendedPropertiesType object) {
				return createExtendedPropertiesTypeAdapter();
			}
			@Override
			public Adapter caseExtentType(ExtentType object) {
				return createExtentTypeAdapter();
			}
			@Override
			public Adapter caseExtrudedDirectionType(ExtrudedDirectionType object) {
				return createExtrudedDirectionTypeAdapter();
			}
			@Override
			public Adapter caseExtrudedDirectionType1(ExtrudedDirectionType1 object) {
				return createExtrudedDirectionType1Adapter();
			}
			@Override
			public Adapter caseFaceSurfaceType(FaceSurfaceType object) {
				return createFaceSurfaceTypeAdapter();
			}
			@Override
			public Adapter caseFacsimileNumbersType(FacsimileNumbersType object) {
				return createFacsimileNumbersTypeAdapter();
			}
			@Override
			public Adapter caseFbsmFacesType(FbsmFacesType object) {
				return createFbsmFacesTypeAdapter();
			}
			@Override
			public Adapter caseFillStylesType(FillStylesType object) {
				return createFillStylesTypeAdapter();
			}
			@Override
			public Adapter caseFillStyleTargetType(FillStyleTargetType object) {
				return createFillStyleTargetTypeAdapter();
			}
			@Override
			public Adapter caseFinishTimeType(FinishTimeType object) {
				return createFinishTimeTypeAdapter();
			}
			@Override
			public Adapter caseFirstOperandType(FirstOperandType object) {
				return createFirstOperandTypeAdapter();
			}
			@Override
			public Adapter caseFixedUntilDateType(FixedUntilDateType object) {
				return createFixedUntilDateTypeAdapter();
			}
			@Override
			public Adapter caseFlowConditionTimeSeriesType(FlowConditionTimeSeriesType object) {
				return createFlowConditionTimeSeriesTypeAdapter();
			}
			@Override
			public Adapter caseFlowrateSingleValueType(FlowrateSingleValueType object) {
				return createFlowrateSingleValueTypeAdapter();
			}
			@Override
			public Adapter caseFlowrateTimeSeriesType(FlowrateTimeSeriesType object) {
				return createFlowrateTimeSeriesTypeAdapter();
			}
			@Override
			public Adapter caseFluidType(FluidType object) {
				return createFluidTypeAdapter();
			}
			@Override
			public Adapter caseFontFamilyType(FontFamilyType object) {
				return createFontFamilyTypeAdapter();
			}
			@Override
			public Adapter caseFontSizeType(FontSizeType object) {
				return createFontSizeTypeAdapter();
			}
			@Override
			public Adapter caseForLayerSetType(ForLayerSetType object) {
				return createForLayerSetTypeAdapter();
			}
			@Override
			public Adapter caseHasPropertiesType(HasPropertiesType object) {
				return createHasPropertiesTypeAdapter();
			}
			@Override
			public Adapter caseHasPropertiesType1(HasPropertiesType1 object) {
				return createHasPropertiesType1Adapter();
			}
			@Override
			public Adapter caseHasPropertySetsType(HasPropertySetsType object) {
				return createHasPropertySetsTypeAdapter();
			}
			@Override
			public Adapter caseHasQuantitiesType(HasQuantitiesType object) {
				return createHasQuantitiesTypeAdapter();
			}
			@Override
			public Adapter caseHasResultsType(HasResultsType object) {
				return createHasResultsTypeAdapter();
			}
			@Override
			public Adapter caseHatchLineAppearanceType(HatchLineAppearanceType object) {
				return createHatchLineAppearanceTypeAdapter();
			}
			@Override
			public Adapter caseIfc2DCompositeCurve(Ifc2DCompositeCurve object) {
				return createIfc2DCompositeCurveAdapter();
			}
			@Override
			public Adapter caseIfcAbsorbedDoseMeasureType(IfcAbsorbedDoseMeasureType object) {
				return createIfcAbsorbedDoseMeasureTypeAdapter();
			}
			@Override
			public Adapter caseIfcAccelerationMeasureType(IfcAccelerationMeasureType object) {
				return createIfcAccelerationMeasureTypeAdapter();
			}
			@Override
			public Adapter caseIfcActionRequest(IfcActionRequest object) {
				return createIfcActionRequestAdapter();
			}
			@Override
			public Adapter caseIfcActionSourceTypeEnumType(IfcActionSourceTypeEnumType object) {
				return createIfcActionSourceTypeEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcActionTypeEnumType(IfcActionTypeEnumType object) {
				return createIfcActionTypeEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcActor(IfcActor object) {
				return createIfcActorAdapter();
			}
			@Override
			public Adapter caseIfcActorRole(IfcActorRole object) {
				return createIfcActorRoleAdapter();
			}
			@Override
			public Adapter caseIfcActorSelect(IfcActorSelect object) {
				return createIfcActorSelectAdapter();
			}
			@Override
			public Adapter caseIfcActuatorType(IfcActuatorType object) {
				return createIfcActuatorTypeAdapter();
			}
			@Override
			public Adapter caseIfcActuatorTypeEnumType(IfcActuatorTypeEnumType object) {
				return createIfcActuatorTypeEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcAddress(IfcAddress object) {
				return createIfcAddressAdapter();
			}
			@Override
			public Adapter caseIfcAddressTypeEnumType(IfcAddressTypeEnumType object) {
				return createIfcAddressTypeEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcAheadOrBehindType(IfcAheadOrBehindType object) {
				return createIfcAheadOrBehindTypeAdapter();
			}
			@Override
			public Adapter caseIfcAirTerminalBoxType(IfcAirTerminalBoxType object) {
				return createIfcAirTerminalBoxTypeAdapter();
			}
			@Override
			public Adapter caseIfcAirTerminalBoxTypeEnumType(IfcAirTerminalBoxTypeEnumType object) {
				return createIfcAirTerminalBoxTypeEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcAirTerminalType(IfcAirTerminalType object) {
				return createIfcAirTerminalTypeAdapter();
			}
			@Override
			public Adapter caseIfcAirTerminalTypeEnumType(IfcAirTerminalTypeEnumType object) {
				return createIfcAirTerminalTypeEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcAirToAirHeatRecoveryType(IfcAirToAirHeatRecoveryType object) {
				return createIfcAirToAirHeatRecoveryTypeAdapter();
			}
			@Override
			public Adapter caseIfcAirToAirHeatRecoveryTypeEnumType(IfcAirToAirHeatRecoveryTypeEnumType object) {
				return createIfcAirToAirHeatRecoveryTypeEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcAlarmType(IfcAlarmType object) {
				return createIfcAlarmTypeAdapter();
			}
			@Override
			public Adapter caseIfcAlarmTypeEnumType(IfcAlarmTypeEnumType object) {
				return createIfcAlarmTypeEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcAmountOfSubstanceMeasureType(IfcAmountOfSubstanceMeasureType object) {
				return createIfcAmountOfSubstanceMeasureTypeAdapter();
			}
			@Override
			public Adapter caseIfcAnalysisModelTypeEnumType(IfcAnalysisModelTypeEnumType object) {
				return createIfcAnalysisModelTypeEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcAnalysisTheoryTypeEnumType(IfcAnalysisTheoryTypeEnumType object) {
				return createIfcAnalysisTheoryTypeEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcAngularDimension(IfcAngularDimension object) {
				return createIfcAngularDimensionAdapter();
			}
			@Override
			public Adapter caseIfcAngularVelocityMeasureType(IfcAngularVelocityMeasureType object) {
				return createIfcAngularVelocityMeasureTypeAdapter();
			}
			@Override
			public Adapter caseIfcAnnotation(IfcAnnotation object) {
				return createIfcAnnotationAdapter();
			}
			@Override
			public Adapter caseIfcAnnotationCurveOccurrence(IfcAnnotationCurveOccurrence object) {
				return createIfcAnnotationCurveOccurrenceAdapter();
			}
			@Override
			public Adapter caseIfcAnnotationFillArea(IfcAnnotationFillArea object) {
				return createIfcAnnotationFillAreaAdapter();
			}
			@Override
			public Adapter caseIfcAnnotationFillAreaOccurrence(IfcAnnotationFillAreaOccurrence object) {
				return createIfcAnnotationFillAreaOccurrenceAdapter();
			}
			@Override
			public Adapter caseIfcAnnotationOccurrence(IfcAnnotationOccurrence object) {
				return createIfcAnnotationOccurrenceAdapter();
			}
			@Override
			public Adapter caseIfcAnnotationSurface(IfcAnnotationSurface object) {
				return createIfcAnnotationSurfaceAdapter();
			}
			@Override
			public Adapter caseIfcAnnotationSurfaceOccurrence(IfcAnnotationSurfaceOccurrence object) {
				return createIfcAnnotationSurfaceOccurrenceAdapter();
			}
			@Override
			public Adapter caseIfcAnnotationSymbolOccurrence(IfcAnnotationSymbolOccurrence object) {
				return createIfcAnnotationSymbolOccurrenceAdapter();
			}
			@Override
			public Adapter caseIfcAnnotationTextOccurrence(IfcAnnotationTextOccurrence object) {
				return createIfcAnnotationTextOccurrenceAdapter();
			}
			@Override
			public Adapter caseIfcApplication(IfcApplication object) {
				return createIfcApplicationAdapter();
			}
			@Override
			public Adapter caseIfcAppliedValue(IfcAppliedValue object) {
				return createIfcAppliedValueAdapter();
			}
			@Override
			public Adapter caseIfcAppliedValueRelationship(IfcAppliedValueRelationship object) {
				return createIfcAppliedValueRelationshipAdapter();
			}
			@Override
			public Adapter caseIfcAppliedValueSelect(IfcAppliedValueSelect object) {
				return createIfcAppliedValueSelectAdapter();
			}
			@Override
			public Adapter caseIfcApproval(IfcApproval object) {
				return createIfcApprovalAdapter();
			}
			@Override
			public Adapter caseIfcApprovalActorRelationship(IfcApprovalActorRelationship object) {
				return createIfcApprovalActorRelationshipAdapter();
			}
			@Override
			public Adapter caseIfcApprovalPropertyRelationship(IfcApprovalPropertyRelationship object) {
				return createIfcApprovalPropertyRelationshipAdapter();
			}
			@Override
			public Adapter caseIfcApprovalRelationship(IfcApprovalRelationship object) {
				return createIfcApprovalRelationshipAdapter();
			}
			@Override
			public Adapter caseIfcArbitraryClosedProfileDef(IfcArbitraryClosedProfileDef object) {
				return createIfcArbitraryClosedProfileDefAdapter();
			}
			@Override
			public Adapter caseIfcArbitraryOpenProfileDef(IfcArbitraryOpenProfileDef object) {
				return createIfcArbitraryOpenProfileDefAdapter();
			}
			@Override
			public Adapter caseIfcArbitraryProfileDefWithVoids(IfcArbitraryProfileDefWithVoids object) {
				return createIfcArbitraryProfileDefWithVoidsAdapter();
			}
			@Override
			public Adapter caseIfcAreaMeasureType(IfcAreaMeasureType object) {
				return createIfcAreaMeasureTypeAdapter();
			}
			@Override
			public Adapter caseIfcArithmeticOperatorEnumType(IfcArithmeticOperatorEnumType object) {
				return createIfcArithmeticOperatorEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcAssemblyPlaceEnumType(IfcAssemblyPlaceEnumType object) {
				return createIfcAssemblyPlaceEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcAsset(IfcAsset object) {
				return createIfcAssetAdapter();
			}
			@Override
			public Adapter caseIfcAsymmetricIShapeProfileDef(IfcAsymmetricIShapeProfileDef object) {
				return createIfcAsymmetricIShapeProfileDefAdapter();
			}
			@Override
			public Adapter caseIfcAxis1Placement(IfcAxis1Placement object) {
				return createIfcAxis1PlacementAdapter();
			}
			@Override
			public Adapter caseIfcAxis2Placement(IfcAxis2Placement object) {
				return createIfcAxis2PlacementAdapter();
			}
			@Override
			public Adapter caseIfcAxis2Placement2D(IfcAxis2Placement2D object) {
				return createIfcAxis2Placement2DAdapter();
			}
			@Override
			public Adapter caseIfcAxis2Placement3D(IfcAxis2Placement3D object) {
				return createIfcAxis2Placement3DAdapter();
			}
			@Override
			public Adapter caseIfcBeam(IfcBeam object) {
				return createIfcBeamAdapter();
			}
			@Override
			public Adapter caseIfcBeamType(IfcBeamType object) {
				return createIfcBeamTypeAdapter();
			}
			@Override
			public Adapter caseIfcBeamTypeEnumType(IfcBeamTypeEnumType object) {
				return createIfcBeamTypeEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcBenchmarkEnumType(IfcBenchmarkEnumType object) {
				return createIfcBenchmarkEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcBezierCurve(IfcBezierCurve object) {
				return createIfcBezierCurveAdapter();
			}
			@Override
			public Adapter caseIfcBlobTexture(IfcBlobTexture object) {
				return createIfcBlobTextureAdapter();
			}
			@Override
			public Adapter caseIfcBlock(IfcBlock object) {
				return createIfcBlockAdapter();
			}
			@Override
			public Adapter caseIfcBoilerType(IfcBoilerType object) {
				return createIfcBoilerTypeAdapter();
			}
			@Override
			public Adapter caseIfcBoilerTypeEnumType(IfcBoilerTypeEnumType object) {
				return createIfcBoilerTypeEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcBooleanClippingResult(IfcBooleanClippingResult object) {
				return createIfcBooleanClippingResultAdapter();
			}
			@Override
			public Adapter caseIfcBooleanOperand(IfcBooleanOperand object) {
				return createIfcBooleanOperandAdapter();
			}
			@Override
			public Adapter caseIfcBooleanOperatorType(IfcBooleanOperatorType object) {
				return createIfcBooleanOperatorTypeAdapter();
			}
			@Override
			public Adapter caseIfcBooleanResult(IfcBooleanResult object) {
				return createIfcBooleanResultAdapter();
			}
			@Override
			public Adapter caseIfcBooleanType(IfcBooleanType object) {
				return createIfcBooleanTypeAdapter();
			}
			@Override
			public Adapter caseIfcBoundaryCondition(IfcBoundaryCondition object) {
				return createIfcBoundaryConditionAdapter();
			}
			@Override
			public Adapter caseIfcBoundaryEdgeCondition(IfcBoundaryEdgeCondition object) {
				return createIfcBoundaryEdgeConditionAdapter();
			}
			@Override
			public Adapter caseIfcBoundaryFaceCondition(IfcBoundaryFaceCondition object) {
				return createIfcBoundaryFaceConditionAdapter();
			}
			@Override
			public Adapter caseIfcBoundaryNodeCondition(IfcBoundaryNodeCondition object) {
				return createIfcBoundaryNodeConditionAdapter();
			}
			@Override
			public Adapter caseIfcBoundaryNodeConditionWarping(IfcBoundaryNodeConditionWarping object) {
				return createIfcBoundaryNodeConditionWarpingAdapter();
			}
			@Override
			public Adapter caseIfcBoundedCurve(IfcBoundedCurve object) {
				return createIfcBoundedCurveAdapter();
			}
			@Override
			public Adapter caseIfcBoundedSurface(IfcBoundedSurface object) {
				return createIfcBoundedSurfaceAdapter();
			}
			@Override
			public Adapter caseIfcBoundingBox(IfcBoundingBox object) {
				return createIfcBoundingBoxAdapter();
			}
			@Override
			public Adapter caseIfcBoxAlignmentType(IfcBoxAlignmentType object) {
				return createIfcBoxAlignmentTypeAdapter();
			}
			@Override
			public Adapter caseIfcBoxedHalfSpace(IfcBoxedHalfSpace object) {
				return createIfcBoxedHalfSpaceAdapter();
			}
			@Override
			public Adapter caseIfcBSplineCurve(IfcBSplineCurve object) {
				return createIfcBSplineCurveAdapter();
			}
			@Override
			public Adapter caseIfcBSplineCurveFormType(IfcBSplineCurveFormType object) {
				return createIfcBSplineCurveFormTypeAdapter();
			}
			@Override
			public Adapter caseIfcBuilding(IfcBuilding object) {
				return createIfcBuildingAdapter();
			}
			@Override
			public Adapter caseIfcBuildingElement(IfcBuildingElement object) {
				return createIfcBuildingElementAdapter();
			}
			@Override
			public Adapter caseIfcBuildingElementComponent(IfcBuildingElementComponent object) {
				return createIfcBuildingElementComponentAdapter();
			}
			@Override
			public Adapter caseIfcBuildingElementPart(IfcBuildingElementPart object) {
				return createIfcBuildingElementPartAdapter();
			}
			@Override
			public Adapter caseIfcBuildingElementProxy(IfcBuildingElementProxy object) {
				return createIfcBuildingElementProxyAdapter();
			}
			@Override
			public Adapter caseIfcBuildingElementProxyType(IfcBuildingElementProxyType object) {
				return createIfcBuildingElementProxyTypeAdapter();
			}
			@Override
			public Adapter caseIfcBuildingElementProxyTypeEnumType(IfcBuildingElementProxyTypeEnumType object) {
				return createIfcBuildingElementProxyTypeEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcBuildingElementType(IfcBuildingElementType object) {
				return createIfcBuildingElementTypeAdapter();
			}
			@Override
			public Adapter caseIfcBuildingStorey(IfcBuildingStorey object) {
				return createIfcBuildingStoreyAdapter();
			}
			@Override
			public Adapter caseIfcCableCarrierFittingType(IfcCableCarrierFittingType object) {
				return createIfcCableCarrierFittingTypeAdapter();
			}
			@Override
			public Adapter caseIfcCableCarrierFittingTypeEnumType(IfcCableCarrierFittingTypeEnumType object) {
				return createIfcCableCarrierFittingTypeEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcCableCarrierSegmentType(IfcCableCarrierSegmentType object) {
				return createIfcCableCarrierSegmentTypeAdapter();
			}
			@Override
			public Adapter caseIfcCableCarrierSegmentTypeEnumType(IfcCableCarrierSegmentTypeEnumType object) {
				return createIfcCableCarrierSegmentTypeEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcCableSegmentType(IfcCableSegmentType object) {
				return createIfcCableSegmentTypeAdapter();
			}
			@Override
			public Adapter caseIfcCableSegmentTypeEnumType(IfcCableSegmentTypeEnumType object) {
				return createIfcCableSegmentTypeEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcCalendarDate(IfcCalendarDate object) {
				return createIfcCalendarDateAdapter();
			}
			@Override
			public Adapter caseIfcCartesianPoint(IfcCartesianPoint object) {
				return createIfcCartesianPointAdapter();
			}
			@Override
			public Adapter caseIfcCartesianTransformationOperator(IfcCartesianTransformationOperator object) {
				return createIfcCartesianTransformationOperatorAdapter();
			}
			@Override
			public Adapter caseIfcCartesianTransformationOperator2D(IfcCartesianTransformationOperator2D object) {
				return createIfcCartesianTransformationOperator2DAdapter();
			}
			@Override
			public Adapter caseIfcCartesianTransformationOperator2DnonUniform(IfcCartesianTransformationOperator2DnonUniform object) {
				return createIfcCartesianTransformationOperator2DnonUniformAdapter();
			}
			@Override
			public Adapter caseIfcCartesianTransformationOperator3D(IfcCartesianTransformationOperator3D object) {
				return createIfcCartesianTransformationOperator3DAdapter();
			}
			@Override
			public Adapter caseIfcCartesianTransformationOperator3DnonUniform(IfcCartesianTransformationOperator3DnonUniform object) {
				return createIfcCartesianTransformationOperator3DnonUniformAdapter();
			}
			@Override
			public Adapter caseIfcCenterLineProfileDef(IfcCenterLineProfileDef object) {
				return createIfcCenterLineProfileDefAdapter();
			}
			@Override
			public Adapter caseIfcChamferEdgeFeature(IfcChamferEdgeFeature object) {
				return createIfcChamferEdgeFeatureAdapter();
			}
			@Override
			public Adapter caseIfcChangeActionEnumType(IfcChangeActionEnumType object) {
				return createIfcChangeActionEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcCharacterStyleSelect(IfcCharacterStyleSelect object) {
				return createIfcCharacterStyleSelectAdapter();
			}
			@Override
			public Adapter caseIfcChillerType(IfcChillerType object) {
				return createIfcChillerTypeAdapter();
			}
			@Override
			public Adapter caseIfcChillerTypeEnumType(IfcChillerTypeEnumType object) {
				return createIfcChillerTypeEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcCircle(IfcCircle object) {
				return createIfcCircleAdapter();
			}
			@Override
			public Adapter caseIfcCircleHollowProfileDef(IfcCircleHollowProfileDef object) {
				return createIfcCircleHollowProfileDefAdapter();
			}
			@Override
			public Adapter caseIfcCircleProfileDef(IfcCircleProfileDef object) {
				return createIfcCircleProfileDefAdapter();
			}
			@Override
			public Adapter caseIfcClassification(IfcClassification object) {
				return createIfcClassificationAdapter();
			}
			@Override
			public Adapter caseIfcClassificationItem(IfcClassificationItem object) {
				return createIfcClassificationItemAdapter();
			}
			@Override
			public Adapter caseIfcClassificationItemRelationship(IfcClassificationItemRelationship object) {
				return createIfcClassificationItemRelationshipAdapter();
			}
			@Override
			public Adapter caseIfcClassificationNotation(IfcClassificationNotation object) {
				return createIfcClassificationNotationAdapter();
			}
			@Override
			public Adapter caseIfcClassificationNotationFacet(IfcClassificationNotationFacet object) {
				return createIfcClassificationNotationFacetAdapter();
			}
			@Override
			public Adapter caseIfcClassificationNotationSelect(IfcClassificationNotationSelect object) {
				return createIfcClassificationNotationSelectAdapter();
			}
			@Override
			public Adapter caseIfcClassificationReference(IfcClassificationReference object) {
				return createIfcClassificationReferenceAdapter();
			}
			@Override
			public Adapter caseIfcClosedShell(IfcClosedShell object) {
				return createIfcClosedShellAdapter();
			}
			@Override
			public Adapter caseIfcCoilType(IfcCoilType object) {
				return createIfcCoilTypeAdapter();
			}
			@Override
			public Adapter caseIfcCoilTypeEnumType(IfcCoilTypeEnumType object) {
				return createIfcCoilTypeEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcColour(IfcColour object) {
				return createIfcColourAdapter();
			}
			@Override
			public Adapter caseIfcColourOrFactor(IfcColourOrFactor object) {
				return createIfcColourOrFactorAdapter();
			}
			@Override
			public Adapter caseIfcColourRgb(IfcColourRgb object) {
				return createIfcColourRgbAdapter();
			}
			@Override
			public Adapter caseIfcColourSpecification(IfcColourSpecification object) {
				return createIfcColourSpecificationAdapter();
			}
			@Override
			public Adapter caseIfcColumn(IfcColumn object) {
				return createIfcColumnAdapter();
			}
			@Override
			public Adapter caseIfcColumnType(IfcColumnType object) {
				return createIfcColumnTypeAdapter();
			}
			@Override
			public Adapter caseIfcColumnTypeEnumType(IfcColumnTypeEnumType object) {
				return createIfcColumnTypeEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcComplexNumber(IfcComplexNumber object) {
				return createIfcComplexNumberAdapter();
			}
			@Override
			public Adapter caseIfcComplexNumberType(IfcComplexNumberType object) {
				return createIfcComplexNumberTypeAdapter();
			}
			@Override
			public Adapter caseIfcComplexProperty(IfcComplexProperty object) {
				return createIfcComplexPropertyAdapter();
			}
			@Override
			public Adapter caseIfcCompositeCurve(IfcCompositeCurve object) {
				return createIfcCompositeCurveAdapter();
			}
			@Override
			public Adapter caseIfcCompositeCurveSegment(IfcCompositeCurveSegment object) {
				return createIfcCompositeCurveSegmentAdapter();
			}
			@Override
			public Adapter caseIfcCompositeProfileDef(IfcCompositeProfileDef object) {
				return createIfcCompositeProfileDefAdapter();
			}
			@Override
			public Adapter caseIfcCompoundPlaneAngleMeasure(IfcCompoundPlaneAngleMeasure object) {
				return createIfcCompoundPlaneAngleMeasureAdapter();
			}
			@Override
			public Adapter caseIfcCompoundPlaneAngleMeasureType(IfcCompoundPlaneAngleMeasureType object) {
				return createIfcCompoundPlaneAngleMeasureTypeAdapter();
			}
			@Override
			public Adapter caseIfcCompressorType(IfcCompressorType object) {
				return createIfcCompressorTypeAdapter();
			}
			@Override
			public Adapter caseIfcCompressorTypeEnumType(IfcCompressorTypeEnumType object) {
				return createIfcCompressorTypeEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcCondenserType(IfcCondenserType object) {
				return createIfcCondenserTypeAdapter();
			}
			@Override
			public Adapter caseIfcCondenserTypeEnumType(IfcCondenserTypeEnumType object) {
				return createIfcCondenserTypeEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcCondition(IfcCondition object) {
				return createIfcConditionAdapter();
			}
			@Override
			public Adapter caseIfcConditionCriterion(IfcConditionCriterion object) {
				return createIfcConditionCriterionAdapter();
			}
			@Override
			public Adapter caseIfcConditionCriterionSelect(IfcConditionCriterionSelect object) {
				return createIfcConditionCriterionSelectAdapter();
			}
			@Override
			public Adapter caseIfcConic(IfcConic object) {
				return createIfcConicAdapter();
			}
			@Override
			public Adapter caseIfcConnectedFaceSet(IfcConnectedFaceSet object) {
				return createIfcConnectedFaceSetAdapter();
			}
			@Override
			public Adapter caseIfcConnectionCurveGeometry(IfcConnectionCurveGeometry object) {
				return createIfcConnectionCurveGeometryAdapter();
			}
			@Override
			public Adapter caseIfcConnectionGeometry(IfcConnectionGeometry object) {
				return createIfcConnectionGeometryAdapter();
			}
			@Override
			public Adapter caseIfcConnectionPointEccentricity(IfcConnectionPointEccentricity object) {
				return createIfcConnectionPointEccentricityAdapter();
			}
			@Override
			public Adapter caseIfcConnectionPointGeometry(IfcConnectionPointGeometry object) {
				return createIfcConnectionPointGeometryAdapter();
			}
			@Override
			public Adapter caseIfcConnectionPortGeometry(IfcConnectionPortGeometry object) {
				return createIfcConnectionPortGeometryAdapter();
			}
			@Override
			public Adapter caseIfcConnectionSurfaceGeometry(IfcConnectionSurfaceGeometry object) {
				return createIfcConnectionSurfaceGeometryAdapter();
			}
			@Override
			public Adapter caseIfcConnectionTypeEnumType(IfcConnectionTypeEnumType object) {
				return createIfcConnectionTypeEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcConstraint(IfcConstraint object) {
				return createIfcConstraintAdapter();
			}
			@Override
			public Adapter caseIfcConstraintAggregationRelationship(IfcConstraintAggregationRelationship object) {
				return createIfcConstraintAggregationRelationshipAdapter();
			}
			@Override
			public Adapter caseIfcConstraintClassificationRelationship(IfcConstraintClassificationRelationship object) {
				return createIfcConstraintClassificationRelationshipAdapter();
			}
			@Override
			public Adapter caseIfcConstraintEnumType(IfcConstraintEnumType object) {
				return createIfcConstraintEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcConstraintRelationship(IfcConstraintRelationship object) {
				return createIfcConstraintRelationshipAdapter();
			}
			@Override
			public Adapter caseIfcConstructionEquipmentResource(IfcConstructionEquipmentResource object) {
				return createIfcConstructionEquipmentResourceAdapter();
			}
			@Override
			public Adapter caseIfcConstructionMaterialResource(IfcConstructionMaterialResource object) {
				return createIfcConstructionMaterialResourceAdapter();
			}
			@Override
			public Adapter caseIfcConstructionProductResource(IfcConstructionProductResource object) {
				return createIfcConstructionProductResourceAdapter();
			}
			@Override
			public Adapter caseIfcConstructionResource(IfcConstructionResource object) {
				return createIfcConstructionResourceAdapter();
			}
			@Override
			public Adapter caseIfcContextDependentMeasureType(IfcContextDependentMeasureType object) {
				return createIfcContextDependentMeasureTypeAdapter();
			}
			@Override
			public Adapter caseIfcContextDependentUnit(IfcContextDependentUnit object) {
				return createIfcContextDependentUnitAdapter();
			}
			@Override
			public Adapter caseIfcControl(IfcControl object) {
				return createIfcControlAdapter();
			}
			@Override
			public Adapter caseIfcControllerType(IfcControllerType object) {
				return createIfcControllerTypeAdapter();
			}
			@Override
			public Adapter caseIfcControllerTypeEnumType(IfcControllerTypeEnumType object) {
				return createIfcControllerTypeEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcConversionBasedUnit(IfcConversionBasedUnit object) {
				return createIfcConversionBasedUnitAdapter();
			}
			@Override
			public Adapter caseIfcCooledBeamType(IfcCooledBeamType object) {
				return createIfcCooledBeamTypeAdapter();
			}
			@Override
			public Adapter caseIfcCooledBeamTypeEnumType(IfcCooledBeamTypeEnumType object) {
				return createIfcCooledBeamTypeEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcCoolingTowerType(IfcCoolingTowerType object) {
				return createIfcCoolingTowerTypeAdapter();
			}
			@Override
			public Adapter caseIfcCoolingTowerTypeEnumType(IfcCoolingTowerTypeEnumType object) {
				return createIfcCoolingTowerTypeEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcCoordinatedUniversalTimeOffset(IfcCoordinatedUniversalTimeOffset object) {
				return createIfcCoordinatedUniversalTimeOffsetAdapter();
			}
			@Override
			public Adapter caseIfcCostItem(IfcCostItem object) {
				return createIfcCostItemAdapter();
			}
			@Override
			public Adapter caseIfcCostSchedule(IfcCostSchedule object) {
				return createIfcCostScheduleAdapter();
			}
			@Override
			public Adapter caseIfcCostScheduleTypeEnumType(IfcCostScheduleTypeEnumType object) {
				return createIfcCostScheduleTypeEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcCostValue(IfcCostValue object) {
				return createIfcCostValueAdapter();
			}
			@Override
			public Adapter caseIfcCountMeasureType(IfcCountMeasureType object) {
				return createIfcCountMeasureTypeAdapter();
			}
			@Override
			public Adapter caseIfcCovering(IfcCovering object) {
				return createIfcCoveringAdapter();
			}
			@Override
			public Adapter caseIfcCoveringType(IfcCoveringType object) {
				return createIfcCoveringTypeAdapter();
			}
			@Override
			public Adapter caseIfcCoveringTypeEnumType(IfcCoveringTypeEnumType object) {
				return createIfcCoveringTypeEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcCraneRailAShapeProfileDef(IfcCraneRailAShapeProfileDef object) {
				return createIfcCraneRailAShapeProfileDefAdapter();
			}
			@Override
			public Adapter caseIfcCraneRailFShapeProfileDef(IfcCraneRailFShapeProfileDef object) {
				return createIfcCraneRailFShapeProfileDefAdapter();
			}
			@Override
			public Adapter caseIfcCrewResource(IfcCrewResource object) {
				return createIfcCrewResourceAdapter();
			}
			@Override
			public Adapter caseIfcCsgPrimitive3D(IfcCsgPrimitive3D object) {
				return createIfcCsgPrimitive3DAdapter();
			}
			@Override
			public Adapter caseIfcCsgSelect(IfcCsgSelect object) {
				return createIfcCsgSelectAdapter();
			}
			@Override
			public Adapter caseIfcCsgSolid(IfcCsgSolid object) {
				return createIfcCsgSolidAdapter();
			}
			@Override
			public Adapter caseIfcCShapeProfileDef(IfcCShapeProfileDef object) {
				return createIfcCShapeProfileDefAdapter();
			}
			@Override
			public Adapter caseIfcCurrencyEnumType(IfcCurrencyEnumType object) {
				return createIfcCurrencyEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcCurrencyRelationship(IfcCurrencyRelationship object) {
				return createIfcCurrencyRelationshipAdapter();
			}
			@Override
			public Adapter caseIfcCurtainWall(IfcCurtainWall object) {
				return createIfcCurtainWallAdapter();
			}
			@Override
			public Adapter caseIfcCurtainWallType(IfcCurtainWallType object) {
				return createIfcCurtainWallTypeAdapter();
			}
			@Override
			public Adapter caseIfcCurtainWallTypeEnumType(IfcCurtainWallTypeEnumType object) {
				return createIfcCurtainWallTypeEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcCurvatureMeasureType(IfcCurvatureMeasureType object) {
				return createIfcCurvatureMeasureTypeAdapter();
			}
			@Override
			public Adapter caseIfcCurve(IfcCurve object) {
				return createIfcCurveAdapter();
			}
			@Override
			public Adapter caseIfcCurveBoundedPlane(IfcCurveBoundedPlane object) {
				return createIfcCurveBoundedPlaneAdapter();
			}
			@Override
			public Adapter caseIfcCurveFontOrScaledCurveFontSelect(IfcCurveFontOrScaledCurveFontSelect object) {
				return createIfcCurveFontOrScaledCurveFontSelectAdapter();
			}
			@Override
			public Adapter caseIfcCurveOrEdgeCurve(IfcCurveOrEdgeCurve object) {
				return createIfcCurveOrEdgeCurveAdapter();
			}
			@Override
			public Adapter caseIfcCurveStyle(IfcCurveStyle object) {
				return createIfcCurveStyleAdapter();
			}
			@Override
			public Adapter caseIfcCurveStyleFont(IfcCurveStyleFont object) {
				return createIfcCurveStyleFontAdapter();
			}
			@Override
			public Adapter caseIfcCurveStyleFontAndScaling(IfcCurveStyleFontAndScaling object) {
				return createIfcCurveStyleFontAndScalingAdapter();
			}
			@Override
			public Adapter caseIfcCurveStyleFontPattern(IfcCurveStyleFontPattern object) {
				return createIfcCurveStyleFontPatternAdapter();
			}
			@Override
			public Adapter caseIfcCurveStyleFontSelect(IfcCurveStyleFontSelect object) {
				return createIfcCurveStyleFontSelectAdapter();
			}
			@Override
			public Adapter caseIfcDamperType(IfcDamperType object) {
				return createIfcDamperTypeAdapter();
			}
			@Override
			public Adapter caseIfcDamperTypeEnumType(IfcDamperTypeEnumType object) {
				return createIfcDamperTypeEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcDataOriginEnumType(IfcDataOriginEnumType object) {
				return createIfcDataOriginEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcDateAndTime(IfcDateAndTime object) {
				return createIfcDateAndTimeAdapter();
			}
			@Override
			public Adapter caseIfcDateTimeSelect(IfcDateTimeSelect object) {
				return createIfcDateTimeSelectAdapter();
			}
			@Override
			public Adapter caseIfcDayInMonthNumberType(IfcDayInMonthNumberType object) {
				return createIfcDayInMonthNumberTypeAdapter();
			}
			@Override
			public Adapter caseIfcDaylightSavingHourType(IfcDaylightSavingHourType object) {
				return createIfcDaylightSavingHourTypeAdapter();
			}
			@Override
			public Adapter caseIfcDefinedSymbol(IfcDefinedSymbol object) {
				return createIfcDefinedSymbolAdapter();
			}
			@Override
			public Adapter caseIfcDefinedSymbolSelect(IfcDefinedSymbolSelect object) {
				return createIfcDefinedSymbolSelectAdapter();
			}
			@Override
			public Adapter caseIfcDerivedMeasureValue(IfcDerivedMeasureValue object) {
				return createIfcDerivedMeasureValueAdapter();
			}
			@Override
			public Adapter caseIfcDerivedProfileDef(IfcDerivedProfileDef object) {
				return createIfcDerivedProfileDefAdapter();
			}
			@Override
			public Adapter caseIfcDerivedUnit(IfcDerivedUnit object) {
				return createIfcDerivedUnitAdapter();
			}
			@Override
			public Adapter caseIfcDerivedUnitElement(IfcDerivedUnitElement object) {
				return createIfcDerivedUnitElementAdapter();
			}
			@Override
			public Adapter caseIfcDerivedUnitEnumType(IfcDerivedUnitEnumType object) {
				return createIfcDerivedUnitEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcDescriptiveMeasureType(IfcDescriptiveMeasureType object) {
				return createIfcDescriptiveMeasureTypeAdapter();
			}
			@Override
			public Adapter caseIfcDiameterDimension(IfcDiameterDimension object) {
				return createIfcDiameterDimensionAdapter();
			}
			@Override
			public Adapter caseIfcDimensionalExponents(IfcDimensionalExponents object) {
				return createIfcDimensionalExponentsAdapter();
			}
			@Override
			public Adapter caseIfcDimensionCalloutRelationship(IfcDimensionCalloutRelationship object) {
				return createIfcDimensionCalloutRelationshipAdapter();
			}
			@Override
			public Adapter caseIfcDimensionCountType(IfcDimensionCountType object) {
				return createIfcDimensionCountTypeAdapter();
			}
			@Override
			public Adapter caseIfcDimensionCurve(IfcDimensionCurve object) {
				return createIfcDimensionCurveAdapter();
			}
			@Override
			public Adapter caseIfcDimensionCurveDirectedCallout(IfcDimensionCurveDirectedCallout object) {
				return createIfcDimensionCurveDirectedCalloutAdapter();
			}
			@Override
			public Adapter caseIfcDimensionCurveTerminator(IfcDimensionCurveTerminator object) {
				return createIfcDimensionCurveTerminatorAdapter();
			}
			@Override
			public Adapter caseIfcDimensionExtentUsageType(IfcDimensionExtentUsageType object) {
				return createIfcDimensionExtentUsageTypeAdapter();
			}
			@Override
			public Adapter caseIfcDimensionPair(IfcDimensionPair object) {
				return createIfcDimensionPairAdapter();
			}
			@Override
			public Adapter caseIfcDirection(IfcDirection object) {
				return createIfcDirectionAdapter();
			}
			@Override
			public Adapter caseIfcDirectionSenseEnumType(IfcDirectionSenseEnumType object) {
				return createIfcDirectionSenseEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcDiscreteAccessory(IfcDiscreteAccessory object) {
				return createIfcDiscreteAccessoryAdapter();
			}
			@Override
			public Adapter caseIfcDiscreteAccessoryType(IfcDiscreteAccessoryType object) {
				return createIfcDiscreteAccessoryTypeAdapter();
			}
			@Override
			public Adapter caseIfcDistributionChamberElement(IfcDistributionChamberElement object) {
				return createIfcDistributionChamberElementAdapter();
			}
			@Override
			public Adapter caseIfcDistributionChamberElementType(IfcDistributionChamberElementType object) {
				return createIfcDistributionChamberElementTypeAdapter();
			}
			@Override
			public Adapter caseIfcDistributionChamberElementTypeEnumType(IfcDistributionChamberElementTypeEnumType object) {
				return createIfcDistributionChamberElementTypeEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcDistributionControlElement(IfcDistributionControlElement object) {
				return createIfcDistributionControlElementAdapter();
			}
			@Override
			public Adapter caseIfcDistributionControlElementType(IfcDistributionControlElementType object) {
				return createIfcDistributionControlElementTypeAdapter();
			}
			@Override
			public Adapter caseIfcDistributionElement(IfcDistributionElement object) {
				return createIfcDistributionElementAdapter();
			}
			@Override
			public Adapter caseIfcDistributionElementType(IfcDistributionElementType object) {
				return createIfcDistributionElementTypeAdapter();
			}
			@Override
			public Adapter caseIfcDistributionFlowElement(IfcDistributionFlowElement object) {
				return createIfcDistributionFlowElementAdapter();
			}
			@Override
			public Adapter caseIfcDistributionFlowElementType(IfcDistributionFlowElementType object) {
				return createIfcDistributionFlowElementTypeAdapter();
			}
			@Override
			public Adapter caseIfcDistributionPort(IfcDistributionPort object) {
				return createIfcDistributionPortAdapter();
			}
			@Override
			public Adapter caseIfcDocumentConfidentialityEnumType(IfcDocumentConfidentialityEnumType object) {
				return createIfcDocumentConfidentialityEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcDocumentElectronicFormat(IfcDocumentElectronicFormat object) {
				return createIfcDocumentElectronicFormatAdapter();
			}
			@Override
			public Adapter caseIfcDocumentInformation(IfcDocumentInformation object) {
				return createIfcDocumentInformationAdapter();
			}
			@Override
			public Adapter caseIfcDocumentInformationRelationship(IfcDocumentInformationRelationship object) {
				return createIfcDocumentInformationRelationshipAdapter();
			}
			@Override
			public Adapter caseIfcDocumentReference(IfcDocumentReference object) {
				return createIfcDocumentReferenceAdapter();
			}
			@Override
			public Adapter caseIfcDocumentSelect(IfcDocumentSelect object) {
				return createIfcDocumentSelectAdapter();
			}
			@Override
			public Adapter caseIfcDocumentStatusEnumType(IfcDocumentStatusEnumType object) {
				return createIfcDocumentStatusEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcDoor(IfcDoor object) {
				return createIfcDoorAdapter();
			}
			@Override
			public Adapter caseIfcDoorLiningProperties(IfcDoorLiningProperties object) {
				return createIfcDoorLiningPropertiesAdapter();
			}
			@Override
			public Adapter caseIfcDoorPanelOperationEnumType(IfcDoorPanelOperationEnumType object) {
				return createIfcDoorPanelOperationEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcDoorPanelPositionEnumType(IfcDoorPanelPositionEnumType object) {
				return createIfcDoorPanelPositionEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcDoorPanelProperties(IfcDoorPanelProperties object) {
				return createIfcDoorPanelPropertiesAdapter();
			}
			@Override
			public Adapter caseIfcDoorStyle(IfcDoorStyle object) {
				return createIfcDoorStyleAdapter();
			}
			@Override
			public Adapter caseIfcDoorStyleConstructionEnumType(IfcDoorStyleConstructionEnumType object) {
				return createIfcDoorStyleConstructionEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcDoorStyleOperationEnumType(IfcDoorStyleOperationEnumType object) {
				return createIfcDoorStyleOperationEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcDoseEquivalentMeasureType(IfcDoseEquivalentMeasureType object) {
				return createIfcDoseEquivalentMeasureTypeAdapter();
			}
			@Override
			public Adapter caseIfcDraughtingCallout(IfcDraughtingCallout object) {
				return createIfcDraughtingCalloutAdapter();
			}
			@Override
			public Adapter caseIfcDraughtingCalloutElement(IfcDraughtingCalloutElement object) {
				return createIfcDraughtingCalloutElementAdapter();
			}
			@Override
			public Adapter caseIfcDraughtingCalloutRelationship(IfcDraughtingCalloutRelationship object) {
				return createIfcDraughtingCalloutRelationshipAdapter();
			}
			@Override
			public Adapter caseIfcDraughtingPreDefinedColour(IfcDraughtingPreDefinedColour object) {
				return createIfcDraughtingPreDefinedColourAdapter();
			}
			@Override
			public Adapter caseIfcDraughtingPreDefinedCurveFont(IfcDraughtingPreDefinedCurveFont object) {
				return createIfcDraughtingPreDefinedCurveFontAdapter();
			}
			@Override
			public Adapter caseIfcDraughtingPreDefinedTextFont(IfcDraughtingPreDefinedTextFont object) {
				return createIfcDraughtingPreDefinedTextFontAdapter();
			}
			@Override
			public Adapter caseIfcDuctFittingType(IfcDuctFittingType object) {
				return createIfcDuctFittingTypeAdapter();
			}
			@Override
			public Adapter caseIfcDuctFittingTypeEnumType(IfcDuctFittingTypeEnumType object) {
				return createIfcDuctFittingTypeEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcDuctSegmentType(IfcDuctSegmentType object) {
				return createIfcDuctSegmentTypeAdapter();
			}
			@Override
			public Adapter caseIfcDuctSegmentTypeEnumType(IfcDuctSegmentTypeEnumType object) {
				return createIfcDuctSegmentTypeEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcDuctSilencerType(IfcDuctSilencerType object) {
				return createIfcDuctSilencerTypeAdapter();
			}
			@Override
			public Adapter caseIfcDuctSilencerTypeEnumType(IfcDuctSilencerTypeEnumType object) {
				return createIfcDuctSilencerTypeEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcDynamicViscosityMeasureType(IfcDynamicViscosityMeasureType object) {
				return createIfcDynamicViscosityMeasureTypeAdapter();
			}
			@Override
			public Adapter caseIfcEdge(IfcEdge object) {
				return createIfcEdgeAdapter();
			}
			@Override
			public Adapter caseIfcEdgeCurve(IfcEdgeCurve object) {
				return createIfcEdgeCurveAdapter();
			}
			@Override
			public Adapter caseIfcEdgeFeature(IfcEdgeFeature object) {
				return createIfcEdgeFeatureAdapter();
			}
			@Override
			public Adapter caseIfcEdgeLoop(IfcEdgeLoop object) {
				return createIfcEdgeLoopAdapter();
			}
			@Override
			public Adapter caseIfcElectricalBaseProperties(IfcElectricalBaseProperties object) {
				return createIfcElectricalBasePropertiesAdapter();
			}
			@Override
			public Adapter caseIfcElectricalCircuit(IfcElectricalCircuit object) {
				return createIfcElectricalCircuitAdapter();
			}
			@Override
			public Adapter caseIfcElectricalElement(IfcElectricalElement object) {
				return createIfcElectricalElementAdapter();
			}
			@Override
			public Adapter caseIfcElectricApplianceType(IfcElectricApplianceType object) {
				return createIfcElectricApplianceTypeAdapter();
			}
			@Override
			public Adapter caseIfcElectricApplianceTypeEnumType(IfcElectricApplianceTypeEnumType object) {
				return createIfcElectricApplianceTypeEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcElectricCapacitanceMeasureType(IfcElectricCapacitanceMeasureType object) {
				return createIfcElectricCapacitanceMeasureTypeAdapter();
			}
			@Override
			public Adapter caseIfcElectricChargeMeasureType(IfcElectricChargeMeasureType object) {
				return createIfcElectricChargeMeasureTypeAdapter();
			}
			@Override
			public Adapter caseIfcElectricConductanceMeasureType(IfcElectricConductanceMeasureType object) {
				return createIfcElectricConductanceMeasureTypeAdapter();
			}
			@Override
			public Adapter caseIfcElectricCurrentEnumType(IfcElectricCurrentEnumType object) {
				return createIfcElectricCurrentEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcElectricCurrentMeasureType(IfcElectricCurrentMeasureType object) {
				return createIfcElectricCurrentMeasureTypeAdapter();
			}
			@Override
			public Adapter caseIfcElectricDistributionPoint(IfcElectricDistributionPoint object) {
				return createIfcElectricDistributionPointAdapter();
			}
			@Override
			public Adapter caseIfcElectricDistributionPointFunctionEnumType(IfcElectricDistributionPointFunctionEnumType object) {
				return createIfcElectricDistributionPointFunctionEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcElectricFlowStorageDeviceType(IfcElectricFlowStorageDeviceType object) {
				return createIfcElectricFlowStorageDeviceTypeAdapter();
			}
			@Override
			public Adapter caseIfcElectricFlowStorageDeviceTypeEnumType(IfcElectricFlowStorageDeviceTypeEnumType object) {
				return createIfcElectricFlowStorageDeviceTypeEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcElectricGeneratorType(IfcElectricGeneratorType object) {
				return createIfcElectricGeneratorTypeAdapter();
			}
			@Override
			public Adapter caseIfcElectricGeneratorTypeEnumType(IfcElectricGeneratorTypeEnumType object) {
				return createIfcElectricGeneratorTypeEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcElectricHeaterType(IfcElectricHeaterType object) {
				return createIfcElectricHeaterTypeAdapter();
			}
			@Override
			public Adapter caseIfcElectricHeaterTypeEnumType(IfcElectricHeaterTypeEnumType object) {
				return createIfcElectricHeaterTypeEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcElectricMotorType(IfcElectricMotorType object) {
				return createIfcElectricMotorTypeAdapter();
			}
			@Override
			public Adapter caseIfcElectricMotorTypeEnumType(IfcElectricMotorTypeEnumType object) {
				return createIfcElectricMotorTypeEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcElectricResistanceMeasureType(IfcElectricResistanceMeasureType object) {
				return createIfcElectricResistanceMeasureTypeAdapter();
			}
			@Override
			public Adapter caseIfcElectricTimeControlType(IfcElectricTimeControlType object) {
				return createIfcElectricTimeControlTypeAdapter();
			}
			@Override
			public Adapter caseIfcElectricTimeControlTypeEnumType(IfcElectricTimeControlTypeEnumType object) {
				return createIfcElectricTimeControlTypeEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcElectricVoltageMeasureType(IfcElectricVoltageMeasureType object) {
				return createIfcElectricVoltageMeasureTypeAdapter();
			}
			@Override
			public Adapter caseIfcElement(IfcElement object) {
				return createIfcElementAdapter();
			}
			@Override
			public Adapter caseIfcElementarySurface(IfcElementarySurface object) {
				return createIfcElementarySurfaceAdapter();
			}
			@Override
			public Adapter caseIfcElementAssembly(IfcElementAssembly object) {
				return createIfcElementAssemblyAdapter();
			}
			@Override
			public Adapter caseIfcElementAssemblyTypeEnumType(IfcElementAssemblyTypeEnumType object) {
				return createIfcElementAssemblyTypeEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcElementComponent(IfcElementComponent object) {
				return createIfcElementComponentAdapter();
			}
			@Override
			public Adapter caseIfcElementComponentType(IfcElementComponentType object) {
				return createIfcElementComponentTypeAdapter();
			}
			@Override
			public Adapter caseIfcElementCompositionEnumType(IfcElementCompositionEnumType object) {
				return createIfcElementCompositionEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcElementQuantity(IfcElementQuantity object) {
				return createIfcElementQuantityAdapter();
			}
			@Override
			public Adapter caseIfcElementType(IfcElementType object) {
				return createIfcElementTypeAdapter();
			}
			@Override
			public Adapter caseIfcEllipse(IfcEllipse object) {
				return createIfcEllipseAdapter();
			}
			@Override
			public Adapter caseIfcEllipseProfileDef(IfcEllipseProfileDef object) {
				return createIfcEllipseProfileDefAdapter();
			}
			@Override
			public Adapter caseIfcEnergyConversionDevice(IfcEnergyConversionDevice object) {
				return createIfcEnergyConversionDeviceAdapter();
			}
			@Override
			public Adapter caseIfcEnergyConversionDeviceType(IfcEnergyConversionDeviceType object) {
				return createIfcEnergyConversionDeviceTypeAdapter();
			}
			@Override
			public Adapter caseIfcEnergyMeasureType(IfcEnergyMeasureType object) {
				return createIfcEnergyMeasureTypeAdapter();
			}
			@Override
			public Adapter caseIfcEnergyProperties(IfcEnergyProperties object) {
				return createIfcEnergyPropertiesAdapter();
			}
			@Override
			public Adapter caseIfcEnergySequenceEnumType(IfcEnergySequenceEnumType object) {
				return createIfcEnergySequenceEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcEnvironmentalImpactCategoryEnumType(IfcEnvironmentalImpactCategoryEnumType object) {
				return createIfcEnvironmentalImpactCategoryEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcEnvironmentalImpactValue(IfcEnvironmentalImpactValue object) {
				return createIfcEnvironmentalImpactValueAdapter();
			}
			@Override
			public Adapter caseIfcEquipmentElement(IfcEquipmentElement object) {
				return createIfcEquipmentElementAdapter();
			}
			@Override
			public Adapter caseIfcEquipmentStandard(IfcEquipmentStandard object) {
				return createIfcEquipmentStandardAdapter();
			}
			@Override
			public Adapter caseIfcEvaporativeCoolerType(IfcEvaporativeCoolerType object) {
				return createIfcEvaporativeCoolerTypeAdapter();
			}
			@Override
			public Adapter caseIfcEvaporativeCoolerTypeEnumType(IfcEvaporativeCoolerTypeEnumType object) {
				return createIfcEvaporativeCoolerTypeEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcEvaporatorType(IfcEvaporatorType object) {
				return createIfcEvaporatorTypeAdapter();
			}
			@Override
			public Adapter caseIfcEvaporatorTypeEnumType(IfcEvaporatorTypeEnumType object) {
				return createIfcEvaporatorTypeEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcExtendedMaterialProperties(IfcExtendedMaterialProperties object) {
				return createIfcExtendedMaterialPropertiesAdapter();
			}
			@Override
			public Adapter caseIfcExternallyDefinedHatchStyle(IfcExternallyDefinedHatchStyle object) {
				return createIfcExternallyDefinedHatchStyleAdapter();
			}
			@Override
			public Adapter caseIfcExternallyDefinedSurfaceStyle(IfcExternallyDefinedSurfaceStyle object) {
				return createIfcExternallyDefinedSurfaceStyleAdapter();
			}
			@Override
			public Adapter caseIfcExternallyDefinedSymbol(IfcExternallyDefinedSymbol object) {
				return createIfcExternallyDefinedSymbolAdapter();
			}
			@Override
			public Adapter caseIfcExternallyDefinedTextFont(IfcExternallyDefinedTextFont object) {
				return createIfcExternallyDefinedTextFontAdapter();
			}
			@Override
			public Adapter caseIfcExternalReference(IfcExternalReference object) {
				return createIfcExternalReferenceAdapter();
			}
			@Override
			public Adapter caseIfcExtrudedAreaSolid(IfcExtrudedAreaSolid object) {
				return createIfcExtrudedAreaSolidAdapter();
			}
			@Override
			public Adapter caseIfcFace(IfcFace object) {
				return createIfcFaceAdapter();
			}
			@Override
			public Adapter caseIfcFaceBasedSurfaceModel(IfcFaceBasedSurfaceModel object) {
				return createIfcFaceBasedSurfaceModelAdapter();
			}
			@Override
			public Adapter caseIfcFaceBound(IfcFaceBound object) {
				return createIfcFaceBoundAdapter();
			}
			@Override
			public Adapter caseIfcFaceOuterBound(IfcFaceOuterBound object) {
				return createIfcFaceOuterBoundAdapter();
			}
			@Override
			public Adapter caseIfcFaceSurface(IfcFaceSurface object) {
				return createIfcFaceSurfaceAdapter();
			}
			@Override
			public Adapter caseIfcFacetedBrep(IfcFacetedBrep object) {
				return createIfcFacetedBrepAdapter();
			}
			@Override
			public Adapter caseIfcFacetedBrepWithVoids(IfcFacetedBrepWithVoids object) {
				return createIfcFacetedBrepWithVoidsAdapter();
			}
			@Override
			public Adapter caseIfcFailureConnectionCondition(IfcFailureConnectionCondition object) {
				return createIfcFailureConnectionConditionAdapter();
			}
			@Override
			public Adapter caseIfcFanType(IfcFanType object) {
				return createIfcFanTypeAdapter();
			}
			@Override
			public Adapter caseIfcFanTypeEnumType(IfcFanTypeEnumType object) {
				return createIfcFanTypeEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcFastener(IfcFastener object) {
				return createIfcFastenerAdapter();
			}
			@Override
			public Adapter caseIfcFastenerType(IfcFastenerType object) {
				return createIfcFastenerTypeAdapter();
			}
			@Override
			public Adapter caseIfcFeatureElement(IfcFeatureElement object) {
				return createIfcFeatureElementAdapter();
			}
			@Override
			public Adapter caseIfcFeatureElementAddition(IfcFeatureElementAddition object) {
				return createIfcFeatureElementAdditionAdapter();
			}
			@Override
			public Adapter caseIfcFeatureElementSubtraction(IfcFeatureElementSubtraction object) {
				return createIfcFeatureElementSubtractionAdapter();
			}
			@Override
			public Adapter caseIfcFillAreaStyle(IfcFillAreaStyle object) {
				return createIfcFillAreaStyleAdapter();
			}
			@Override
			public Adapter caseIfcFillAreaStyleHatching(IfcFillAreaStyleHatching object) {
				return createIfcFillAreaStyleHatchingAdapter();
			}
			@Override
			public Adapter caseIfcFillAreaStyleTiles(IfcFillAreaStyleTiles object) {
				return createIfcFillAreaStyleTilesAdapter();
			}
			@Override
			public Adapter caseIfcFillAreaStyleTileShapeSelect(IfcFillAreaStyleTileShapeSelect object) {
				return createIfcFillAreaStyleTileShapeSelectAdapter();
			}
			@Override
			public Adapter caseIfcFillAreaStyleTileSymbolWithStyle(IfcFillAreaStyleTileSymbolWithStyle object) {
				return createIfcFillAreaStyleTileSymbolWithStyleAdapter();
			}
			@Override
			public Adapter caseIfcFillStyleSelect(IfcFillStyleSelect object) {
				return createIfcFillStyleSelectAdapter();
			}
			@Override
			public Adapter caseIfcFilterType(IfcFilterType object) {
				return createIfcFilterTypeAdapter();
			}
			@Override
			public Adapter caseIfcFilterTypeEnumType(IfcFilterTypeEnumType object) {
				return createIfcFilterTypeEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcFireSuppressionTerminalType(IfcFireSuppressionTerminalType object) {
				return createIfcFireSuppressionTerminalTypeAdapter();
			}
			@Override
			public Adapter caseIfcFireSuppressionTerminalTypeEnumType(IfcFireSuppressionTerminalTypeEnumType object) {
				return createIfcFireSuppressionTerminalTypeEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcFlowController(IfcFlowController object) {
				return createIfcFlowControllerAdapter();
			}
			@Override
			public Adapter caseIfcFlowControllerType(IfcFlowControllerType object) {
				return createIfcFlowControllerTypeAdapter();
			}
			@Override
			public Adapter caseIfcFlowDirectionEnumType(IfcFlowDirectionEnumType object) {
				return createIfcFlowDirectionEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcFlowFitting(IfcFlowFitting object) {
				return createIfcFlowFittingAdapter();
			}
			@Override
			public Adapter caseIfcFlowFittingType(IfcFlowFittingType object) {
				return createIfcFlowFittingTypeAdapter();
			}
			@Override
			public Adapter caseIfcFlowInstrumentType(IfcFlowInstrumentType object) {
				return createIfcFlowInstrumentTypeAdapter();
			}
			@Override
			public Adapter caseIfcFlowInstrumentTypeEnumType(IfcFlowInstrumentTypeEnumType object) {
				return createIfcFlowInstrumentTypeEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcFlowMeterType(IfcFlowMeterType object) {
				return createIfcFlowMeterTypeAdapter();
			}
			@Override
			public Adapter caseIfcFlowMeterTypeEnumType(IfcFlowMeterTypeEnumType object) {
				return createIfcFlowMeterTypeEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcFlowMovingDevice(IfcFlowMovingDevice object) {
				return createIfcFlowMovingDeviceAdapter();
			}
			@Override
			public Adapter caseIfcFlowMovingDeviceType(IfcFlowMovingDeviceType object) {
				return createIfcFlowMovingDeviceTypeAdapter();
			}
			@Override
			public Adapter caseIfcFlowSegment(IfcFlowSegment object) {
				return createIfcFlowSegmentAdapter();
			}
			@Override
			public Adapter caseIfcFlowSegmentType(IfcFlowSegmentType object) {
				return createIfcFlowSegmentTypeAdapter();
			}
			@Override
			public Adapter caseIfcFlowStorageDevice(IfcFlowStorageDevice object) {
				return createIfcFlowStorageDeviceAdapter();
			}
			@Override
			public Adapter caseIfcFlowStorageDeviceType(IfcFlowStorageDeviceType object) {
				return createIfcFlowStorageDeviceTypeAdapter();
			}
			@Override
			public Adapter caseIfcFlowTerminal(IfcFlowTerminal object) {
				return createIfcFlowTerminalAdapter();
			}
			@Override
			public Adapter caseIfcFlowTerminalType(IfcFlowTerminalType object) {
				return createIfcFlowTerminalTypeAdapter();
			}
			@Override
			public Adapter caseIfcFlowTreatmentDevice(IfcFlowTreatmentDevice object) {
				return createIfcFlowTreatmentDeviceAdapter();
			}
			@Override
			public Adapter caseIfcFlowTreatmentDeviceType(IfcFlowTreatmentDeviceType object) {
				return createIfcFlowTreatmentDeviceTypeAdapter();
			}
			@Override
			public Adapter caseIfcFluidFlowProperties(IfcFluidFlowProperties object) {
				return createIfcFluidFlowPropertiesAdapter();
			}
			@Override
			public Adapter caseIfcFontStyleType(IfcFontStyleType object) {
				return createIfcFontStyleTypeAdapter();
			}
			@Override
			public Adapter caseIfcFontVariantType(IfcFontVariantType object) {
				return createIfcFontVariantTypeAdapter();
			}
			@Override
			public Adapter caseIfcFontWeightType(IfcFontWeightType object) {
				return createIfcFontWeightTypeAdapter();
			}
			@Override
			public Adapter caseIfcFooting(IfcFooting object) {
				return createIfcFootingAdapter();
			}
			@Override
			public Adapter caseIfcFootingTypeEnumType(IfcFootingTypeEnumType object) {
				return createIfcFootingTypeEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcForceMeasureType(IfcForceMeasureType object) {
				return createIfcForceMeasureTypeAdapter();
			}
			@Override
			public Adapter caseIfcFrequencyMeasureType(IfcFrequencyMeasureType object) {
				return createIfcFrequencyMeasureTypeAdapter();
			}
			@Override
			public Adapter caseIfcFuelProperties(IfcFuelProperties object) {
				return createIfcFuelPropertiesAdapter();
			}
			@Override
			public Adapter caseIfcFurnishingElement(IfcFurnishingElement object) {
				return createIfcFurnishingElementAdapter();
			}
			@Override
			public Adapter caseIfcFurnishingElementType(IfcFurnishingElementType object) {
				return createIfcFurnishingElementTypeAdapter();
			}
			@Override
			public Adapter caseIfcFurnitureStandard(IfcFurnitureStandard object) {
				return createIfcFurnitureStandardAdapter();
			}
			@Override
			public Adapter caseIfcFurnitureType(IfcFurnitureType object) {
				return createIfcFurnitureTypeAdapter();
			}
			@Override
			public Adapter caseIfcGasTerminalType(IfcGasTerminalType object) {
				return createIfcGasTerminalTypeAdapter();
			}
			@Override
			public Adapter caseIfcGasTerminalTypeEnumType(IfcGasTerminalTypeEnumType object) {
				return createIfcGasTerminalTypeEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcGeneralMaterialProperties(IfcGeneralMaterialProperties object) {
				return createIfcGeneralMaterialPropertiesAdapter();
			}
			@Override
			public Adapter caseIfcGeneralProfileProperties(IfcGeneralProfileProperties object) {
				return createIfcGeneralProfilePropertiesAdapter();
			}
			@Override
			public Adapter caseIfcGeometricCurveSet(IfcGeometricCurveSet object) {
				return createIfcGeometricCurveSetAdapter();
			}
			@Override
			public Adapter caseIfcGeometricProjectionEnumType(IfcGeometricProjectionEnumType object) {
				return createIfcGeometricProjectionEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcGeometricRepresentationContext(IfcGeometricRepresentationContext object) {
				return createIfcGeometricRepresentationContextAdapter();
			}
			@Override
			public Adapter caseIfcGeometricRepresentationItem(IfcGeometricRepresentationItem object) {
				return createIfcGeometricRepresentationItemAdapter();
			}
			@Override
			public Adapter caseIfcGeometricRepresentationSubContext(IfcGeometricRepresentationSubContext object) {
				return createIfcGeometricRepresentationSubContextAdapter();
			}
			@Override
			public Adapter caseIfcGeometricRepresentationSubContextTemp(IfcGeometricRepresentationSubContextTemp object) {
				return createIfcGeometricRepresentationSubContextTempAdapter();
			}
			@Override
			public Adapter caseIfcGeometricSet(IfcGeometricSet object) {
				return createIfcGeometricSetAdapter();
			}
			@Override
			public Adapter caseIfcGeometricSetSelect(IfcGeometricSetSelect object) {
				return createIfcGeometricSetSelectAdapter();
			}
			@Override
			public Adapter caseIfcGloballyUniqueIdType(IfcGloballyUniqueIdType object) {
				return createIfcGloballyUniqueIdTypeAdapter();
			}
			@Override
			public Adapter caseIfcGlobalOrLocalEnumType(IfcGlobalOrLocalEnumType object) {
				return createIfcGlobalOrLocalEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcGrid(IfcGrid object) {
				return createIfcGridAdapter();
			}
			@Override
			public Adapter caseIfcGridAxis(IfcGridAxis object) {
				return createIfcGridAxisAdapter();
			}
			@Override
			public Adapter caseIfcGridPlacement(IfcGridPlacement object) {
				return createIfcGridPlacementAdapter();
			}
			@Override
			public Adapter caseIfcGroup(IfcGroup object) {
				return createIfcGroupAdapter();
			}
			@Override
			public Adapter caseIfcHalfSpaceSolid(IfcHalfSpaceSolid object) {
				return createIfcHalfSpaceSolidAdapter();
			}
			@Override
			public Adapter caseIfcHatchLineDistanceSelect(IfcHatchLineDistanceSelect object) {
				return createIfcHatchLineDistanceSelectAdapter();
			}
			@Override
			public Adapter caseIfcHeatExchangerType(IfcHeatExchangerType object) {
				return createIfcHeatExchangerTypeAdapter();
			}
			@Override
			public Adapter caseIfcHeatExchangerTypeEnumType(IfcHeatExchangerTypeEnumType object) {
				return createIfcHeatExchangerTypeEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcHeatFluxDensityMeasureType(IfcHeatFluxDensityMeasureType object) {
				return createIfcHeatFluxDensityMeasureTypeAdapter();
			}
			@Override
			public Adapter caseIfcHeatingValueMeasureType(IfcHeatingValueMeasureType object) {
				return createIfcHeatingValueMeasureTypeAdapter();
			}
			@Override
			public Adapter caseIfcHourInDayType(IfcHourInDayType object) {
				return createIfcHourInDayTypeAdapter();
			}
			@Override
			public Adapter caseIfcHumidifierType(IfcHumidifierType object) {
				return createIfcHumidifierTypeAdapter();
			}
			@Override
			public Adapter caseIfcHumidifierTypeEnumType(IfcHumidifierTypeEnumType object) {
				return createIfcHumidifierTypeEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcHygroscopicMaterialProperties(IfcHygroscopicMaterialProperties object) {
				return createIfcHygroscopicMaterialPropertiesAdapter();
			}
			@Override
			public Adapter caseIfcIdentifierType(IfcIdentifierType object) {
				return createIfcIdentifierTypeAdapter();
			}
			@Override
			public Adapter caseIfcIlluminanceMeasureType(IfcIlluminanceMeasureType object) {
				return createIfcIlluminanceMeasureTypeAdapter();
			}
			@Override
			public Adapter caseIfcImageTexture(IfcImageTexture object) {
				return createIfcImageTextureAdapter();
			}
			@Override
			public Adapter caseIfcInductanceMeasureType(IfcInductanceMeasureType object) {
				return createIfcInductanceMeasureTypeAdapter();
			}
			@Override
			public Adapter caseIfcIntegerCountRateMeasureType(IfcIntegerCountRateMeasureType object) {
				return createIfcIntegerCountRateMeasureTypeAdapter();
			}
			@Override
			public Adapter caseIfcIntegerType(IfcIntegerType object) {
				return createIfcIntegerTypeAdapter();
			}
			@Override
			public Adapter caseIfcInternalOrExternalEnumType(IfcInternalOrExternalEnumType object) {
				return createIfcInternalOrExternalEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcInventory(IfcInventory object) {
				return createIfcInventoryAdapter();
			}
			@Override
			public Adapter caseIfcInventoryTypeEnumType(IfcInventoryTypeEnumType object) {
				return createIfcInventoryTypeEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcIonConcentrationMeasureType(IfcIonConcentrationMeasureType object) {
				return createIfcIonConcentrationMeasureTypeAdapter();
			}
			@Override
			public Adapter caseIfcIrregularTimeSeries(IfcIrregularTimeSeries object) {
				return createIfcIrregularTimeSeriesAdapter();
			}
			@Override
			public Adapter caseIfcIrregularTimeSeriesValue(IfcIrregularTimeSeriesValue object) {
				return createIfcIrregularTimeSeriesValueAdapter();
			}
			@Override
			public Adapter caseIfcIShapeProfileDef(IfcIShapeProfileDef object) {
				return createIfcIShapeProfileDefAdapter();
			}
			@Override
			public Adapter caseIfcIsothermalMoistureCapacityMeasureType(IfcIsothermalMoistureCapacityMeasureType object) {
				return createIfcIsothermalMoistureCapacityMeasureTypeAdapter();
			}
			@Override
			public Adapter caseIfcJunctionBoxType(IfcJunctionBoxType object) {
				return createIfcJunctionBoxTypeAdapter();
			}
			@Override
			public Adapter caseIfcJunctionBoxTypeEnumType(IfcJunctionBoxTypeEnumType object) {
				return createIfcJunctionBoxTypeEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcKinematicViscosityMeasureType(IfcKinematicViscosityMeasureType object) {
				return createIfcKinematicViscosityMeasureTypeAdapter();
			}
			@Override
			public Adapter caseIfcLabelType(IfcLabelType object) {
				return createIfcLabelTypeAdapter();
			}
			@Override
			public Adapter caseIfcLaborResource(IfcLaborResource object) {
				return createIfcLaborResourceAdapter();
			}
			@Override
			public Adapter caseIfcLampType(IfcLampType object) {
				return createIfcLampTypeAdapter();
			}
			@Override
			public Adapter caseIfcLampTypeEnumType(IfcLampTypeEnumType object) {
				return createIfcLampTypeEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcLayeredItem(IfcLayeredItem object) {
				return createIfcLayeredItemAdapter();
			}
			@Override
			public Adapter caseIfcLayerSetDirectionEnumType(IfcLayerSetDirectionEnumType object) {
				return createIfcLayerSetDirectionEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcLengthMeasureType(IfcLengthMeasureType object) {
				return createIfcLengthMeasureTypeAdapter();
			}
			@Override
			public Adapter caseIfcLibraryInformation(IfcLibraryInformation object) {
				return createIfcLibraryInformationAdapter();
			}
			@Override
			public Adapter caseIfcLibraryReference(IfcLibraryReference object) {
				return createIfcLibraryReferenceAdapter();
			}
			@Override
			public Adapter caseIfcLibrarySelect(IfcLibrarySelect object) {
				return createIfcLibrarySelectAdapter();
			}
			@Override
			public Adapter caseIfcLightDistributionCurveEnumType(IfcLightDistributionCurveEnumType object) {
				return createIfcLightDistributionCurveEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcLightDistributionData(IfcLightDistributionData object) {
				return createIfcLightDistributionDataAdapter();
			}
			@Override
			public Adapter caseIfcLightDistributionDataSourceSelect(IfcLightDistributionDataSourceSelect object) {
				return createIfcLightDistributionDataSourceSelectAdapter();
			}
			@Override
			public Adapter caseIfcLightEmissionSourceEnumType(IfcLightEmissionSourceEnumType object) {
				return createIfcLightEmissionSourceEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcLightFixtureType(IfcLightFixtureType object) {
				return createIfcLightFixtureTypeAdapter();
			}
			@Override
			public Adapter caseIfcLightFixtureTypeEnumType(IfcLightFixtureTypeEnumType object) {
				return createIfcLightFixtureTypeEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcLightIntensityDistribution(IfcLightIntensityDistribution object) {
				return createIfcLightIntensityDistributionAdapter();
			}
			@Override
			public Adapter caseIfcLightSource(IfcLightSource object) {
				return createIfcLightSourceAdapter();
			}
			@Override
			public Adapter caseIfcLightSourceAmbient(IfcLightSourceAmbient object) {
				return createIfcLightSourceAmbientAdapter();
			}
			@Override
			public Adapter caseIfcLightSourceDirectional(IfcLightSourceDirectional object) {
				return createIfcLightSourceDirectionalAdapter();
			}
			@Override
			public Adapter caseIfcLightSourceGoniometric(IfcLightSourceGoniometric object) {
				return createIfcLightSourceGoniometricAdapter();
			}
			@Override
			public Adapter caseIfcLightSourcePositional(IfcLightSourcePositional object) {
				return createIfcLightSourcePositionalAdapter();
			}
			@Override
			public Adapter caseIfcLightSourceSpot(IfcLightSourceSpot object) {
				return createIfcLightSourceSpotAdapter();
			}
			@Override
			public Adapter caseIfcLine(IfcLine object) {
				return createIfcLineAdapter();
			}
			@Override
			public Adapter caseIfcLinearDimension(IfcLinearDimension object) {
				return createIfcLinearDimensionAdapter();
			}
			@Override
			public Adapter caseIfcLinearForceMeasureType(IfcLinearForceMeasureType object) {
				return createIfcLinearForceMeasureTypeAdapter();
			}
			@Override
			public Adapter caseIfcLinearMomentMeasureType(IfcLinearMomentMeasureType object) {
				return createIfcLinearMomentMeasureTypeAdapter();
			}
			@Override
			public Adapter caseIfcLinearStiffnessMeasureType(IfcLinearStiffnessMeasureType object) {
				return createIfcLinearStiffnessMeasureTypeAdapter();
			}
			@Override
			public Adapter caseIfcLinearVelocityMeasureType(IfcLinearVelocityMeasureType object) {
				return createIfcLinearVelocityMeasureTypeAdapter();
			}
			@Override
			public Adapter caseIfcLoadGroupTypeEnumType(IfcLoadGroupTypeEnumType object) {
				return createIfcLoadGroupTypeEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcLocalPlacement(IfcLocalPlacement object) {
				return createIfcLocalPlacementAdapter();
			}
			@Override
			public Adapter caseIfcLocalTime(IfcLocalTime object) {
				return createIfcLocalTimeAdapter();
			}
			@Override
			public Adapter caseIfcLogicalOperatorEnumType(IfcLogicalOperatorEnumType object) {
				return createIfcLogicalOperatorEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcLogicalType(IfcLogicalType object) {
				return createIfcLogicalTypeAdapter();
			}
			@Override
			public Adapter caseIfcLoop(IfcLoop object) {
				return createIfcLoopAdapter();
			}
			@Override
			public Adapter caseIfcLShapeProfileDef(IfcLShapeProfileDef object) {
				return createIfcLShapeProfileDefAdapter();
			}
			@Override
			public Adapter caseIfcLuminousFluxMeasureType(IfcLuminousFluxMeasureType object) {
				return createIfcLuminousFluxMeasureTypeAdapter();
			}
			@Override
			public Adapter caseIfcLuminousIntensityDistributionMeasureType(IfcLuminousIntensityDistributionMeasureType object) {
				return createIfcLuminousIntensityDistributionMeasureTypeAdapter();
			}
			@Override
			public Adapter caseIfcLuminousIntensityMeasureType(IfcLuminousIntensityMeasureType object) {
				return createIfcLuminousIntensityMeasureTypeAdapter();
			}
			@Override
			public Adapter caseIfcMagneticFluxDensityMeasureType(IfcMagneticFluxDensityMeasureType object) {
				return createIfcMagneticFluxDensityMeasureTypeAdapter();
			}
			@Override
			public Adapter caseIfcMagneticFluxMeasureType(IfcMagneticFluxMeasureType object) {
				return createIfcMagneticFluxMeasureTypeAdapter();
			}
			@Override
			public Adapter caseIfcManifoldSolidBrep(IfcManifoldSolidBrep object) {
				return createIfcManifoldSolidBrepAdapter();
			}
			@Override
			public Adapter caseIfcMappedItem(IfcMappedItem object) {
				return createIfcMappedItemAdapter();
			}
			@Override
			public Adapter caseIfcMassDensityMeasureType(IfcMassDensityMeasureType object) {
				return createIfcMassDensityMeasureTypeAdapter();
			}
			@Override
			public Adapter caseIfcMassFlowRateMeasureType(IfcMassFlowRateMeasureType object) {
				return createIfcMassFlowRateMeasureTypeAdapter();
			}
			@Override
			public Adapter caseIfcMassMeasureType(IfcMassMeasureType object) {
				return createIfcMassMeasureTypeAdapter();
			}
			@Override
			public Adapter caseIfcMassPerLengthMeasureType(IfcMassPerLengthMeasureType object) {
				return createIfcMassPerLengthMeasureTypeAdapter();
			}
			@Override
			public Adapter caseIfcMaterial(IfcMaterial object) {
				return createIfcMaterialAdapter();
			}
			@Override
			public Adapter caseIfcMaterialClassificationRelationship(IfcMaterialClassificationRelationship object) {
				return createIfcMaterialClassificationRelationshipAdapter();
			}
			@Override
			public Adapter caseIfcMaterialDefinitionRepresentation(IfcMaterialDefinitionRepresentation object) {
				return createIfcMaterialDefinitionRepresentationAdapter();
			}
			@Override
			public Adapter caseIfcMaterialLayer(IfcMaterialLayer object) {
				return createIfcMaterialLayerAdapter();
			}
			@Override
			public Adapter caseIfcMaterialLayerSet(IfcMaterialLayerSet object) {
				return createIfcMaterialLayerSetAdapter();
			}
			@Override
			public Adapter caseIfcMaterialLayerSetUsage(IfcMaterialLayerSetUsage object) {
				return createIfcMaterialLayerSetUsageAdapter();
			}
			@Override
			public Adapter caseIfcMaterialList(IfcMaterialList object) {
				return createIfcMaterialListAdapter();
			}
			@Override
			public Adapter caseIfcMaterialProperties(IfcMaterialProperties object) {
				return createIfcMaterialPropertiesAdapter();
			}
			@Override
			public Adapter caseIfcMaterialSelect(IfcMaterialSelect object) {
				return createIfcMaterialSelectAdapter();
			}
			@Override
			public Adapter caseIfcMeasureValue(IfcMeasureValue object) {
				return createIfcMeasureValueAdapter();
			}
			@Override
			public Adapter caseIfcMeasureWithUnit(IfcMeasureWithUnit object) {
				return createIfcMeasureWithUnitAdapter();
			}
			@Override
			public Adapter caseIfcMechanicalConcreteMaterialProperties(IfcMechanicalConcreteMaterialProperties object) {
				return createIfcMechanicalConcreteMaterialPropertiesAdapter();
			}
			@Override
			public Adapter caseIfcMechanicalFastener(IfcMechanicalFastener object) {
				return createIfcMechanicalFastenerAdapter();
			}
			@Override
			public Adapter caseIfcMechanicalFastenerType(IfcMechanicalFastenerType object) {
				return createIfcMechanicalFastenerTypeAdapter();
			}
			@Override
			public Adapter caseIfcMechanicalMaterialProperties(IfcMechanicalMaterialProperties object) {
				return createIfcMechanicalMaterialPropertiesAdapter();
			}
			@Override
			public Adapter caseIfcMechanicalSteelMaterialProperties(IfcMechanicalSteelMaterialProperties object) {
				return createIfcMechanicalSteelMaterialPropertiesAdapter();
			}
			@Override
			public Adapter caseIfcMember(IfcMember object) {
				return createIfcMemberAdapter();
			}
			@Override
			public Adapter caseIfcMemberType(IfcMemberType object) {
				return createIfcMemberTypeAdapter();
			}
			@Override
			public Adapter caseIfcMemberTypeEnumType(IfcMemberTypeEnumType object) {
				return createIfcMemberTypeEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcMetric(IfcMetric object) {
				return createIfcMetricAdapter();
			}
			@Override
			public Adapter caseIfcMetricValueSelect(IfcMetricValueSelect object) {
				return createIfcMetricValueSelectAdapter();
			}
			@Override
			public Adapter caseIfcMinuteInHourType(IfcMinuteInHourType object) {
				return createIfcMinuteInHourTypeAdapter();
			}
			@Override
			public Adapter caseIfcModulusOfElasticityMeasureType(IfcModulusOfElasticityMeasureType object) {
				return createIfcModulusOfElasticityMeasureTypeAdapter();
			}
			@Override
			public Adapter caseIfcModulusOfLinearSubgradeReactionMeasureType(IfcModulusOfLinearSubgradeReactionMeasureType object) {
				return createIfcModulusOfLinearSubgradeReactionMeasureTypeAdapter();
			}
			@Override
			public Adapter caseIfcModulusOfRotationalSubgradeReactionMeasureType(IfcModulusOfRotationalSubgradeReactionMeasureType object) {
				return createIfcModulusOfRotationalSubgradeReactionMeasureTypeAdapter();
			}
			@Override
			public Adapter caseIfcModulusOfSubgradeReactionMeasureType(IfcModulusOfSubgradeReactionMeasureType object) {
				return createIfcModulusOfSubgradeReactionMeasureTypeAdapter();
			}
			@Override
			public Adapter caseIfcMoistureDiffusivityMeasureType(IfcMoistureDiffusivityMeasureType object) {
				return createIfcMoistureDiffusivityMeasureTypeAdapter();
			}
			@Override
			public Adapter caseIfcMolecularWeightMeasureType(IfcMolecularWeightMeasureType object) {
				return createIfcMolecularWeightMeasureTypeAdapter();
			}
			@Override
			public Adapter caseIfcMomentOfInertiaMeasureType(IfcMomentOfInertiaMeasureType object) {
				return createIfcMomentOfInertiaMeasureTypeAdapter();
			}
			@Override
			public Adapter caseIfcMonetaryMeasureType(IfcMonetaryMeasureType object) {
				return createIfcMonetaryMeasureTypeAdapter();
			}
			@Override
			public Adapter caseIfcMonetaryUnit(IfcMonetaryUnit object) {
				return createIfcMonetaryUnitAdapter();
			}
			@Override
			public Adapter caseIfcMonthInYearNumberType(IfcMonthInYearNumberType object) {
				return createIfcMonthInYearNumberTypeAdapter();
			}
			@Override
			public Adapter caseIfcMotorConnectionType(IfcMotorConnectionType object) {
				return createIfcMotorConnectionTypeAdapter();
			}
			@Override
			public Adapter caseIfcMotorConnectionTypeEnumType(IfcMotorConnectionTypeEnumType object) {
				return createIfcMotorConnectionTypeEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcMove(IfcMove object) {
				return createIfcMoveAdapter();
			}
			@Override
			public Adapter caseIfcNamedUnit(IfcNamedUnit object) {
				return createIfcNamedUnitAdapter();
			}
			@Override
			public Adapter caseIfcNormalisedRatioMeasureType(IfcNormalisedRatioMeasureType object) {
				return createIfcNormalisedRatioMeasureTypeAdapter();
			}
			@Override
			public Adapter caseIfcNullStyleType(IfcNullStyleType object) {
				return createIfcNullStyleTypeAdapter();
			}
			@Override
			public Adapter caseIfcNumericMeasureType(IfcNumericMeasureType object) {
				return createIfcNumericMeasureTypeAdapter();
			}
			@Override
			public Adapter caseIfcObject(IfcObject object) {
				return createIfcObjectAdapter();
			}
			@Override
			public Adapter caseIfcObjectDefinition(IfcObjectDefinition object) {
				return createIfcObjectDefinitionAdapter();
			}
			@Override
			public Adapter caseIfcObjective(IfcObjective object) {
				return createIfcObjectiveAdapter();
			}
			@Override
			public Adapter caseIfcObjectiveEnumType(IfcObjectiveEnumType object) {
				return createIfcObjectiveEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcObjectPlacement(IfcObjectPlacement object) {
				return createIfcObjectPlacementAdapter();
			}
			@Override
			public Adapter caseIfcObjectReferenceSelect(IfcObjectReferenceSelect object) {
				return createIfcObjectReferenceSelectAdapter();
			}
			@Override
			public Adapter caseIfcObjectTypeEnumType(IfcObjectTypeEnumType object) {
				return createIfcObjectTypeEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcOccupant(IfcOccupant object) {
				return createIfcOccupantAdapter();
			}
			@Override
			public Adapter caseIfcOccupantTypeEnumType(IfcOccupantTypeEnumType object) {
				return createIfcOccupantTypeEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcOffsetCurve2D(IfcOffsetCurve2D object) {
				return createIfcOffsetCurve2DAdapter();
			}
			@Override
			public Adapter caseIfcOffsetCurve3D(IfcOffsetCurve3D object) {
				return createIfcOffsetCurve3DAdapter();
			}
			@Override
			public Adapter caseIfcOneDirectionRepeatFactor(IfcOneDirectionRepeatFactor object) {
				return createIfcOneDirectionRepeatFactorAdapter();
			}
			@Override
			public Adapter caseIfcOpeningElement(IfcOpeningElement object) {
				return createIfcOpeningElementAdapter();
			}
			@Override
			public Adapter caseIfcOpenShell(IfcOpenShell object) {
				return createIfcOpenShellAdapter();
			}
			@Override
			public Adapter caseIfcOpticalMaterialProperties(IfcOpticalMaterialProperties object) {
				return createIfcOpticalMaterialPropertiesAdapter();
			}
			@Override
			public Adapter caseIfcOrderAction(IfcOrderAction object) {
				return createIfcOrderActionAdapter();
			}
			@Override
			public Adapter caseIfcOrganization(IfcOrganization object) {
				return createIfcOrganizationAdapter();
			}
			@Override
			public Adapter caseIfcOrganizationRelationship(IfcOrganizationRelationship object) {
				return createIfcOrganizationRelationshipAdapter();
			}
			@Override
			public Adapter caseIfcOrientationSelect(IfcOrientationSelect object) {
				return createIfcOrientationSelectAdapter();
			}
			@Override
			public Adapter caseIfcOrientedEdge(IfcOrientedEdge object) {
				return createIfcOrientedEdgeAdapter();
			}
			@Override
			public Adapter caseIfcOrientedEdgeTemp(IfcOrientedEdgeTemp object) {
				return createIfcOrientedEdgeTempAdapter();
			}
			@Override
			public Adapter caseIfcOutletType(IfcOutletType object) {
				return createIfcOutletTypeAdapter();
			}
			@Override
			public Adapter caseIfcOutletTypeEnumType(IfcOutletTypeEnumType object) {
				return createIfcOutletTypeEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcOwnerHistory(IfcOwnerHistory object) {
				return createIfcOwnerHistoryAdapter();
			}
			@Override
			public Adapter caseIfcParameterizedProfileDef(IfcParameterizedProfileDef object) {
				return createIfcParameterizedProfileDefAdapter();
			}
			@Override
			public Adapter caseIfcParameterValueType(IfcParameterValueType object) {
				return createIfcParameterValueTypeAdapter();
			}
			@Override
			public Adapter caseIfcPath(IfcPath object) {
				return createIfcPathAdapter();
			}
			@Override
			public Adapter caseIfcPerformanceHistory(IfcPerformanceHistory object) {
				return createIfcPerformanceHistoryAdapter();
			}
			@Override
			public Adapter caseIfcPermeableCoveringOperationEnumType(IfcPermeableCoveringOperationEnumType object) {
				return createIfcPermeableCoveringOperationEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcPermeableCoveringProperties(IfcPermeableCoveringProperties object) {
				return createIfcPermeableCoveringPropertiesAdapter();
			}
			@Override
			public Adapter caseIfcPermit(IfcPermit object) {
				return createIfcPermitAdapter();
			}
			@Override
			public Adapter caseIfcPerson(IfcPerson object) {
				return createIfcPersonAdapter();
			}
			@Override
			public Adapter caseIfcPersonAndOrganization(IfcPersonAndOrganization object) {
				return createIfcPersonAndOrganizationAdapter();
			}
			@Override
			public Adapter caseIfcPHMeasureType(IfcPHMeasureType object) {
				return createIfcPHMeasureTypeAdapter();
			}
			@Override
			public Adapter caseIfcPhysicalComplexQuantity(IfcPhysicalComplexQuantity object) {
				return createIfcPhysicalComplexQuantityAdapter();
			}
			@Override
			public Adapter caseIfcPhysicalOrVirtualEnumType(IfcPhysicalOrVirtualEnumType object) {
				return createIfcPhysicalOrVirtualEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcPhysicalQuantity(IfcPhysicalQuantity object) {
				return createIfcPhysicalQuantityAdapter();
			}
			@Override
			public Adapter caseIfcPhysicalSimpleQuantity(IfcPhysicalSimpleQuantity object) {
				return createIfcPhysicalSimpleQuantityAdapter();
			}
			@Override
			public Adapter caseIfcPile(IfcPile object) {
				return createIfcPileAdapter();
			}
			@Override
			public Adapter caseIfcPileConstructionEnumType(IfcPileConstructionEnumType object) {
				return createIfcPileConstructionEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcPileTypeEnumType(IfcPileTypeEnumType object) {
				return createIfcPileTypeEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcPipeFittingType(IfcPipeFittingType object) {
				return createIfcPipeFittingTypeAdapter();
			}
			@Override
			public Adapter caseIfcPipeFittingTypeEnumType(IfcPipeFittingTypeEnumType object) {
				return createIfcPipeFittingTypeEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcPipeSegmentType(IfcPipeSegmentType object) {
				return createIfcPipeSegmentTypeAdapter();
			}
			@Override
			public Adapter caseIfcPipeSegmentTypeEnumType(IfcPipeSegmentTypeEnumType object) {
				return createIfcPipeSegmentTypeEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcPixelTexture(IfcPixelTexture object) {
				return createIfcPixelTextureAdapter();
			}
			@Override
			public Adapter caseIfcPlacement(IfcPlacement object) {
				return createIfcPlacementAdapter();
			}
			@Override
			public Adapter caseIfcPlanarBox(IfcPlanarBox object) {
				return createIfcPlanarBoxAdapter();
			}
			@Override
			public Adapter caseIfcPlanarExtent(IfcPlanarExtent object) {
				return createIfcPlanarExtentAdapter();
			}
			@Override
			public Adapter caseIfcPlanarForceMeasureType(IfcPlanarForceMeasureType object) {
				return createIfcPlanarForceMeasureTypeAdapter();
			}
			@Override
			public Adapter caseIfcPlane(IfcPlane object) {
				return createIfcPlaneAdapter();
			}
			@Override
			public Adapter caseIfcPlaneAngleMeasureType(IfcPlaneAngleMeasureType object) {
				return createIfcPlaneAngleMeasureTypeAdapter();
			}
			@Override
			public Adapter caseIfcPlate(IfcPlate object) {
				return createIfcPlateAdapter();
			}
			@Override
			public Adapter caseIfcPlateType(IfcPlateType object) {
				return createIfcPlateTypeAdapter();
			}
			@Override
			public Adapter caseIfcPlateTypeEnumType(IfcPlateTypeEnumType object) {
				return createIfcPlateTypeEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcPoint(IfcPoint object) {
				return createIfcPointAdapter();
			}
			@Override
			public Adapter caseIfcPointOnCurve(IfcPointOnCurve object) {
				return createIfcPointOnCurveAdapter();
			}
			@Override
			public Adapter caseIfcPointOnSurface(IfcPointOnSurface object) {
				return createIfcPointOnSurfaceAdapter();
			}
			@Override
			public Adapter caseIfcPointOrVertexPoint(IfcPointOrVertexPoint object) {
				return createIfcPointOrVertexPointAdapter();
			}
			@Override
			public Adapter caseIfcPolygonalBoundedHalfSpace(IfcPolygonalBoundedHalfSpace object) {
				return createIfcPolygonalBoundedHalfSpaceAdapter();
			}
			@Override
			public Adapter caseIfcPolyline(IfcPolyline object) {
				return createIfcPolylineAdapter();
			}
			@Override
			public Adapter caseIfcPolyLoop(IfcPolyLoop object) {
				return createIfcPolyLoopAdapter();
			}
			@Override
			public Adapter caseIfcPort(IfcPort object) {
				return createIfcPortAdapter();
			}
			@Override
			public Adapter caseIfcPositiveLengthMeasureType(IfcPositiveLengthMeasureType object) {
				return createIfcPositiveLengthMeasureTypeAdapter();
			}
			@Override
			public Adapter caseIfcPositivePlaneAngleMeasureType(IfcPositivePlaneAngleMeasureType object) {
				return createIfcPositivePlaneAngleMeasureTypeAdapter();
			}
			@Override
			public Adapter caseIfcPositiveRatioMeasureType(IfcPositiveRatioMeasureType object) {
				return createIfcPositiveRatioMeasureTypeAdapter();
			}
			@Override
			public Adapter caseIfcPostalAddress(IfcPostalAddress object) {
				return createIfcPostalAddressAdapter();
			}
			@Override
			public Adapter caseIfcPowerMeasureType(IfcPowerMeasureType object) {
				return createIfcPowerMeasureTypeAdapter();
			}
			@Override
			public Adapter caseIfcPreDefinedColour(IfcPreDefinedColour object) {
				return createIfcPreDefinedColourAdapter();
			}
			@Override
			public Adapter caseIfcPreDefinedCurveFont(IfcPreDefinedCurveFont object) {
				return createIfcPreDefinedCurveFontAdapter();
			}
			@Override
			public Adapter caseIfcPreDefinedDimensionSymbol(IfcPreDefinedDimensionSymbol object) {
				return createIfcPreDefinedDimensionSymbolAdapter();
			}
			@Override
			public Adapter caseIfcPreDefinedItem(IfcPreDefinedItem object) {
				return createIfcPreDefinedItemAdapter();
			}
			@Override
			public Adapter caseIfcPreDefinedPointMarkerSymbol(IfcPreDefinedPointMarkerSymbol object) {
				return createIfcPreDefinedPointMarkerSymbolAdapter();
			}
			@Override
			public Adapter caseIfcPreDefinedSymbol(IfcPreDefinedSymbol object) {
				return createIfcPreDefinedSymbolAdapter();
			}
			@Override
			public Adapter caseIfcPreDefinedTerminatorSymbol(IfcPreDefinedTerminatorSymbol object) {
				return createIfcPreDefinedTerminatorSymbolAdapter();
			}
			@Override
			public Adapter caseIfcPreDefinedTextFont(IfcPreDefinedTextFont object) {
				return createIfcPreDefinedTextFontAdapter();
			}
			@Override
			public Adapter caseIfcPresentableTextType(IfcPresentableTextType object) {
				return createIfcPresentableTextTypeAdapter();
			}
			@Override
			public Adapter caseIfcPresentationLayerAssignment(IfcPresentationLayerAssignment object) {
				return createIfcPresentationLayerAssignmentAdapter();
			}
			@Override
			public Adapter caseIfcPresentationLayerWithStyle(IfcPresentationLayerWithStyle object) {
				return createIfcPresentationLayerWithStyleAdapter();
			}
			@Override
			public Adapter caseIfcPresentationStyle(IfcPresentationStyle object) {
				return createIfcPresentationStyleAdapter();
			}
			@Override
			public Adapter caseIfcPresentationStyleAssignment(IfcPresentationStyleAssignment object) {
				return createIfcPresentationStyleAssignmentAdapter();
			}
			@Override
			public Adapter caseIfcPresentationStyleSelect(IfcPresentationStyleSelect object) {
				return createIfcPresentationStyleSelectAdapter();
			}
			@Override
			public Adapter caseIfcPressureMeasureType(IfcPressureMeasureType object) {
				return createIfcPressureMeasureTypeAdapter();
			}
			@Override
			public Adapter caseIfcProcedure(IfcProcedure object) {
				return createIfcProcedureAdapter();
			}
			@Override
			public Adapter caseIfcProcedureTypeEnumType(IfcProcedureTypeEnumType object) {
				return createIfcProcedureTypeEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcProcess(IfcProcess object) {
				return createIfcProcessAdapter();
			}
			@Override
			public Adapter caseIfcProduct(IfcProduct object) {
				return createIfcProductAdapter();
			}
			@Override
			public Adapter caseIfcProductDefinitionShape(IfcProductDefinitionShape object) {
				return createIfcProductDefinitionShapeAdapter();
			}
			@Override
			public Adapter caseIfcProductRepresentation(IfcProductRepresentation object) {
				return createIfcProductRepresentationAdapter();
			}
			@Override
			public Adapter caseIfcProductsOfCombustionProperties(IfcProductsOfCombustionProperties object) {
				return createIfcProductsOfCombustionPropertiesAdapter();
			}
			@Override
			public Adapter caseIfcProfileDef(IfcProfileDef object) {
				return createIfcProfileDefAdapter();
			}
			@Override
			public Adapter caseIfcProfileProperties(IfcProfileProperties object) {
				return createIfcProfilePropertiesAdapter();
			}
			@Override
			public Adapter caseIfcProfileTypeEnumType(IfcProfileTypeEnumType object) {
				return createIfcProfileTypeEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcProject(IfcProject object) {
				return createIfcProjectAdapter();
			}
			@Override
			public Adapter caseIfcProjectedOrTrueLengthEnumType(IfcProjectedOrTrueLengthEnumType object) {
				return createIfcProjectedOrTrueLengthEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcProjectionCurve(IfcProjectionCurve object) {
				return createIfcProjectionCurveAdapter();
			}
			@Override
			public Adapter caseIfcProjectionElement(IfcProjectionElement object) {
				return createIfcProjectionElementAdapter();
			}
			@Override
			public Adapter caseIfcProjectOrder(IfcProjectOrder object) {
				return createIfcProjectOrderAdapter();
			}
			@Override
			public Adapter caseIfcProjectOrderRecord(IfcProjectOrderRecord object) {
				return createIfcProjectOrderRecordAdapter();
			}
			@Override
			public Adapter caseIfcProjectOrderRecordTypeEnumType(IfcProjectOrderRecordTypeEnumType object) {
				return createIfcProjectOrderRecordTypeEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcProjectOrderTypeEnumType(IfcProjectOrderTypeEnumType object) {
				return createIfcProjectOrderTypeEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcProperty(IfcProperty object) {
				return createIfcPropertyAdapter();
			}
			@Override
			public Adapter caseIfcPropertyBoundedValue(IfcPropertyBoundedValue object) {
				return createIfcPropertyBoundedValueAdapter();
			}
			@Override
			public Adapter caseIfcPropertyConstraintRelationship(IfcPropertyConstraintRelationship object) {
				return createIfcPropertyConstraintRelationshipAdapter();
			}
			@Override
			public Adapter caseIfcPropertyDefinition(IfcPropertyDefinition object) {
				return createIfcPropertyDefinitionAdapter();
			}
			@Override
			public Adapter caseIfcPropertyDependencyRelationship(IfcPropertyDependencyRelationship object) {
				return createIfcPropertyDependencyRelationshipAdapter();
			}
			@Override
			public Adapter caseIfcPropertyEnumeratedValue(IfcPropertyEnumeratedValue object) {
				return createIfcPropertyEnumeratedValueAdapter();
			}
			@Override
			public Adapter caseIfcPropertyEnumeration(IfcPropertyEnumeration object) {
				return createIfcPropertyEnumerationAdapter();
			}
			@Override
			public Adapter caseIfcPropertyListValue(IfcPropertyListValue object) {
				return createIfcPropertyListValueAdapter();
			}
			@Override
			public Adapter caseIfcPropertyReferenceValue(IfcPropertyReferenceValue object) {
				return createIfcPropertyReferenceValueAdapter();
			}
			@Override
			public Adapter caseIfcPropertySet(IfcPropertySet object) {
				return createIfcPropertySetAdapter();
			}
			@Override
			public Adapter caseIfcPropertySetDefinition(IfcPropertySetDefinition object) {
				return createIfcPropertySetDefinitionAdapter();
			}
			@Override
			public Adapter caseIfcPropertySingleValue(IfcPropertySingleValue object) {
				return createIfcPropertySingleValueAdapter();
			}
			@Override
			public Adapter caseIfcPropertySourceEnumType(IfcPropertySourceEnumType object) {
				return createIfcPropertySourceEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcPropertyTableValue(IfcPropertyTableValue object) {
				return createIfcPropertyTableValueAdapter();
			}
			@Override
			public Adapter caseIfcProtectiveDeviceType(IfcProtectiveDeviceType object) {
				return createIfcProtectiveDeviceTypeAdapter();
			}
			@Override
			public Adapter caseIfcProtectiveDeviceTypeEnumType(IfcProtectiveDeviceTypeEnumType object) {
				return createIfcProtectiveDeviceTypeEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcProxy(IfcProxy object) {
				return createIfcProxyAdapter();
			}
			@Override
			public Adapter caseIfcPumpType(IfcPumpType object) {
				return createIfcPumpTypeAdapter();
			}
			@Override
			public Adapter caseIfcPumpTypeEnumType(IfcPumpTypeEnumType object) {
				return createIfcPumpTypeEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcQuantityArea(IfcQuantityArea object) {
				return createIfcQuantityAreaAdapter();
			}
			@Override
			public Adapter caseIfcQuantityCount(IfcQuantityCount object) {
				return createIfcQuantityCountAdapter();
			}
			@Override
			public Adapter caseIfcQuantityLength(IfcQuantityLength object) {
				return createIfcQuantityLengthAdapter();
			}
			@Override
			public Adapter caseIfcQuantityTime(IfcQuantityTime object) {
				return createIfcQuantityTimeAdapter();
			}
			@Override
			public Adapter caseIfcQuantityVolume(IfcQuantityVolume object) {
				return createIfcQuantityVolumeAdapter();
			}
			@Override
			public Adapter caseIfcQuantityWeight(IfcQuantityWeight object) {
				return createIfcQuantityWeightAdapter();
			}
			@Override
			public Adapter caseIfcRadioActivityMeasureType(IfcRadioActivityMeasureType object) {
				return createIfcRadioActivityMeasureTypeAdapter();
			}
			@Override
			public Adapter caseIfcRadiusDimension(IfcRadiusDimension object) {
				return createIfcRadiusDimensionAdapter();
			}
			@Override
			public Adapter caseIfcRailing(IfcRailing object) {
				return createIfcRailingAdapter();
			}
			@Override
			public Adapter caseIfcRailingType(IfcRailingType object) {
				return createIfcRailingTypeAdapter();
			}
			@Override
			public Adapter caseIfcRailingTypeEnumType(IfcRailingTypeEnumType object) {
				return createIfcRailingTypeEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcRamp(IfcRamp object) {
				return createIfcRampAdapter();
			}
			@Override
			public Adapter caseIfcRampFlight(IfcRampFlight object) {
				return createIfcRampFlightAdapter();
			}
			@Override
			public Adapter caseIfcRampFlightType(IfcRampFlightType object) {
				return createIfcRampFlightTypeAdapter();
			}
			@Override
			public Adapter caseIfcRampFlightTypeEnumType(IfcRampFlightTypeEnumType object) {
				return createIfcRampFlightTypeEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcRampTypeEnumType(IfcRampTypeEnumType object) {
				return createIfcRampTypeEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcRatioMeasureType(IfcRatioMeasureType object) {
				return createIfcRatioMeasureTypeAdapter();
			}
			@Override
			public Adapter caseIfcRationalBezierCurve(IfcRationalBezierCurve object) {
				return createIfcRationalBezierCurveAdapter();
			}
			@Override
			public Adapter caseIfcRealType(IfcRealType object) {
				return createIfcRealTypeAdapter();
			}
			@Override
			public Adapter caseIfcRectangleHollowProfileDef(IfcRectangleHollowProfileDef object) {
				return createIfcRectangleHollowProfileDefAdapter();
			}
			@Override
			public Adapter caseIfcRectangleProfileDef(IfcRectangleProfileDef object) {
				return createIfcRectangleProfileDefAdapter();
			}
			@Override
			public Adapter caseIfcRectangularPyramid(IfcRectangularPyramid object) {
				return createIfcRectangularPyramidAdapter();
			}
			@Override
			public Adapter caseIfcRectangularTrimmedSurface(IfcRectangularTrimmedSurface object) {
				return createIfcRectangularTrimmedSurfaceAdapter();
			}
			@Override
			public Adapter caseIfcReferencesValueDocument(IfcReferencesValueDocument object) {
				return createIfcReferencesValueDocumentAdapter();
			}
			@Override
			public Adapter caseIfcReflectanceMethodEnumType(IfcReflectanceMethodEnumType object) {
				return createIfcReflectanceMethodEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcRegularTimeSeries(IfcRegularTimeSeries object) {
				return createIfcRegularTimeSeriesAdapter();
			}
			@Override
			public Adapter caseIfcReinforcementBarProperties(IfcReinforcementBarProperties object) {
				return createIfcReinforcementBarPropertiesAdapter();
			}
			@Override
			public Adapter caseIfcReinforcementDefinitionProperties(IfcReinforcementDefinitionProperties object) {
				return createIfcReinforcementDefinitionPropertiesAdapter();
			}
			@Override
			public Adapter caseIfcReinforcingBar(IfcReinforcingBar object) {
				return createIfcReinforcingBarAdapter();
			}
			@Override
			public Adapter caseIfcReinforcingBarRoleEnumType(IfcReinforcingBarRoleEnumType object) {
				return createIfcReinforcingBarRoleEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcReinforcingBarSurfaceEnumType(IfcReinforcingBarSurfaceEnumType object) {
				return createIfcReinforcingBarSurfaceEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcReinforcingElement(IfcReinforcingElement object) {
				return createIfcReinforcingElementAdapter();
			}
			@Override
			public Adapter caseIfcReinforcingMesh(IfcReinforcingMesh object) {
				return createIfcReinforcingMeshAdapter();
			}
			@Override
			public Adapter caseIfcRelAggregates(IfcRelAggregates object) {
				return createIfcRelAggregatesAdapter();
			}
			@Override
			public Adapter caseIfcRelAssigns(IfcRelAssigns object) {
				return createIfcRelAssignsAdapter();
			}
			@Override
			public Adapter caseIfcRelAssignsTasks(IfcRelAssignsTasks object) {
				return createIfcRelAssignsTasksAdapter();
			}
			@Override
			public Adapter caseIfcRelAssignsToActor(IfcRelAssignsToActor object) {
				return createIfcRelAssignsToActorAdapter();
			}
			@Override
			public Adapter caseIfcRelAssignsToControl(IfcRelAssignsToControl object) {
				return createIfcRelAssignsToControlAdapter();
			}
			@Override
			public Adapter caseIfcRelAssignsToGroup(IfcRelAssignsToGroup object) {
				return createIfcRelAssignsToGroupAdapter();
			}
			@Override
			public Adapter caseIfcRelAssignsToProcess(IfcRelAssignsToProcess object) {
				return createIfcRelAssignsToProcessAdapter();
			}
			@Override
			public Adapter caseIfcRelAssignsToProduct(IfcRelAssignsToProduct object) {
				return createIfcRelAssignsToProductAdapter();
			}
			@Override
			public Adapter caseIfcRelAssignsToProjectOrder(IfcRelAssignsToProjectOrder object) {
				return createIfcRelAssignsToProjectOrderAdapter();
			}
			@Override
			public Adapter caseIfcRelAssignsToResource(IfcRelAssignsToResource object) {
				return createIfcRelAssignsToResourceAdapter();
			}
			@Override
			public Adapter caseIfcRelAssociates(IfcRelAssociates object) {
				return createIfcRelAssociatesAdapter();
			}
			@Override
			public Adapter caseIfcRelAssociatesAppliedValue(IfcRelAssociatesAppliedValue object) {
				return createIfcRelAssociatesAppliedValueAdapter();
			}
			@Override
			public Adapter caseIfcRelAssociatesApproval(IfcRelAssociatesApproval object) {
				return createIfcRelAssociatesApprovalAdapter();
			}
			@Override
			public Adapter caseIfcRelAssociatesClassification(IfcRelAssociatesClassification object) {
				return createIfcRelAssociatesClassificationAdapter();
			}
			@Override
			public Adapter caseIfcRelAssociatesConstraint(IfcRelAssociatesConstraint object) {
				return createIfcRelAssociatesConstraintAdapter();
			}
			@Override
			public Adapter caseIfcRelAssociatesDocument(IfcRelAssociatesDocument object) {
				return createIfcRelAssociatesDocumentAdapter();
			}
			@Override
			public Adapter caseIfcRelAssociatesLibrary(IfcRelAssociatesLibrary object) {
				return createIfcRelAssociatesLibraryAdapter();
			}
			@Override
			public Adapter caseIfcRelAssociatesMaterial(IfcRelAssociatesMaterial object) {
				return createIfcRelAssociatesMaterialAdapter();
			}
			@Override
			public Adapter caseIfcRelAssociatesProfileProperties(IfcRelAssociatesProfileProperties object) {
				return createIfcRelAssociatesProfilePropertiesAdapter();
			}
			@Override
			public Adapter caseIfcRelationship(IfcRelationship object) {
				return createIfcRelationshipAdapter();
			}
			@Override
			public Adapter caseIfcRelaxation(IfcRelaxation object) {
				return createIfcRelaxationAdapter();
			}
			@Override
			public Adapter caseIfcRelConnects(IfcRelConnects object) {
				return createIfcRelConnectsAdapter();
			}
			@Override
			public Adapter caseIfcRelConnectsElements(IfcRelConnectsElements object) {
				return createIfcRelConnectsElementsAdapter();
			}
			@Override
			public Adapter caseIfcRelConnectsPathElements(IfcRelConnectsPathElements object) {
				return createIfcRelConnectsPathElementsAdapter();
			}
			@Override
			public Adapter caseIfcRelConnectsPorts(IfcRelConnectsPorts object) {
				return createIfcRelConnectsPortsAdapter();
			}
			@Override
			public Adapter caseIfcRelConnectsPortToElement(IfcRelConnectsPortToElement object) {
				return createIfcRelConnectsPortToElementAdapter();
			}
			@Override
			public Adapter caseIfcRelConnectsStructuralActivity(IfcRelConnectsStructuralActivity object) {
				return createIfcRelConnectsStructuralActivityAdapter();
			}
			@Override
			public Adapter caseIfcRelConnectsStructuralElement(IfcRelConnectsStructuralElement object) {
				return createIfcRelConnectsStructuralElementAdapter();
			}
			@Override
			public Adapter caseIfcRelConnectsStructuralMember(IfcRelConnectsStructuralMember object) {
				return createIfcRelConnectsStructuralMemberAdapter();
			}
			@Override
			public Adapter caseIfcRelConnectsWithEccentricity(IfcRelConnectsWithEccentricity object) {
				return createIfcRelConnectsWithEccentricityAdapter();
			}
			@Override
			public Adapter caseIfcRelConnectsWithRealizingElements(IfcRelConnectsWithRealizingElements object) {
				return createIfcRelConnectsWithRealizingElementsAdapter();
			}
			@Override
			public Adapter caseIfcRelContainedInSpatialStructure(IfcRelContainedInSpatialStructure object) {
				return createIfcRelContainedInSpatialStructureAdapter();
			}
			@Override
			public Adapter caseIfcRelCoversBldgElements(IfcRelCoversBldgElements object) {
				return createIfcRelCoversBldgElementsAdapter();
			}
			@Override
			public Adapter caseIfcRelCoversSpaces(IfcRelCoversSpaces object) {
				return createIfcRelCoversSpacesAdapter();
			}
			@Override
			public Adapter caseIfcRelDecomposes(IfcRelDecomposes object) {
				return createIfcRelDecomposesAdapter();
			}
			@Override
			public Adapter caseIfcRelDefines(IfcRelDefines object) {
				return createIfcRelDefinesAdapter();
			}
			@Override
			public Adapter caseIfcRelDefinesByProperties(IfcRelDefinesByProperties object) {
				return createIfcRelDefinesByPropertiesAdapter();
			}
			@Override
			public Adapter caseIfcRelDefinesByType(IfcRelDefinesByType object) {
				return createIfcRelDefinesByTypeAdapter();
			}
			@Override
			public Adapter caseIfcRelFillsElement(IfcRelFillsElement object) {
				return createIfcRelFillsElementAdapter();
			}
			@Override
			public Adapter caseIfcRelFlowControlElements(IfcRelFlowControlElements object) {
				return createIfcRelFlowControlElementsAdapter();
			}
			@Override
			public Adapter caseIfcRelInteractionRequirements(IfcRelInteractionRequirements object) {
				return createIfcRelInteractionRequirementsAdapter();
			}
			@Override
			public Adapter caseIfcRelNests(IfcRelNests object) {
				return createIfcRelNestsAdapter();
			}
			@Override
			public Adapter caseIfcRelOccupiesSpaces(IfcRelOccupiesSpaces object) {
				return createIfcRelOccupiesSpacesAdapter();
			}
			@Override
			public Adapter caseIfcRelOverridesProperties(IfcRelOverridesProperties object) {
				return createIfcRelOverridesPropertiesAdapter();
			}
			@Override
			public Adapter caseIfcRelProjectsElement(IfcRelProjectsElement object) {
				return createIfcRelProjectsElementAdapter();
			}
			@Override
			public Adapter caseIfcRelReferencedInSpatialStructure(IfcRelReferencedInSpatialStructure object) {
				return createIfcRelReferencedInSpatialStructureAdapter();
			}
			@Override
			public Adapter caseIfcRelSchedulesCostItems(IfcRelSchedulesCostItems object) {
				return createIfcRelSchedulesCostItemsAdapter();
			}
			@Override
			public Adapter caseIfcRelSequence(IfcRelSequence object) {
				return createIfcRelSequenceAdapter();
			}
			@Override
			public Adapter caseIfcRelServicesBuildings(IfcRelServicesBuildings object) {
				return createIfcRelServicesBuildingsAdapter();
			}
			@Override
			public Adapter caseIfcRelSpaceBoundary(IfcRelSpaceBoundary object) {
				return createIfcRelSpaceBoundaryAdapter();
			}
			@Override
			public Adapter caseIfcRelVoidsElement(IfcRelVoidsElement object) {
				return createIfcRelVoidsElementAdapter();
			}
			@Override
			public Adapter caseIfcRepresentation(IfcRepresentation object) {
				return createIfcRepresentationAdapter();
			}
			@Override
			public Adapter caseIfcRepresentationContext(IfcRepresentationContext object) {
				return createIfcRepresentationContextAdapter();
			}
			@Override
			public Adapter caseIfcRepresentationItem(IfcRepresentationItem object) {
				return createIfcRepresentationItemAdapter();
			}
			@Override
			public Adapter caseIfcRepresentationMap(IfcRepresentationMap object) {
				return createIfcRepresentationMapAdapter();
			}
			@Override
			public Adapter caseIfcResource(IfcResource object) {
				return createIfcResourceAdapter();
			}
			@Override
			public Adapter caseIfcResourceConsumptionEnumType(IfcResourceConsumptionEnumType object) {
				return createIfcResourceConsumptionEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcRevolvedAreaSolid(IfcRevolvedAreaSolid object) {
				return createIfcRevolvedAreaSolidAdapter();
			}
			@Override
			public Adapter caseIfcRibPlateDirectionEnumType(IfcRibPlateDirectionEnumType object) {
				return createIfcRibPlateDirectionEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcRibPlateProfileProperties(IfcRibPlateProfileProperties object) {
				return createIfcRibPlateProfilePropertiesAdapter();
			}
			@Override
			public Adapter caseIfcRightCircularCone(IfcRightCircularCone object) {
				return createIfcRightCircularConeAdapter();
			}
			@Override
			public Adapter caseIfcRightCircularCylinder(IfcRightCircularCylinder object) {
				return createIfcRightCircularCylinderAdapter();
			}
			@Override
			public Adapter caseIfcRoleEnumType(IfcRoleEnumType object) {
				return createIfcRoleEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcRoof(IfcRoof object) {
				return createIfcRoofAdapter();
			}
			@Override
			public Adapter caseIfcRoofTypeEnumType(IfcRoofTypeEnumType object) {
				return createIfcRoofTypeEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcRoot(IfcRoot object) {
				return createIfcRootAdapter();
			}
			@Override
			public Adapter caseIfcRotationalFrequencyMeasureType(IfcRotationalFrequencyMeasureType object) {
				return createIfcRotationalFrequencyMeasureTypeAdapter();
			}
			@Override
			public Adapter caseIfcRotationalMassMeasureType(IfcRotationalMassMeasureType object) {
				return createIfcRotationalMassMeasureTypeAdapter();
			}
			@Override
			public Adapter caseIfcRotationalStiffnessMeasureType(IfcRotationalStiffnessMeasureType object) {
				return createIfcRotationalStiffnessMeasureTypeAdapter();
			}
			@Override
			public Adapter caseIfcRoundedEdgeFeature(IfcRoundedEdgeFeature object) {
				return createIfcRoundedEdgeFeatureAdapter();
			}
			@Override
			public Adapter caseIfcRoundedRectangleProfileDef(IfcRoundedRectangleProfileDef object) {
				return createIfcRoundedRectangleProfileDefAdapter();
			}
			@Override
			public Adapter caseIfcSanitaryTerminalType(IfcSanitaryTerminalType object) {
				return createIfcSanitaryTerminalTypeAdapter();
			}
			@Override
			public Adapter caseIfcSanitaryTerminalTypeEnumType(IfcSanitaryTerminalTypeEnumType object) {
				return createIfcSanitaryTerminalTypeEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcScheduleTimeControl(IfcScheduleTimeControl object) {
				return createIfcScheduleTimeControlAdapter();
			}
			@Override
			public Adapter caseIfcSecondInMinuteType(IfcSecondInMinuteType object) {
				return createIfcSecondInMinuteTypeAdapter();
			}
			@Override
			public Adapter caseIfcSectionalAreaIntegralMeasureType(IfcSectionalAreaIntegralMeasureType object) {
				return createIfcSectionalAreaIntegralMeasureTypeAdapter();
			}
			@Override
			public Adapter caseIfcSectionedSpine(IfcSectionedSpine object) {
				return createIfcSectionedSpineAdapter();
			}
			@Override
			public Adapter caseIfcSectionModulusMeasureType(IfcSectionModulusMeasureType object) {
				return createIfcSectionModulusMeasureTypeAdapter();
			}
			@Override
			public Adapter caseIfcSectionProperties(IfcSectionProperties object) {
				return createIfcSectionPropertiesAdapter();
			}
			@Override
			public Adapter caseIfcSectionReinforcementProperties(IfcSectionReinforcementProperties object) {
				return createIfcSectionReinforcementPropertiesAdapter();
			}
			@Override
			public Adapter caseIfcSectionTypeEnumType(IfcSectionTypeEnumType object) {
				return createIfcSectionTypeEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcSensorType(IfcSensorType object) {
				return createIfcSensorTypeAdapter();
			}
			@Override
			public Adapter caseIfcSensorTypeEnumType(IfcSensorTypeEnumType object) {
				return createIfcSensorTypeEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcSequenceEnumType(IfcSequenceEnumType object) {
				return createIfcSequenceEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcServiceLife(IfcServiceLife object) {
				return createIfcServiceLifeAdapter();
			}
			@Override
			public Adapter caseIfcServiceLifeFactor(IfcServiceLifeFactor object) {
				return createIfcServiceLifeFactorAdapter();
			}
			@Override
			public Adapter caseIfcServiceLifeFactorTypeEnumType(IfcServiceLifeFactorTypeEnumType object) {
				return createIfcServiceLifeFactorTypeEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcServiceLifeTypeEnumType(IfcServiceLifeTypeEnumType object) {
				return createIfcServiceLifeTypeEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcShapeAspect(IfcShapeAspect object) {
				return createIfcShapeAspectAdapter();
			}
			@Override
			public Adapter caseIfcShapeModel(IfcShapeModel object) {
				return createIfcShapeModelAdapter();
			}
			@Override
			public Adapter caseIfcShapeRepresentation(IfcShapeRepresentation object) {
				return createIfcShapeRepresentationAdapter();
			}
			@Override
			public Adapter caseIfcShearModulusMeasureType(IfcShearModulusMeasureType object) {
				return createIfcShearModulusMeasureTypeAdapter();
			}
			@Override
			public Adapter caseIfcShell(IfcShell object) {
				return createIfcShellAdapter();
			}
			@Override
			public Adapter caseIfcShellBasedSurfaceModel(IfcShellBasedSurfaceModel object) {
				return createIfcShellBasedSurfaceModelAdapter();
			}
			@Override
			public Adapter caseIfcSimpleProperty(IfcSimpleProperty object) {
				return createIfcSimplePropertyAdapter();
			}
			@Override
			public Adapter caseIfcSimpleValue(IfcSimpleValue object) {
				return createIfcSimpleValueAdapter();
			}
			@Override
			public Adapter caseIfcSIPrefixType(IfcSIPrefixType object) {
				return createIfcSIPrefixTypeAdapter();
			}
			@Override
			public Adapter caseIfcSite(IfcSite object) {
				return createIfcSiteAdapter();
			}
			@Override
			public Adapter caseIfcSIUnit(IfcSIUnit object) {
				return createIfcSIUnitAdapter();
			}
			@Override
			public Adapter caseIfcSIUnitNameType(IfcSIUnitNameType object) {
				return createIfcSIUnitNameTypeAdapter();
			}
			@Override
			public Adapter caseIfcSIUnitTemp(IfcSIUnitTemp object) {
				return createIfcSIUnitTempAdapter();
			}
			@Override
			public Adapter caseIfcSizeSelect(IfcSizeSelect object) {
				return createIfcSizeSelectAdapter();
			}
			@Override
			public Adapter caseIfcSlab(IfcSlab object) {
				return createIfcSlabAdapter();
			}
			@Override
			public Adapter caseIfcSlabType(IfcSlabType object) {
				return createIfcSlabTypeAdapter();
			}
			@Override
			public Adapter caseIfcSlabTypeEnumType(IfcSlabTypeEnumType object) {
				return createIfcSlabTypeEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcSlippageConnectionCondition(IfcSlippageConnectionCondition object) {
				return createIfcSlippageConnectionConditionAdapter();
			}
			@Override
			public Adapter caseIfcSolidAngleMeasureType(IfcSolidAngleMeasureType object) {
				return createIfcSolidAngleMeasureTypeAdapter();
			}
			@Override
			public Adapter caseIfcSolidModel(IfcSolidModel object) {
				return createIfcSolidModelAdapter();
			}
			@Override
			public Adapter caseIfcSoundPowerMeasureType(IfcSoundPowerMeasureType object) {
				return createIfcSoundPowerMeasureTypeAdapter();
			}
			@Override
			public Adapter caseIfcSoundPressureMeasureType(IfcSoundPressureMeasureType object) {
				return createIfcSoundPressureMeasureTypeAdapter();
			}
			@Override
			public Adapter caseIfcSoundProperties(IfcSoundProperties object) {
				return createIfcSoundPropertiesAdapter();
			}
			@Override
			public Adapter caseIfcSoundScaleEnumType(IfcSoundScaleEnumType object) {
				return createIfcSoundScaleEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcSoundValue(IfcSoundValue object) {
				return createIfcSoundValueAdapter();
			}
			@Override
			public Adapter caseIfcSpace(IfcSpace object) {
				return createIfcSpaceAdapter();
			}
			@Override
			public Adapter caseIfcSpaceHeaterType(IfcSpaceHeaterType object) {
				return createIfcSpaceHeaterTypeAdapter();
			}
			@Override
			public Adapter caseIfcSpaceHeaterTypeEnumType(IfcSpaceHeaterTypeEnumType object) {
				return createIfcSpaceHeaterTypeEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcSpaceProgram(IfcSpaceProgram object) {
				return createIfcSpaceProgramAdapter();
			}
			@Override
			public Adapter caseIfcSpaceThermalLoadProperties(IfcSpaceThermalLoadProperties object) {
				return createIfcSpaceThermalLoadPropertiesAdapter();
			}
			@Override
			public Adapter caseIfcSpaceType(IfcSpaceType object) {
				return createIfcSpaceTypeAdapter();
			}
			@Override
			public Adapter caseIfcSpaceTypeEnumType(IfcSpaceTypeEnumType object) {
				return createIfcSpaceTypeEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcSpatialStructureElement(IfcSpatialStructureElement object) {
				return createIfcSpatialStructureElementAdapter();
			}
			@Override
			public Adapter caseIfcSpatialStructureElementType(IfcSpatialStructureElementType object) {
				return createIfcSpatialStructureElementTypeAdapter();
			}
			@Override
			public Adapter caseIfcSpecificHeatCapacityMeasureType(IfcSpecificHeatCapacityMeasureType object) {
				return createIfcSpecificHeatCapacityMeasureTypeAdapter();
			}
			@Override
			public Adapter caseIfcSpecularExponentType(IfcSpecularExponentType object) {
				return createIfcSpecularExponentTypeAdapter();
			}
			@Override
			public Adapter caseIfcSpecularHighlightSelect(IfcSpecularHighlightSelect object) {
				return createIfcSpecularHighlightSelectAdapter();
			}
			@Override
			public Adapter caseIfcSpecularRoughnessType(IfcSpecularRoughnessType object) {
				return createIfcSpecularRoughnessTypeAdapter();
			}
			@Override
			public Adapter caseIfcSphere(IfcSphere object) {
				return createIfcSphereAdapter();
			}
			@Override
			public Adapter caseIfcStackTerminalType(IfcStackTerminalType object) {
				return createIfcStackTerminalTypeAdapter();
			}
			@Override
			public Adapter caseIfcStackTerminalTypeEnumType(IfcStackTerminalTypeEnumType object) {
				return createIfcStackTerminalTypeEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcStair(IfcStair object) {
				return createIfcStairAdapter();
			}
			@Override
			public Adapter caseIfcStairFlight(IfcStairFlight object) {
				return createIfcStairFlightAdapter();
			}
			@Override
			public Adapter caseIfcStairFlightType(IfcStairFlightType object) {
				return createIfcStairFlightTypeAdapter();
			}
			@Override
			public Adapter caseIfcStairFlightTypeEnumType(IfcStairFlightTypeEnumType object) {
				return createIfcStairFlightTypeEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcStairTypeEnumType(IfcStairTypeEnumType object) {
				return createIfcStairTypeEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcStateEnumType(IfcStateEnumType object) {
				return createIfcStateEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcStructuralAction(IfcStructuralAction object) {
				return createIfcStructuralActionAdapter();
			}
			@Override
			public Adapter caseIfcStructuralActivity(IfcStructuralActivity object) {
				return createIfcStructuralActivityAdapter();
			}
			@Override
			public Adapter caseIfcStructuralActivityAssignmentSelect(IfcStructuralActivityAssignmentSelect object) {
				return createIfcStructuralActivityAssignmentSelectAdapter();
			}
			@Override
			public Adapter caseIfcStructuralAnalysisModel(IfcStructuralAnalysisModel object) {
				return createIfcStructuralAnalysisModelAdapter();
			}
			@Override
			public Adapter caseIfcStructuralConnection(IfcStructuralConnection object) {
				return createIfcStructuralConnectionAdapter();
			}
			@Override
			public Adapter caseIfcStructuralConnectionCondition(IfcStructuralConnectionCondition object) {
				return createIfcStructuralConnectionConditionAdapter();
			}
			@Override
			public Adapter caseIfcStructuralCurveConnection(IfcStructuralCurveConnection object) {
				return createIfcStructuralCurveConnectionAdapter();
			}
			@Override
			public Adapter caseIfcStructuralCurveMember(IfcStructuralCurveMember object) {
				return createIfcStructuralCurveMemberAdapter();
			}
			@Override
			public Adapter caseIfcStructuralCurveMemberVarying(IfcStructuralCurveMemberVarying object) {
				return createIfcStructuralCurveMemberVaryingAdapter();
			}
			@Override
			public Adapter caseIfcStructuralCurveTypeEnumType(IfcStructuralCurveTypeEnumType object) {
				return createIfcStructuralCurveTypeEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcStructuralItem(IfcStructuralItem object) {
				return createIfcStructuralItemAdapter();
			}
			@Override
			public Adapter caseIfcStructuralLinearAction(IfcStructuralLinearAction object) {
				return createIfcStructuralLinearActionAdapter();
			}
			@Override
			public Adapter caseIfcStructuralLinearActionVarying(IfcStructuralLinearActionVarying object) {
				return createIfcStructuralLinearActionVaryingAdapter();
			}
			@Override
			public Adapter caseIfcStructuralLoad(IfcStructuralLoad object) {
				return createIfcStructuralLoadAdapter();
			}
			@Override
			public Adapter caseIfcStructuralLoadGroup(IfcStructuralLoadGroup object) {
				return createIfcStructuralLoadGroupAdapter();
			}
			@Override
			public Adapter caseIfcStructuralLoadLinearForce(IfcStructuralLoadLinearForce object) {
				return createIfcStructuralLoadLinearForceAdapter();
			}
			@Override
			public Adapter caseIfcStructuralLoadPlanarForce(IfcStructuralLoadPlanarForce object) {
				return createIfcStructuralLoadPlanarForceAdapter();
			}
			@Override
			public Adapter caseIfcStructuralLoadSingleDisplacement(IfcStructuralLoadSingleDisplacement object) {
				return createIfcStructuralLoadSingleDisplacementAdapter();
			}
			@Override
			public Adapter caseIfcStructuralLoadSingleDisplacementDistortion(IfcStructuralLoadSingleDisplacementDistortion object) {
				return createIfcStructuralLoadSingleDisplacementDistortionAdapter();
			}
			@Override
			public Adapter caseIfcStructuralLoadSingleForce(IfcStructuralLoadSingleForce object) {
				return createIfcStructuralLoadSingleForceAdapter();
			}
			@Override
			public Adapter caseIfcStructuralLoadSingleForceWarping(IfcStructuralLoadSingleForceWarping object) {
				return createIfcStructuralLoadSingleForceWarpingAdapter();
			}
			@Override
			public Adapter caseIfcStructuralLoadStatic(IfcStructuralLoadStatic object) {
				return createIfcStructuralLoadStaticAdapter();
			}
			@Override
			public Adapter caseIfcStructuralLoadTemperature(IfcStructuralLoadTemperature object) {
				return createIfcStructuralLoadTemperatureAdapter();
			}
			@Override
			public Adapter caseIfcStructuralMember(IfcStructuralMember object) {
				return createIfcStructuralMemberAdapter();
			}
			@Override
			public Adapter caseIfcStructuralPlanarAction(IfcStructuralPlanarAction object) {
				return createIfcStructuralPlanarActionAdapter();
			}
			@Override
			public Adapter caseIfcStructuralPlanarActionVarying(IfcStructuralPlanarActionVarying object) {
				return createIfcStructuralPlanarActionVaryingAdapter();
			}
			@Override
			public Adapter caseIfcStructuralPointAction(IfcStructuralPointAction object) {
				return createIfcStructuralPointActionAdapter();
			}
			@Override
			public Adapter caseIfcStructuralPointConnection(IfcStructuralPointConnection object) {
				return createIfcStructuralPointConnectionAdapter();
			}
			@Override
			public Adapter caseIfcStructuralPointReaction(IfcStructuralPointReaction object) {
				return createIfcStructuralPointReactionAdapter();
			}
			@Override
			public Adapter caseIfcStructuralProfileProperties(IfcStructuralProfileProperties object) {
				return createIfcStructuralProfilePropertiesAdapter();
			}
			@Override
			public Adapter caseIfcStructuralReaction(IfcStructuralReaction object) {
				return createIfcStructuralReactionAdapter();
			}
			@Override
			public Adapter caseIfcStructuralResultGroup(IfcStructuralResultGroup object) {
				return createIfcStructuralResultGroupAdapter();
			}
			@Override
			public Adapter caseIfcStructuralSteelProfileProperties(IfcStructuralSteelProfileProperties object) {
				return createIfcStructuralSteelProfilePropertiesAdapter();
			}
			@Override
			public Adapter caseIfcStructuralSurfaceConnection(IfcStructuralSurfaceConnection object) {
				return createIfcStructuralSurfaceConnectionAdapter();
			}
			@Override
			public Adapter caseIfcStructuralSurfaceMember(IfcStructuralSurfaceMember object) {
				return createIfcStructuralSurfaceMemberAdapter();
			}
			@Override
			public Adapter caseIfcStructuralSurfaceMemberVarying(IfcStructuralSurfaceMemberVarying object) {
				return createIfcStructuralSurfaceMemberVaryingAdapter();
			}
			@Override
			public Adapter caseIfcStructuralSurfaceTypeEnumType(IfcStructuralSurfaceTypeEnumType object) {
				return createIfcStructuralSurfaceTypeEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcStructuredDimensionCallout(IfcStructuredDimensionCallout object) {
				return createIfcStructuredDimensionCalloutAdapter();
			}
			@Override
			public Adapter caseIfcStyledItem(IfcStyledItem object) {
				return createIfcStyledItemAdapter();
			}
			@Override
			public Adapter caseIfcStyledRepresentation(IfcStyledRepresentation object) {
				return createIfcStyledRepresentationAdapter();
			}
			@Override
			public Adapter caseIfcStyleModel(IfcStyleModel object) {
				return createIfcStyleModelAdapter();
			}
			@Override
			public Adapter caseIfcSubContractResource(IfcSubContractResource object) {
				return createIfcSubContractResourceAdapter();
			}
			@Override
			public Adapter caseIfcSubedge(IfcSubedge object) {
				return createIfcSubedgeAdapter();
			}
			@Override
			public Adapter caseIfcSurface(IfcSurface object) {
				return createIfcSurfaceAdapter();
			}
			@Override
			public Adapter caseIfcSurfaceCurveSweptAreaSolid(IfcSurfaceCurveSweptAreaSolid object) {
				return createIfcSurfaceCurveSweptAreaSolidAdapter();
			}
			@Override
			public Adapter caseIfcSurfaceOfLinearExtrusion(IfcSurfaceOfLinearExtrusion object) {
				return createIfcSurfaceOfLinearExtrusionAdapter();
			}
			@Override
			public Adapter caseIfcSurfaceOfRevolution(IfcSurfaceOfRevolution object) {
				return createIfcSurfaceOfRevolutionAdapter();
			}
			@Override
			public Adapter caseIfcSurfaceOrFaceSurface(IfcSurfaceOrFaceSurface object) {
				return createIfcSurfaceOrFaceSurfaceAdapter();
			}
			@Override
			public Adapter caseIfcSurfaceSideType(IfcSurfaceSideType object) {
				return createIfcSurfaceSideTypeAdapter();
			}
			@Override
			public Adapter caseIfcSurfaceStyle(IfcSurfaceStyle object) {
				return createIfcSurfaceStyleAdapter();
			}
			@Override
			public Adapter caseIfcSurfaceStyleElementSelect(IfcSurfaceStyleElementSelect object) {
				return createIfcSurfaceStyleElementSelectAdapter();
			}
			@Override
			public Adapter caseIfcSurfaceStyleLighting(IfcSurfaceStyleLighting object) {
				return createIfcSurfaceStyleLightingAdapter();
			}
			@Override
			public Adapter caseIfcSurfaceStyleRefraction(IfcSurfaceStyleRefraction object) {
				return createIfcSurfaceStyleRefractionAdapter();
			}
			@Override
			public Adapter caseIfcSurfaceStyleRendering(IfcSurfaceStyleRendering object) {
				return createIfcSurfaceStyleRenderingAdapter();
			}
			@Override
			public Adapter caseIfcSurfaceStyleShading(IfcSurfaceStyleShading object) {
				return createIfcSurfaceStyleShadingAdapter();
			}
			@Override
			public Adapter caseIfcSurfaceStyleWithTextures(IfcSurfaceStyleWithTextures object) {
				return createIfcSurfaceStyleWithTexturesAdapter();
			}
			@Override
			public Adapter caseIfcSurfaceTexture(IfcSurfaceTexture object) {
				return createIfcSurfaceTextureAdapter();
			}
			@Override
			public Adapter caseIfcSurfaceTextureEnumType(IfcSurfaceTextureEnumType object) {
				return createIfcSurfaceTextureEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcSweptAreaSolid(IfcSweptAreaSolid object) {
				return createIfcSweptAreaSolidAdapter();
			}
			@Override
			public Adapter caseIfcSweptDiskSolid(IfcSweptDiskSolid object) {
				return createIfcSweptDiskSolidAdapter();
			}
			@Override
			public Adapter caseIfcSweptSurface(IfcSweptSurface object) {
				return createIfcSweptSurfaceAdapter();
			}
			@Override
			public Adapter caseIfcSwitchingDeviceType(IfcSwitchingDeviceType object) {
				return createIfcSwitchingDeviceTypeAdapter();
			}
			@Override
			public Adapter caseIfcSwitchingDeviceTypeEnumType(IfcSwitchingDeviceTypeEnumType object) {
				return createIfcSwitchingDeviceTypeEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcSymbolStyle(IfcSymbolStyle object) {
				return createIfcSymbolStyleAdapter();
			}
			@Override
			public Adapter caseIfcSymbolStyleSelect(IfcSymbolStyleSelect object) {
				return createIfcSymbolStyleSelectAdapter();
			}
			@Override
			public Adapter caseIfcSystem(IfcSystem object) {
				return createIfcSystemAdapter();
			}
			@Override
			public Adapter caseIfcSystemFurnitureElementType(IfcSystemFurnitureElementType object) {
				return createIfcSystemFurnitureElementTypeAdapter();
			}
			@Override
			public Adapter caseIfcTable(IfcTable object) {
				return createIfcTableAdapter();
			}
			@Override
			public Adapter caseIfcTableRow(IfcTableRow object) {
				return createIfcTableRowAdapter();
			}
			@Override
			public Adapter caseIfcTankType(IfcTankType object) {
				return createIfcTankTypeAdapter();
			}
			@Override
			public Adapter caseIfcTankTypeEnumType(IfcTankTypeEnumType object) {
				return createIfcTankTypeEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcTask(IfcTask object) {
				return createIfcTaskAdapter();
			}
			@Override
			public Adapter caseIfcTelecomAddress(IfcTelecomAddress object) {
				return createIfcTelecomAddressAdapter();
			}
			@Override
			public Adapter caseIfcTemperatureGradientMeasureType(IfcTemperatureGradientMeasureType object) {
				return createIfcTemperatureGradientMeasureTypeAdapter();
			}
			@Override
			public Adapter caseIfcTendon(IfcTendon object) {
				return createIfcTendonAdapter();
			}
			@Override
			public Adapter caseIfcTendonAnchor(IfcTendonAnchor object) {
				return createIfcTendonAnchorAdapter();
			}
			@Override
			public Adapter caseIfcTendonTypeEnumType(IfcTendonTypeEnumType object) {
				return createIfcTendonTypeEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcTerminatorSymbol(IfcTerminatorSymbol object) {
				return createIfcTerminatorSymbolAdapter();
			}
			@Override
			public Adapter caseIfcTextAlignmentType(IfcTextAlignmentType object) {
				return createIfcTextAlignmentTypeAdapter();
			}
			@Override
			public Adapter caseIfcTextDecorationType(IfcTextDecorationType object) {
				return createIfcTextDecorationTypeAdapter();
			}
			@Override
			public Adapter caseIfcTextFontNameType(IfcTextFontNameType object) {
				return createIfcTextFontNameTypeAdapter();
			}
			@Override
			public Adapter caseIfcTextFontSelect(IfcTextFontSelect object) {
				return createIfcTextFontSelectAdapter();
			}
			@Override
			public Adapter caseIfcTextLiteral(IfcTextLiteral object) {
				return createIfcTextLiteralAdapter();
			}
			@Override
			public Adapter caseIfcTextLiteralWithExtent(IfcTextLiteralWithExtent object) {
				return createIfcTextLiteralWithExtentAdapter();
			}
			@Override
			public Adapter caseIfcTextPathType(IfcTextPathType object) {
				return createIfcTextPathTypeAdapter();
			}
			@Override
			public Adapter caseIfcTextStyle(IfcTextStyle object) {
				return createIfcTextStyleAdapter();
			}
			@Override
			public Adapter caseIfcTextStyleFontModel(IfcTextStyleFontModel object) {
				return createIfcTextStyleFontModelAdapter();
			}
			@Override
			public Adapter caseIfcTextStyleForDefinedFont(IfcTextStyleForDefinedFont object) {
				return createIfcTextStyleForDefinedFontAdapter();
			}
			@Override
			public Adapter caseIfcTextStyleSelect(IfcTextStyleSelect object) {
				return createIfcTextStyleSelectAdapter();
			}
			@Override
			public Adapter caseIfcTextStyleTextModel(IfcTextStyleTextModel object) {
				return createIfcTextStyleTextModelAdapter();
			}
			@Override
			public Adapter caseIfcTextStyleWithBoxCharacteristics(IfcTextStyleWithBoxCharacteristics object) {
				return createIfcTextStyleWithBoxCharacteristicsAdapter();
			}
			@Override
			public Adapter caseIfcTextTransformationType(IfcTextTransformationType object) {
				return createIfcTextTransformationTypeAdapter();
			}
			@Override
			public Adapter caseIfcTextType(IfcTextType object) {
				return createIfcTextTypeAdapter();
			}
			@Override
			public Adapter caseIfcTextureCoordinate(IfcTextureCoordinate object) {
				return createIfcTextureCoordinateAdapter();
			}
			@Override
			public Adapter caseIfcTextureCoordinateGenerator(IfcTextureCoordinateGenerator object) {
				return createIfcTextureCoordinateGeneratorAdapter();
			}
			@Override
			public Adapter caseIfcTextureMap(IfcTextureMap object) {
				return createIfcTextureMapAdapter();
			}
			@Override
			public Adapter caseIfcTextureVertex(IfcTextureVertex object) {
				return createIfcTextureVertexAdapter();
			}
			@Override
			public Adapter caseIfcThermalAdmittanceMeasureType(IfcThermalAdmittanceMeasureType object) {
				return createIfcThermalAdmittanceMeasureTypeAdapter();
			}
			@Override
			public Adapter caseIfcThermalConductivityMeasureType(IfcThermalConductivityMeasureType object) {
				return createIfcThermalConductivityMeasureTypeAdapter();
			}
			@Override
			public Adapter caseIfcThermalExpansionCoefficientMeasureType(IfcThermalExpansionCoefficientMeasureType object) {
				return createIfcThermalExpansionCoefficientMeasureTypeAdapter();
			}
			@Override
			public Adapter caseIfcThermalLoadSourceEnumType(IfcThermalLoadSourceEnumType object) {
				return createIfcThermalLoadSourceEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcThermalLoadTypeEnumType(IfcThermalLoadTypeEnumType object) {
				return createIfcThermalLoadTypeEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcThermalMaterialProperties(IfcThermalMaterialProperties object) {
				return createIfcThermalMaterialPropertiesAdapter();
			}
			@Override
			public Adapter caseIfcThermalResistanceMeasureType(IfcThermalResistanceMeasureType object) {
				return createIfcThermalResistanceMeasureTypeAdapter();
			}
			@Override
			public Adapter caseIfcThermalTransmittanceMeasureType(IfcThermalTransmittanceMeasureType object) {
				return createIfcThermalTransmittanceMeasureTypeAdapter();
			}
			@Override
			public Adapter caseIfcThermodynamicTemperatureMeasureType(IfcThermodynamicTemperatureMeasureType object) {
				return createIfcThermodynamicTemperatureMeasureTypeAdapter();
			}
			@Override
			public Adapter caseIfcTimeMeasureType(IfcTimeMeasureType object) {
				return createIfcTimeMeasureTypeAdapter();
			}
			@Override
			public Adapter caseIfcTimeSeries(IfcTimeSeries object) {
				return createIfcTimeSeriesAdapter();
			}
			@Override
			public Adapter caseIfcTimeSeriesDataTypeEnumType(IfcTimeSeriesDataTypeEnumType object) {
				return createIfcTimeSeriesDataTypeEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcTimeSeriesReferenceRelationship(IfcTimeSeriesReferenceRelationship object) {
				return createIfcTimeSeriesReferenceRelationshipAdapter();
			}
			@Override
			public Adapter caseIfcTimeSeriesSchedule(IfcTimeSeriesSchedule object) {
				return createIfcTimeSeriesScheduleAdapter();
			}
			@Override
			public Adapter caseIfcTimeSeriesScheduleTypeEnumType(IfcTimeSeriesScheduleTypeEnumType object) {
				return createIfcTimeSeriesScheduleTypeEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcTimeSeriesValue(IfcTimeSeriesValue object) {
				return createIfcTimeSeriesValueAdapter();
			}
			@Override
			public Adapter caseIfcTimeStampType(IfcTimeStampType object) {
				return createIfcTimeStampTypeAdapter();
			}
			@Override
			public Adapter caseIfcTopologicalRepresentationItem(IfcTopologicalRepresentationItem object) {
				return createIfcTopologicalRepresentationItemAdapter();
			}
			@Override
			public Adapter caseIfcTopologyRepresentation(IfcTopologyRepresentation object) {
				return createIfcTopologyRepresentationAdapter();
			}
			@Override
			public Adapter caseIfcTorqueMeasureType(IfcTorqueMeasureType object) {
				return createIfcTorqueMeasureTypeAdapter();
			}
			@Override
			public Adapter caseIfcTransformerType(IfcTransformerType object) {
				return createIfcTransformerTypeAdapter();
			}
			@Override
			public Adapter caseIfcTransformerTypeEnumType(IfcTransformerTypeEnumType object) {
				return createIfcTransformerTypeEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcTransitionCodeType(IfcTransitionCodeType object) {
				return createIfcTransitionCodeTypeAdapter();
			}
			@Override
			public Adapter caseIfcTransportElement(IfcTransportElement object) {
				return createIfcTransportElementAdapter();
			}
			@Override
			public Adapter caseIfcTransportElementType(IfcTransportElementType object) {
				return createIfcTransportElementTypeAdapter();
			}
			@Override
			public Adapter caseIfcTransportElementTypeEnumType(IfcTransportElementTypeEnumType object) {
				return createIfcTransportElementTypeEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcTrapeziumProfileDef(IfcTrapeziumProfileDef object) {
				return createIfcTrapeziumProfileDefAdapter();
			}
			@Override
			public Adapter caseIfcTrimmedCurve(IfcTrimmedCurve object) {
				return createIfcTrimmedCurveAdapter();
			}
			@Override
			public Adapter caseIfcTrimmingPreferenceType(IfcTrimmingPreferenceType object) {
				return createIfcTrimmingPreferenceTypeAdapter();
			}
			@Override
			public Adapter caseIfcTrimmingSelect(IfcTrimmingSelect object) {
				return createIfcTrimmingSelectAdapter();
			}
			@Override
			public Adapter caseIfcTShapeProfileDef(IfcTShapeProfileDef object) {
				return createIfcTShapeProfileDefAdapter();
			}
			@Override
			public Adapter caseIfcTubeBundleType(IfcTubeBundleType object) {
				return createIfcTubeBundleTypeAdapter();
			}
			@Override
			public Adapter caseIfcTubeBundleTypeEnumType(IfcTubeBundleTypeEnumType object) {
				return createIfcTubeBundleTypeEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcTwoDirectionRepeatFactor(IfcTwoDirectionRepeatFactor object) {
				return createIfcTwoDirectionRepeatFactorAdapter();
			}
			@Override
			public Adapter caseIfcTypeObject(IfcTypeObject object) {
				return createIfcTypeObjectAdapter();
			}
			@Override
			public Adapter caseIfcTypeProduct(IfcTypeProduct object) {
				return createIfcTypeProductAdapter();
			}
			@Override
			public Adapter caseIfcUnit(IfcUnit object) {
				return createIfcUnitAdapter();
			}
			@Override
			public Adapter caseIfcUnitaryEquipmentType(IfcUnitaryEquipmentType object) {
				return createIfcUnitaryEquipmentTypeAdapter();
			}
			@Override
			public Adapter caseIfcUnitaryEquipmentTypeEnumType(IfcUnitaryEquipmentTypeEnumType object) {
				return createIfcUnitaryEquipmentTypeEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcUnitAssignment(IfcUnitAssignment object) {
				return createIfcUnitAssignmentAdapter();
			}
			@Override
			public Adapter caseIfcUnitEnumType(IfcUnitEnumType object) {
				return createIfcUnitEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcUShapeProfileDef(IfcUShapeProfileDef object) {
				return createIfcUShapeProfileDefAdapter();
			}
			@Override
			public Adapter caseIfcValue(IfcValue object) {
				return createIfcValueAdapter();
			}
			@Override
			public Adapter caseIfcValveType(IfcValveType object) {
				return createIfcValveTypeAdapter();
			}
			@Override
			public Adapter caseIfcValveTypeEnumType(IfcValveTypeEnumType object) {
				return createIfcValveTypeEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcVaporPermeabilityMeasureType(IfcVaporPermeabilityMeasureType object) {
				return createIfcVaporPermeabilityMeasureTypeAdapter();
			}
			@Override
			public Adapter caseIfcVector(IfcVector object) {
				return createIfcVectorAdapter();
			}
			@Override
			public Adapter caseIfcVectorOrDirection(IfcVectorOrDirection object) {
				return createIfcVectorOrDirectionAdapter();
			}
			@Override
			public Adapter caseIfcVertex(IfcVertex object) {
				return createIfcVertexAdapter();
			}
			@Override
			public Adapter caseIfcVertexBasedTextureMap(IfcVertexBasedTextureMap object) {
				return createIfcVertexBasedTextureMapAdapter();
			}
			@Override
			public Adapter caseIfcVertexLoop(IfcVertexLoop object) {
				return createIfcVertexLoopAdapter();
			}
			@Override
			public Adapter caseIfcVertexPoint(IfcVertexPoint object) {
				return createIfcVertexPointAdapter();
			}
			@Override
			public Adapter caseIfcVibrationIsolatorType(IfcVibrationIsolatorType object) {
				return createIfcVibrationIsolatorTypeAdapter();
			}
			@Override
			public Adapter caseIfcVibrationIsolatorTypeEnumType(IfcVibrationIsolatorTypeEnumType object) {
				return createIfcVibrationIsolatorTypeEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcVirtualElement(IfcVirtualElement object) {
				return createIfcVirtualElementAdapter();
			}
			@Override
			public Adapter caseIfcVirtualGridIntersection(IfcVirtualGridIntersection object) {
				return createIfcVirtualGridIntersectionAdapter();
			}
			@Override
			public Adapter caseIfcVolumeMeasureType(IfcVolumeMeasureType object) {
				return createIfcVolumeMeasureTypeAdapter();
			}
			@Override
			public Adapter caseIfcVolumetricFlowRateMeasureType(IfcVolumetricFlowRateMeasureType object) {
				return createIfcVolumetricFlowRateMeasureTypeAdapter();
			}
			@Override
			public Adapter caseIfcWall(IfcWall object) {
				return createIfcWallAdapter();
			}
			@Override
			public Adapter caseIfcWallStandardCase(IfcWallStandardCase object) {
				return createIfcWallStandardCaseAdapter();
			}
			@Override
			public Adapter caseIfcWallType(IfcWallType object) {
				return createIfcWallTypeAdapter();
			}
			@Override
			public Adapter caseIfcWallTypeEnumType(IfcWallTypeEnumType object) {
				return createIfcWallTypeEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcWarpingConstantMeasureType(IfcWarpingConstantMeasureType object) {
				return createIfcWarpingConstantMeasureTypeAdapter();
			}
			@Override
			public Adapter caseIfcWarpingMomentMeasureType(IfcWarpingMomentMeasureType object) {
				return createIfcWarpingMomentMeasureTypeAdapter();
			}
			@Override
			public Adapter caseIfcWasteTerminalType(IfcWasteTerminalType object) {
				return createIfcWasteTerminalTypeAdapter();
			}
			@Override
			public Adapter caseIfcWasteTerminalTypeEnumType(IfcWasteTerminalTypeEnumType object) {
				return createIfcWasteTerminalTypeEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcWaterProperties(IfcWaterProperties object) {
				return createIfcWaterPropertiesAdapter();
			}
			@Override
			public Adapter caseIfcWindow(IfcWindow object) {
				return createIfcWindowAdapter();
			}
			@Override
			public Adapter caseIfcWindowLiningProperties(IfcWindowLiningProperties object) {
				return createIfcWindowLiningPropertiesAdapter();
			}
			@Override
			public Adapter caseIfcWindowPanelOperationEnumType(IfcWindowPanelOperationEnumType object) {
				return createIfcWindowPanelOperationEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcWindowPanelPositionEnumType(IfcWindowPanelPositionEnumType object) {
				return createIfcWindowPanelPositionEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcWindowPanelProperties(IfcWindowPanelProperties object) {
				return createIfcWindowPanelPropertiesAdapter();
			}
			@Override
			public Adapter caseIfcWindowStyle(IfcWindowStyle object) {
				return createIfcWindowStyleAdapter();
			}
			@Override
			public Adapter caseIfcWindowStyleConstructionEnumType(IfcWindowStyleConstructionEnumType object) {
				return createIfcWindowStyleConstructionEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcWindowStyleOperationEnumType(IfcWindowStyleOperationEnumType object) {
				return createIfcWindowStyleOperationEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcWorkControl(IfcWorkControl object) {
				return createIfcWorkControlAdapter();
			}
			@Override
			public Adapter caseIfcWorkControlTypeEnumType(IfcWorkControlTypeEnumType object) {
				return createIfcWorkControlTypeEnumTypeAdapter();
			}
			@Override
			public Adapter caseIfcWorkPlan(IfcWorkPlan object) {
				return createIfcWorkPlanAdapter();
			}
			@Override
			public Adapter caseIfcWorkSchedule(IfcWorkSchedule object) {
				return createIfcWorkScheduleAdapter();
			}
			@Override
			public Adapter caseIfcYearNumberType(IfcYearNumberType object) {
				return createIfcYearNumberTypeAdapter();
			}
			@Override
			public Adapter caseIfcZone(IfcZone object) {
				return createIfcZoneAdapter();
			}
			@Override
			public Adapter caseIfcZShapeProfileDef(IfcZShapeProfileDef object) {
				return createIfcZShapeProfileDefAdapter();
			}
			@Override
			public Adapter caseIncorporationDateType(IncorporationDateType object) {
				return createIncorporationDateTypeAdapter();
			}
			@Override
			public Adapter caseInnerBoundariesType(InnerBoundariesType object) {
				return createInnerBoundariesTypeAdapter();
			}
			@Override
			public Adapter caseInnerBoundariesType1(InnerBoundariesType1 object) {
				return createInnerBoundariesType1Adapter();
			}
			@Override
			public Adapter caseInnerCurvesType(InnerCurvesType object) {
				return createInnerCurvesTypeAdapter();
			}
			@Override
			public Adapter caseIntersectingAxesType(IntersectingAxesType object) {
				return createIntersectingAxesTypeAdapter();
			}
			@Override
			public Adapter caseItemOfType(ItemOfType object) {
				return createItemOfTypeAdapter();
			}
			@Override
			public Adapter caseItemsType(ItemsType object) {
				return createItemsTypeAdapter();
			}
			@Override
			public Adapter caseItemType(ItemType object) {
				return createItemTypeAdapter();
			}
			@Override
			public Adapter caseItemType1(ItemType1 object) {
				return createItemType1Adapter();
			}
			@Override
			public Adapter caseJurisdictionType(JurisdictionType object) {
				return createJurisdictionTypeAdapter();
			}
			@Override
			public Adapter caseLastModifyingApplicationType(LastModifyingApplicationType object) {
				return createLastModifyingApplicationTypeAdapter();
			}
			@Override
			public Adapter caseLastModifyingUserType(LastModifyingUserType object) {
				return createLastModifyingUserTypeAdapter();
			}
			@Override
			public Adapter caseLastRevisionTimeType(LastRevisionTimeType object) {
				return createLastRevisionTimeTypeAdapter();
			}
			@Override
			public Adapter caseLastUpdateDateType(LastUpdateDateType object) {
				return createLastUpdateDateTypeAdapter();
			}
			@Override
			public Adapter caseLateFinishType(LateFinishType object) {
				return createLateFinishTypeAdapter();
			}
			@Override
			public Adapter caseLateStartType(LateStartType object) {
				return createLateStartTypeAdapter();
			}
			@Override
			public Adapter caseLayerStylesType(LayerStylesType object) {
				return createLayerStylesTypeAdapter();
			}
			@Override
			public Adapter caseLetterSpacingType(LetterSpacingType object) {
				return createLetterSpacingTypeAdapter();
			}
			@Override
			public Adapter caseLibraryReferenceType(LibraryReferenceType object) {
				return createLibraryReferenceTypeAdapter();
			}
			@Override
			public Adapter caseLightColourType(LightColourType object) {
				return createLightColourTypeAdapter();
			}
			@Override
			public Adapter caseLightDistributionDataSourceType(LightDistributionDataSourceType object) {
				return createLightDistributionDataSourceTypeAdapter();
			}
			@Override
			public Adapter caseLineHeightType(LineHeightType object) {
				return createLineHeightTypeAdapter();
			}
			@Override
			public Adapter caseListValuesType(ListValuesType object) {
				return createListValuesTypeAdapter();
			}
			@Override
			public Adapter caseListValuesType1(ListValuesType1 object) {
				return createListValuesType1Adapter();
			}
			@Override
			public Adapter caseListValuesType2(ListValuesType2 object) {
				return createListValuesType2Adapter();
			}
			@Override
			public Adapter caseLoadedByType(LoadedByType object) {
				return createLoadedByTypeAdapter();
			}
			@Override
			public Adapter caseLocalOriginType(LocalOriginType object) {
				return createLocalOriginTypeAdapter();
			}
			@Override
			public Adapter caseLocationAtRelatedElementType(LocationAtRelatedElementType object) {
				return createLocationAtRelatedElementTypeAdapter();
			}
			@Override
			public Adapter caseLocationAtRelatingElementType(LocationAtRelatingElementType object) {
				return createLocationAtRelatingElementTypeAdapter();
			}
			@Override
			public Adapter caseLocationOfInteractionType(LocationOfInteractionType object) {
				return createLocationOfInteractionTypeAdapter();
			}
			@Override
			public Adapter caseLocationType(LocationType object) {
				return createLocationTypeAdapter();
			}
			@Override
			public Adapter caseLoopVertexType(LoopVertexType object) {
				return createLoopVertexTypeAdapter();
			}
			@Override
			public Adapter caseLowerBoundValueType(LowerBoundValueType object) {
				return createLowerBoundValueTypeAdapter();
			}
			@Override
			public Adapter caseLowerValueType(LowerValueType object) {
				return createLowerValueTypeAdapter();
			}
			@Override
			public Adapter caseLuminousIntensityType(LuminousIntensityType object) {
				return createLuminousIntensityTypeAdapter();
			}
			@Override
			public Adapter caseMappedRepresentationType(MappedRepresentationType object) {
				return createMappedRepresentationTypeAdapter();
			}
			@Override
			public Adapter caseMappingOriginType(MappingOriginType object) {
				return createMappingOriginTypeAdapter();
			}
			@Override
			public Adapter caseMappingSourceType(MappingSourceType object) {
				return createMappingSourceTypeAdapter();
			}
			@Override
			public Adapter caseMappingTargetType(MappingTargetType object) {
				return createMappingTargetTypeAdapter();
			}
			@Override
			public Adapter caseMaterialClassificationsType(MaterialClassificationsType object) {
				return createMaterialClassificationsTypeAdapter();
			}
			@Override
			public Adapter caseMaterialLayersType(MaterialLayersType object) {
				return createMaterialLayersTypeAdapter();
			}
			@Override
			public Adapter caseMaterialsType(MaterialsType object) {
				return createMaterialsTypeAdapter();
			}
			@Override
			public Adapter caseMaterialType(MaterialType object) {
				return createMaterialTypeAdapter();
			}
			@Override
			public Adapter caseMaterialType1(MaterialType1 object) {
				return createMaterialType1Adapter();
			}
			@Override
			public Adapter caseMiddleNamesType(MiddleNamesType object) {
				return createMiddleNamesTypeAdapter();
			}
			@Override
			public Adapter caseMostUsedValueType(MostUsedValueType object) {
				return createMostUsedValueTypeAdapter();
			}
			@Override
			public Adapter caseMoveFromType(MoveFromType object) {
				return createMoveFromTypeAdapter();
			}
			@Override
			public Adapter caseMoveToType(MoveToType object) {
				return createMoveToTypeAdapter();
			}
			@Override
			public Adapter caseNominalValueType(NominalValueType object) {
				return createNominalValueTypeAdapter();
			}
			@Override
			public Adapter caseNotationFacetsType(NotationFacetsType object) {
				return createNotationFacetsTypeAdapter();
			}
			@Override
			public Adapter caseNotationType(NotationType object) {
				return createNotationTypeAdapter();
			}
			@Override
			public Adapter caseObjectPlacementType(ObjectPlacementType object) {
				return createObjectPlacementTypeAdapter();
			}
			@Override
			public Adapter caseOffsetDistancesType(OffsetDistancesType object) {
				return createOffsetDistancesTypeAdapter();
			}
			@Override
			public Adapter caseOperatorType(OperatorType object) {
				return createOperatorTypeAdapter();
			}
			@Override
			public Adapter caseOrientationOf2DPlaneType(OrientationOf2DPlaneType object) {
				return createOrientationOf2DPlaneTypeAdapter();
			}
			@Override
			public Adapter caseOrientationType(OrientationType object) {
				return createOrientationTypeAdapter();
			}
			@Override
			public Adapter caseOrientationType1(OrientationType1 object) {
				return createOrientationType1Adapter();
			}
			@Override
			public Adapter caseOrientationType2(OrientationType2 object) {
				return createOrientationType2Adapter();
			}
			@Override
			public Adapter caseOriginalValueType(OriginalValueType object) {
				return createOriginalValueTypeAdapter();
			}
			@Override
			public Adapter caseOriginalValueType1(OriginalValueType1 object) {
				return createOriginalValueType1Adapter();
			}
			@Override
			public Adapter caseOuterBoundaryType(OuterBoundaryType object) {
				return createOuterBoundaryTypeAdapter();
			}
			@Override
			public Adapter caseOuterBoundaryType1(OuterBoundaryType1 object) {
				return createOuterBoundaryType1Adapter();
			}
			@Override
			public Adapter caseOuterCurveType(OuterCurveType object) {
				return createOuterCurveTypeAdapter();
			}
			@Override
			public Adapter caseOuterType(OuterType object) {
				return createOuterTypeAdapter();
			}
			@Override
			public Adapter caseOverridingPropertiesType(OverridingPropertiesType object) {
				return createOverridingPropertiesTypeAdapter();
			}
			@Override
			public Adapter caseOwnerHistoryType(OwnerHistoryType object) {
				return createOwnerHistoryTypeAdapter();
			}
			@Override
			public Adapter caseOwnerType(OwnerType object) {
				return createOwnerTypeAdapter();
			}
			@Override
			public Adapter caseOwningApplicationType(OwningApplicationType object) {
				return createOwningApplicationTypeAdapter();
			}
			@Override
			public Adapter caseOwningUserType(OwningUserType object) {
				return createOwningUserTypeAdapter();
			}
			@Override
			public Adapter caseParameterType(ParameterType object) {
				return createParameterTypeAdapter();
			}
			@Override
			public Adapter caseParentContextType(ParentContextType object) {
				return createParentContextTypeAdapter();
			}
			@Override
			public Adapter caseParentCurveType(ParentCurveType object) {
				return createParentCurveTypeAdapter();
			}
			@Override
			public Adapter caseParentEdgeType(ParentEdgeType object) {
				return createParentEdgeTypeAdapter();
			}
			@Override
			public Adapter caseParentProfileType(ParentProfileType object) {
				return createParentProfileTypeAdapter();
			}
			@Override
			public Adapter casePartOfProductDefinitionShapeType(PartOfProductDefinitionShapeType object) {
				return createPartOfProductDefinitionShapeTypeAdapter();
			}
			@Override
			public Adapter casePatternListType(PatternListType object) {
				return createPatternListTypeAdapter();
			}
			@Override
			public Adapter casePatternStartType(PatternStartType object) {
				return createPatternStartTypeAdapter();
			}
			@Override
			public Adapter casePixelType(PixelType object) {
				return createPixelTypeAdapter();
			}
			@Override
			public Adapter casePlacementLocationType(PlacementLocationType object) {
				return createPlacementLocationTypeAdapter();
			}
			@Override
			public Adapter casePlacementRefDirectionType(PlacementRefDirectionType object) {
				return createPlacementRefDirectionTypeAdapter();
			}
			@Override
			public Adapter casePlacementRelToType(PlacementRelToType object) {
				return createPlacementRelToTypeAdapter();
			}
			@Override
			public Adapter casePlacementType(PlacementType object) {
				return createPlacementTypeAdapter();
			}
			@Override
			public Adapter casePlacementType1(PlacementType1 object) {
				return createPlacementType1Adapter();
			}
			@Override
			public Adapter casePntType(PntType object) {
				return createPntTypeAdapter();
			}
			@Override
			public Adapter casePointOfReferenceHatchLineType(PointOfReferenceHatchLineType object) {
				return createPointOfReferenceHatchLineTypeAdapter();
			}
			@Override
			public Adapter casePointOnRelatedElementType(PointOnRelatedElementType object) {
				return createPointOnRelatedElementTypeAdapter();
			}
			@Override
			public Adapter casePointOnRelatingElementType(PointOnRelatingElementType object) {
				return createPointOnRelatingElementTypeAdapter();
			}
			@Override
			public Adapter casePointsType(PointsType object) {
				return createPointsTypeAdapter();
			}
			@Override
			public Adapter casePolygonalBoundaryType(PolygonalBoundaryType object) {
				return createPolygonalBoundaryTypeAdapter();
			}
			@Override
			public Adapter casePolygonType(PolygonType object) {
				return createPolygonTypeAdapter();
			}
			@Override
			public Adapter casePositionType(PositionType object) {
				return createPositionTypeAdapter();
			}
			@Override
			public Adapter casePositionType1(PositionType1 object) {
				return createPositionType1Adapter();
			}
			@Override
			public Adapter casePositionType2(PositionType2 object) {
				return createPositionType2Adapter();
			}
			@Override
			public Adapter casePositionType3(PositionType3 object) {
				return createPositionType3Adapter();
			}
			@Override
			public Adapter casePositionType4(PositionType4 object) {
				return createPositionType4Adapter();
			}
			@Override
			public Adapter casePositionType5(PositionType5 object) {
				return createPositionType5Adapter();
			}
			@Override
			public Adapter casePositionType6(PositionType6 object) {
				return createPositionType6Adapter();
			}
			@Override
			public Adapter casePositionType7(PositionType7 object) {
				return createPositionType7Adapter();
			}
			@Override
			public Adapter casePositionType8(PositionType8 object) {
				return createPositionType8Adapter();
			}
			@Override
			public Adapter casePrefixTitlesType(PrefixTitlesType object) {
				return createPrefixTitlesTypeAdapter();
			}
			@Override
			public Adapter casePreparedByType(PreparedByType object) {
				return createPreparedByTypeAdapter();
			}
			@Override
			public Adapter casePressureTimeSeriesType(PressureTimeSeriesType object) {
				return createPressureTimeSeriesTypeAdapter();
			}
			@Override
			public Adapter caseProfileDefinitionType(ProfileDefinitionType object) {
				return createProfileDefinitionTypeAdapter();
			}
			@Override
			public Adapter caseProfileOfPortType(ProfileOfPortType object) {
				return createProfileOfPortTypeAdapter();
			}
			@Override
			public Adapter caseProfileOrientationType(ProfileOrientationType object) {
				return createProfileOrientationTypeAdapter();
			}
			@Override
			public Adapter caseProfileSectionLocationType(ProfileSectionLocationType object) {
				return createProfileSectionLocationTypeAdapter();
			}
			@Override
			public Adapter caseProfilesType(ProfilesType object) {
				return createProfilesTypeAdapter();
			}
			@Override
			public Adapter casePropertyReferenceType(PropertyReferenceType object) {
				return createPropertyReferenceTypeAdapter();
			}
			@Override
			public Adapter casePublisherType(PublisherType object) {
				return createPublisherTypeAdapter();
			}
			@Override
			public Adapter casePunchListType(PunchListType object) {
				return createPunchListTypeAdapter();
			}
			@Override
			public Adapter caseQuantitiesType(QuantitiesType object) {
				return createQuantitiesTypeAdapter();
			}
			@Override
			public Adapter caseQuantityInProcessType(QuantityInProcessType object) {
				return createQuantityInProcessTypeAdapter();
			}
			@Override
			public Adapter caseRateDateTimeType(RateDateTimeType object) {
				return createRateDateTimeTypeAdapter();
			}
			@Override
			public Adapter caseRateSourceType(RateSourceType object) {
				return createRateSourceTypeAdapter();
			}
			@Override
			public Adapter caseRealizingElementsType(RealizingElementsType object) {
				return createRealizingElementsTypeAdapter();
			}
			@Override
			public Adapter caseRealizingElementType(RealizingElementType object) {
				return createRealizingElementTypeAdapter();
			}
			@Override
			public Adapter caseRecordsType(RecordsType object) {
				return createRecordsTypeAdapter();
			}
			@Override
			public Adapter caseRefDirectionType(RefDirectionType object) {
				return createRefDirectionTypeAdapter();
			}
			@Override
			public Adapter caseRefDirectionType1(RefDirectionType1 object) {
				return createRefDirectionType1Adapter();
			}
			@Override
			public Adapter caseRefDirectionType2(RefDirectionType2 object) {
				return createRefDirectionType2Adapter();
			}
			@Override
			public Adapter caseReferencedDocumentType(ReferencedDocumentType object) {
				return createReferencedDocumentTypeAdapter();
			}
			@Override
			public Adapter caseReferencedSourceType(ReferencedSourceType object) {
				return createReferencedSourceTypeAdapter();
			}
			@Override
			public Adapter caseReferencedTimeSeriesType(ReferencedTimeSeriesType object) {
				return createReferencedTimeSeriesTypeAdapter();
			}
			@Override
			public Adapter caseReferenceSurfaceType(ReferenceSurfaceType object) {
				return createReferenceSurfaceTypeAdapter();
			}
			@Override
			public Adapter caseReferencingValuesType(ReferencingValuesType object) {
				return createReferencingValuesTypeAdapter();
			}
			@Override
			public Adapter caseReflectanceColourType(ReflectanceColourType object) {
				return createReflectanceColourTypeAdapter();
			}
			@Override
			public Adapter caseReflectionColourType(ReflectionColourType object) {
				return createReflectionColourTypeAdapter();
			}
			@Override
			public Adapter caseReinforcementSectionDefinitionsType(ReinforcementSectionDefinitionsType object) {
				return createReinforcementSectionDefinitionsTypeAdapter();
			}
			@Override
			public Adapter caseRelatedApprovalType(RelatedApprovalType object) {
				return createRelatedApprovalTypeAdapter();
			}
			@Override
			public Adapter caseRelatedBuildingElementType(RelatedBuildingElementType object) {
				return createRelatedBuildingElementTypeAdapter();
			}
			@Override
			public Adapter caseRelatedBuildingElementType1(RelatedBuildingElementType1 object) {
				return createRelatedBuildingElementType1Adapter();
			}
			@Override
			public Adapter caseRelatedBuildingsType(RelatedBuildingsType object) {
				return createRelatedBuildingsTypeAdapter();
			}
			@Override
			public Adapter caseRelatedClassificationsType(RelatedClassificationsType object) {
				return createRelatedClassificationsTypeAdapter();
			}
			@Override
			public Adapter caseRelatedConstraintsType(RelatedConstraintsType object) {
				return createRelatedConstraintsTypeAdapter();
			}
			@Override
			public Adapter caseRelatedConstraintsType1(RelatedConstraintsType1 object) {
				return createRelatedConstraintsType1Adapter();
			}
			@Override
			public Adapter caseRelatedControlElementsType(RelatedControlElementsType object) {
				return createRelatedControlElementsTypeAdapter();
			}
			@Override
			public Adapter caseRelatedCoveringsType(RelatedCoveringsType object) {
				return createRelatedCoveringsTypeAdapter();
			}
			@Override
			public Adapter caseRelatedCoveringsType1(RelatedCoveringsType1 object) {
				return createRelatedCoveringsType1Adapter();
			}
			@Override
			public Adapter caseRelatedDocumentsType(RelatedDocumentsType object) {
				return createRelatedDocumentsTypeAdapter();
			}
			@Override
			public Adapter caseRelatedDraughtingCalloutType(RelatedDraughtingCalloutType object) {
				return createRelatedDraughtingCalloutTypeAdapter();
			}
			@Override
			public Adapter caseRelatedElementsType(RelatedElementsType object) {
				return createRelatedElementsTypeAdapter();
			}
			@Override
			public Adapter caseRelatedElementsType1(RelatedElementsType1 object) {
				return createRelatedElementsType1Adapter();
			}
			@Override
			public Adapter caseRelatedElementType(RelatedElementType object) {
				return createRelatedElementTypeAdapter();
			}
			@Override
			public Adapter caseRelatedElementType1(RelatedElementType1 object) {
				return createRelatedElementType1Adapter();
			}
			@Override
			public Adapter caseRelatedFeatureElementType(RelatedFeatureElementType object) {
				return createRelatedFeatureElementTypeAdapter();
			}
			@Override
			public Adapter caseRelatedItemsType(RelatedItemsType object) {
				return createRelatedItemsTypeAdapter();
			}
			@Override
			public Adapter caseRelatedMonetaryUnitType(RelatedMonetaryUnitType object) {
				return createRelatedMonetaryUnitTypeAdapter();
			}
			@Override
			public Adapter caseRelatedObjectsType(RelatedObjectsType object) {
				return createRelatedObjectsTypeAdapter();
			}
			@Override
			public Adapter caseRelatedObjectsType1(RelatedObjectsType1 object) {
				return createRelatedObjectsType1Adapter();
			}
			@Override
			public Adapter caseRelatedObjectsType2(RelatedObjectsType2 object) {
				return createRelatedObjectsType2Adapter();
			}
			@Override
			public Adapter caseRelatedObjectsType3(RelatedObjectsType3 object) {
				return createRelatedObjectsType3Adapter();
			}
			@Override
			public Adapter caseRelatedOpeningElementType(RelatedOpeningElementType object) {
				return createRelatedOpeningElementTypeAdapter();
			}
			@Override
			public Adapter caseRelatedOrganizationsType(RelatedOrganizationsType object) {
				return createRelatedOrganizationsTypeAdapter();
			}
			@Override
			public Adapter caseRelatedPortType(RelatedPortType object) {
				return createRelatedPortTypeAdapter();
			}
			@Override
			public Adapter caseRelatedPrioritiesType(RelatedPrioritiesType object) {
				return createRelatedPrioritiesTypeAdapter();
			}
			@Override
			public Adapter caseRelatedProcessType(RelatedProcessType object) {
				return createRelatedProcessTypeAdapter();
			}
			@Override
			public Adapter caseRelatedPropertiesType(RelatedPropertiesType object) {
				return createRelatedPropertiesTypeAdapter();
			}
			@Override
			public Adapter caseRelatedSpaceProgramType(RelatedSpaceProgramType object) {
				return createRelatedSpaceProgramTypeAdapter();
			}
			@Override
			public Adapter caseRelatedSpaceType(RelatedSpaceType object) {
				return createRelatedSpaceTypeAdapter();
			}
			@Override
			public Adapter caseRelatedStructuralActivityType(RelatedStructuralActivityType object) {
				return createRelatedStructuralActivityTypeAdapter();
			}
			@Override
			public Adapter caseRelatedStructuralConnectionType(RelatedStructuralConnectionType object) {
				return createRelatedStructuralConnectionTypeAdapter();
			}
			@Override
			public Adapter caseRelatedStructuralMemberType(RelatedStructuralMemberType object) {
				return createRelatedStructuralMemberTypeAdapter();
			}
			@Override
			public Adapter caseRelatingActorType(RelatingActorType object) {
				return createRelatingActorTypeAdapter();
			}
			@Override
			public Adapter caseRelatingAppliedValueType(RelatingAppliedValueType object) {
				return createRelatingAppliedValueTypeAdapter();
			}
			@Override
			public Adapter caseRelatingApprovalType(RelatingApprovalType object) {
				return createRelatingApprovalTypeAdapter();
			}
			@Override
			public Adapter caseRelatingApprovalType1(RelatingApprovalType1 object) {
				return createRelatingApprovalType1Adapter();
			}
			@Override
			public Adapter caseRelatingBuildingElementType(RelatingBuildingElementType object) {
				return createRelatingBuildingElementTypeAdapter();
			}
			@Override
			public Adapter caseRelatingBuildingElementType1(RelatingBuildingElementType1 object) {
				return createRelatingBuildingElementType1Adapter();
			}
			@Override
			public Adapter caseRelatingClassificationType(RelatingClassificationType object) {
				return createRelatingClassificationTypeAdapter();
			}
			@Override
			public Adapter caseRelatingConstraintType(RelatingConstraintType object) {
				return createRelatingConstraintTypeAdapter();
			}
			@Override
			public Adapter caseRelatingConstraintType1(RelatingConstraintType1 object) {
				return createRelatingConstraintType1Adapter();
			}
			@Override
			public Adapter caseRelatingConstraintType2(RelatingConstraintType2 object) {
				return createRelatingConstraintType2Adapter();
			}
			@Override
			public Adapter caseRelatingConstraintType3(RelatingConstraintType3 object) {
				return createRelatingConstraintType3Adapter();
			}
			@Override
			public Adapter caseRelatingControlType(RelatingControlType object) {
				return createRelatingControlTypeAdapter();
			}
			@Override
			public Adapter caseRelatingDocumentType(RelatingDocumentType object) {
				return createRelatingDocumentTypeAdapter();
			}
			@Override
			public Adapter caseRelatingDocumentType1(RelatingDocumentType1 object) {
				return createRelatingDocumentType1Adapter();
			}
			@Override
			public Adapter caseRelatingDraughtingCalloutType(RelatingDraughtingCalloutType object) {
				return createRelatingDraughtingCalloutTypeAdapter();
			}
			@Override
			public Adapter caseRelatingElementType(RelatingElementType object) {
				return createRelatingElementTypeAdapter();
			}
			@Override
			public Adapter caseRelatingElementType1(RelatingElementType1 object) {
				return createRelatingElementType1Adapter();
			}
			@Override
			public Adapter caseRelatingElementType2(RelatingElementType2 object) {
				return createRelatingElementType2Adapter();
			}
			@Override
			public Adapter caseRelatingElementType3(RelatingElementType3 object) {
				return createRelatingElementType3Adapter();
			}
			@Override
			public Adapter caseRelatingFlowElementType(RelatingFlowElementType object) {
				return createRelatingFlowElementTypeAdapter();
			}
			@Override
			public Adapter caseRelatingGroupType(RelatingGroupType object) {
				return createRelatingGroupTypeAdapter();
			}
			@Override
			public Adapter caseRelatingItemType(RelatingItemType object) {
				return createRelatingItemTypeAdapter();
			}
			@Override
			public Adapter caseRelatingLibraryType(RelatingLibraryType object) {
				return createRelatingLibraryTypeAdapter();
			}
			@Override
			public Adapter caseRelatingMaterialType(RelatingMaterialType object) {
				return createRelatingMaterialTypeAdapter();
			}
			@Override
			public Adapter caseRelatingMonetaryUnitType(RelatingMonetaryUnitType object) {
				return createRelatingMonetaryUnitTypeAdapter();
			}
			@Override
			public Adapter caseRelatingObjectType(RelatingObjectType object) {
				return createRelatingObjectTypeAdapter();
			}
			@Override
			public Adapter caseRelatingOpeningElementType(RelatingOpeningElementType object) {
				return createRelatingOpeningElementTypeAdapter();
			}
			@Override
			public Adapter caseRelatingOrganizationType(RelatingOrganizationType object) {
				return createRelatingOrganizationTypeAdapter();
			}
			@Override
			public Adapter caseRelatingPortType(RelatingPortType object) {
				return createRelatingPortTypeAdapter();
			}
			@Override
			public Adapter caseRelatingPortType1(RelatingPortType1 object) {
				return createRelatingPortType1Adapter();
			}
			@Override
			public Adapter caseRelatingPrioritiesType(RelatingPrioritiesType object) {
				return createRelatingPrioritiesTypeAdapter();
			}
			@Override
			public Adapter caseRelatingProcessType(RelatingProcessType object) {
				return createRelatingProcessTypeAdapter();
			}
			@Override
			public Adapter caseRelatingProcessType1(RelatingProcessType1 object) {
				return createRelatingProcessType1Adapter();
			}
			@Override
			public Adapter caseRelatingProductType(RelatingProductType object) {
				return createRelatingProductTypeAdapter();
			}
			@Override
			public Adapter caseRelatingProfilePropertiesType(RelatingProfilePropertiesType object) {
				return createRelatingProfilePropertiesTypeAdapter();
			}
			@Override
			public Adapter caseRelatingPropertyDefinitionType(RelatingPropertyDefinitionType object) {
				return createRelatingPropertyDefinitionTypeAdapter();
			}
			@Override
			public Adapter caseRelatingResourceType(RelatingResourceType object) {
				return createRelatingResourceTypeAdapter();
			}
			@Override
			public Adapter caseRelatingSpaceProgramType(RelatingSpaceProgramType object) {
				return createRelatingSpaceProgramTypeAdapter();
			}
			@Override
			public Adapter caseRelatingSpaceType(RelatingSpaceType object) {
				return createRelatingSpaceTypeAdapter();
			}
			@Override
			public Adapter caseRelatingStructuralMemberType(RelatingStructuralMemberType object) {
				return createRelatingStructuralMemberTypeAdapter();
			}
			@Override
			public Adapter caseRelatingStructureType(RelatingStructureType object) {
				return createRelatingStructureTypeAdapter();
			}
			@Override
			public Adapter caseRelatingStructureType1(RelatingStructureType1 object) {
				return createRelatingStructureType1Adapter();
			}
			@Override
			public Adapter caseRelatingSystemType(RelatingSystemType object) {
				return createRelatingSystemTypeAdapter();
			}
			@Override
			public Adapter caseRelatingTypeType(RelatingTypeType object) {
				return createRelatingTypeTypeAdapter();
			}
			@Override
			public Adapter caseRelativePlacementType(RelativePlacementType object) {
				return createRelativePlacementTypeAdapter();
			}
			@Override
			public Adapter caseRelaxationsType(RelaxationsType object) {
				return createRelaxationsTypeAdapter();
			}
			@Override
			public Adapter caseRepeatFactorType(RepeatFactorType object) {
				return createRepeatFactorTypeAdapter();
			}
			@Override
			public Adapter caseRepresentationContextsType(RepresentationContextsType object) {
				return createRepresentationContextsTypeAdapter();
			}
			@Override
			public Adapter caseRepresentationMapsType(RepresentationMapsType object) {
				return createRepresentationMapsTypeAdapter();
			}
			@Override
			public Adapter caseRepresentationsType(RepresentationsType object) {
				return createRepresentationsTypeAdapter();
			}
			@Override
			public Adapter caseRepresentationType(RepresentationType object) {
				return createRepresentationTypeAdapter();
			}
			@Override
			public Adapter caseRepresentedMaterialType(RepresentedMaterialType object) {
				return createRepresentedMaterialTypeAdapter();
			}
			@Override
			public Adapter caseRequestedLocationType(RequestedLocationType object) {
				return createRequestedLocationTypeAdapter();
			}
			@Override
			public Adapter caseResponsiblePersonsType(ResponsiblePersonsType object) {
				return createResponsiblePersonsTypeAdapter();
			}
			@Override
			public Adapter caseResponsiblePersonType(ResponsiblePersonType object) {
				return createResponsiblePersonTypeAdapter();
			}
			@Override
			public Adapter caseResultForLoadGroupType(ResultForLoadGroupType object) {
				return createResultForLoadGroupTypeAdapter();
			}
			@Override
			public Adapter caseResultValuesType(ResultValuesType object) {
				return createResultValuesTypeAdapter();
			}
			@Override
			public Adapter caseRolesType(RolesType object) {
				return createRolesTypeAdapter();
			}
			@Override
			public Adapter caseRolesType1(RolesType1 object) {
				return createRolesType1Adapter();
			}
			@Override
			public Adapter caseRolesType2(RolesType2 object) {
				return createRolesType2Adapter();
			}
			@Override
			public Adapter caseRoleType(RoleType object) {
				return createRoleTypeAdapter();
			}
			@Override
			public Adapter caseRowCellsType(RowCellsType object) {
				return createRowCellsTypeAdapter();
			}
			@Override
			public Adapter caseRowsType(RowsType object) {
				return createRowsTypeAdapter();
			}
			@Override
			public Adapter caseSbsmBoundaryType(SbsmBoundaryType object) {
				return createSbsmBoundaryTypeAdapter();
			}
			@Override
			public Adapter caseScheduleFinishType(ScheduleFinishType object) {
				return createScheduleFinishTypeAdapter();
			}
			@Override
			public Adapter caseScheduleStartType(ScheduleStartType object) {
				return createScheduleStartTypeAdapter();
			}
			@Override
			public Adapter caseSecondaryPlaneAngleType(SecondaryPlaneAngleType object) {
				return createSecondaryPlaneAngleTypeAdapter();
			}
			@Override
			public Adapter caseSecondOperandType(SecondOperandType object) {
				return createSecondOperandTypeAdapter();
			}
			@Override
			public Adapter caseSecondRepeatFactorType(SecondRepeatFactorType object) {
				return createSecondRepeatFactorTypeAdapter();
			}
			@Override
			public Adapter caseSectionDefinitionType(SectionDefinitionType object) {
				return createSectionDefinitionTypeAdapter();
			}
			@Override
			public Adapter caseSegmentsType(SegmentsType object) {
				return createSegmentsTypeAdapter();
			}
			@Override
			public Adapter caseShapeAspectStyleType(ShapeAspectStyleType object) {
				return createShapeAspectStyleTypeAdapter();
			}
			@Override
			public Adapter caseShapeAspectStyleType1(ShapeAspectStyleType1 object) {
				return createShapeAspectStyleType1Adapter();
			}
			@Override
			public Adapter caseShapeAspectStyleType2(ShapeAspectStyleType2 object) {
				return createShapeAspectStyleType2Adapter();
			}
			@Override
			public Adapter caseShapeAspectStyleType3(ShapeAspectStyleType3 object) {
				return createShapeAspectStyleType3Adapter();
			}
			@Override
			public Adapter caseShapeAspectStyleType4(ShapeAspectStyleType4 object) {
				return createShapeAspectStyleType4Adapter();
			}
			@Override
			public Adapter caseShapeRepresentationsType(ShapeRepresentationsType object) {
				return createShapeRepresentationsTypeAdapter();
			}
			@Override
			public Adapter caseSiteAddressType(SiteAddressType object) {
				return createSiteAddressTypeAdapter();
			}
			@Override
			public Adapter caseSoundLevelSingleValueType(SoundLevelSingleValueType object) {
				return createSoundLevelSingleValueTypeAdapter();
			}
			@Override
			public Adapter caseSoundLevelTimeSeriesType(SoundLevelTimeSeriesType object) {
				return createSoundLevelTimeSeriesTypeAdapter();
			}
			@Override
			public Adapter caseSoundValuesType(SoundValuesType object) {
				return createSoundValuesTypeAdapter();
			}
			@Override
			public Adapter caseSpecularColourType(SpecularColourType object) {
				return createSpecularColourTypeAdapter();
			}
			@Override
			public Adapter caseSpecularHighlightType(SpecularHighlightType object) {
				return createSpecularHighlightTypeAdapter();
			}
			@Override
			public Adapter caseSpineCurveType(SpineCurveType object) {
				return createSpineCurveTypeAdapter();
			}
			@Override
			public Adapter caseStartOfNextHatchLineType(StartOfNextHatchLineType object) {
				return createStartOfNextHatchLineTypeAdapter();
			}
			@Override
			public Adapter caseStartProfileType(StartProfileType object) {
				return createStartProfileTypeAdapter();
			}
			@Override
			public Adapter caseStartTimeType(StartTimeType object) {
				return createStartTimeTypeAdapter();
			}
			@Override
			public Adapter caseStartTimeType1(StartTimeType1 object) {
				return createStartTimeType1Adapter();
			}
			@Override
			public Adapter caseStatusTimeType(StatusTimeType object) {
				return createStatusTimeTypeAdapter();
			}
			@Override
			public Adapter caseStyleOfSymbolType(StyleOfSymbolType object) {
				return createStyleOfSymbolTypeAdapter();
			}
			@Override
			public Adapter caseStylesType(StylesType object) {
				return createStylesTypeAdapter();
			}
			@Override
			public Adapter caseStylesType1(StylesType1 object) {
				return createStylesType1Adapter();
			}
			@Override
			public Adapter caseStylesType2(StylesType2 object) {
				return createStylesType2Adapter();
			}
			@Override
			public Adapter caseSubContractorType(SubContractorType object) {
				return createSubContractorTypeAdapter();
			}
			@Override
			public Adapter caseSubmittedByType(SubmittedByType object) {
				return createSubmittedByTypeAdapter();
			}
			@Override
			public Adapter caseSubmittedOnType(SubmittedOnType object) {
				return createSubmittedOnTypeAdapter();
			}
			@Override
			public Adapter caseSubsequentAppliedLoadsType(SubsequentAppliedLoadsType object) {
				return createSubsequentAppliedLoadsTypeAdapter();
			}
			@Override
			public Adapter caseSubsequentAppliedLoadsType1(SubsequentAppliedLoadsType1 object) {
				return createSubsequentAppliedLoadsType1Adapter();
			}
			@Override
			public Adapter caseSubsequentThicknessType(SubsequentThicknessType object) {
				return createSubsequentThicknessTypeAdapter();
			}
			@Override
			public Adapter caseSuffixTitlesType(SuffixTitlesType object) {
				return createSuffixTitlesTypeAdapter();
			}
			@Override
			public Adapter caseSuppliersType(SuppliersType object) {
				return createSuppliersTypeAdapter();
			}
			@Override
			public Adapter caseSurfaceColourType(SurfaceColourType object) {
				return createSurfaceColourTypeAdapter();
			}
			@Override
			public Adapter caseSurfaceOnRelatedElementType(SurfaceOnRelatedElementType object) {
				return createSurfaceOnRelatedElementTypeAdapter();
			}
			@Override
			public Adapter caseSurfaceOnRelatingElementType(SurfaceOnRelatingElementType object) {
				return createSurfaceOnRelatingElementTypeAdapter();
			}
			@Override
			public Adapter caseSweptAreaType(SweptAreaType object) {
				return createSweptAreaTypeAdapter();
			}
			@Override
			public Adapter caseSweptCurveType(SweptCurveType object) {
				return createSweptCurveTypeAdapter();
			}
			@Override
			public Adapter caseSymbolType(SymbolType object) {
				return createSymbolTypeAdapter();
			}
			@Override
			public Adapter caseTargetType(TargetType object) {
				return createTargetTypeAdapter();
			}
			@Override
			public Adapter caseTargetUsersType(TargetUsersType object) {
				return createTargetUsersTypeAdapter();
			}
			@Override
			public Adapter caseTelephoneNumbersType(TelephoneNumbersType object) {
				return createTelephoneNumbersTypeAdapter();
			}
			@Override
			public Adapter caseTemperatureTimeSeriesType(TemperatureTimeSeriesType object) {
				return createTemperatureTimeSeriesTypeAdapter();
			}
			@Override
			public Adapter caseTextCharacterAppearanceType(TextCharacterAppearanceType object) {
				return createTextCharacterAppearanceTypeAdapter();
			}
			@Override
			public Adapter caseTextFontStyleType(TextFontStyleType object) {
				return createTextFontStyleTypeAdapter();
			}
			@Override
			public Adapter caseTextIndentType(TextIndentType object) {
				return createTextIndentTypeAdapter();
			}
			@Override
			public Adapter caseTextStyleType(TextStyleType object) {
				return createTextStyleTypeAdapter();
			}
			@Override
			public Adapter caseTextureCoordinatesType(TextureCoordinatesType object) {
				return createTextureCoordinatesTypeAdapter();
			}
			@Override
			public Adapter caseTextureMapsType(TextureMapsType object) {
				return createTextureMapsTypeAdapter();
			}
			@Override
			public Adapter caseTexturePointsType(TexturePointsType object) {
				return createTexturePointsTypeAdapter();
			}
			@Override
			public Adapter caseTexturesType(TexturesType object) {
				return createTexturesTypeAdapter();
			}
			@Override
			public Adapter caseTextureTransformType(TextureTransformType object) {
				return createTextureTransformTypeAdapter();
			}
			@Override
			public Adapter caseTextureVerticesType(TextureVerticesType object) {
				return createTextureVerticesTypeAdapter();
			}
			@Override
			public Adapter caseTheActorType(TheActorType object) {
				return createTheActorTypeAdapter();
			}
			@Override
			public Adapter caseTheOrganizationType(TheOrganizationType object) {
				return createTheOrganizationTypeAdapter();
			}
			@Override
			public Adapter caseThePersonType(ThePersonType object) {
				return createThePersonTypeAdapter();
			}
			@Override
			public Adapter caseThermalLoadTimeSeriesValuesType(ThermalLoadTimeSeriesValuesType object) {
				return createThermalLoadTimeSeriesValuesTypeAdapter();
			}
			@Override
			public Adapter caseTilesType(TilesType object) {
				return createTilesTypeAdapter();
			}
			@Override
			public Adapter caseTilingPatternType(TilingPatternType object) {
				return createTilingPatternTypeAdapter();
			}
			@Override
			public Adapter caseTimeComponentType(TimeComponentType object) {
				return createTimeComponentTypeAdapter();
			}
			@Override
			public Adapter caseTimeForTaskType(TimeForTaskType object) {
				return createTimeForTaskTypeAdapter();
			}
			@Override
			public Adapter caseTimeSeriesReferencesType(TimeSeriesReferencesType object) {
				return createTimeSeriesReferencesTypeAdapter();
			}
			@Override
			public Adapter caseTimeSeriesType(TimeSeriesType object) {
				return createTimeSeriesTypeAdapter();
			}
			@Override
			public Adapter caseTimeStampType(TimeStampType object) {
				return createTimeStampTypeAdapter();
			}
			@Override
			public Adapter caseTotalReplacementCostType(TotalReplacementCostType object) {
				return createTotalReplacementCostTypeAdapter();
			}
			@Override
			public Adapter caseTransmissionColourType(TransmissionColourType object) {
				return createTransmissionColourTypeAdapter();
			}
			@Override
			public Adapter caseTransmissionColourType1(TransmissionColourType1 object) {
				return createTransmissionColourType1Adapter();
			}
			@Override
			public Adapter caseTreeRootExpressionType(TreeRootExpressionType object) {
				return createTreeRootExpressionTypeAdapter();
			}
			@Override
			public Adapter caseTrim1Type(Trim1Type object) {
				return createTrim1TypeAdapter();
			}
			@Override
			public Adapter caseTrim2Type(Trim2Type object) {
				return createTrim2TypeAdapter();
			}
			@Override
			public Adapter caseTrueNorthType(TrueNorthType object) {
				return createTrueNorthTypeAdapter();
			}
			@Override
			public Adapter caseUAxesType(UAxesType object) {
				return createUAxesTypeAdapter();
			}
			@Override
			public Adapter caseUnitBasisType(UnitBasisType object) {
				return createUnitBasisTypeAdapter();
			}
			@Override
			public Adapter caseUnitComponentType(UnitComponentType object) {
				return createUnitComponentTypeAdapter();
			}
			@Override
			public Adapter caseUnitsInContextType(UnitsInContextType object) {
				return createUnitsInContextTypeAdapter();
			}
			@Override
			public Adapter caseUnitsType(UnitsType object) {
				return createUnitsTypeAdapter();
			}
			@Override
			public Adapter caseUnitType(UnitType object) {
				return createUnitTypeAdapter();
			}
			@Override
			public Adapter caseUnitType1(UnitType1 object) {
				return createUnitType1Adapter();
			}
			@Override
			public Adapter caseUnitType2(UnitType2 object) {
				return createUnitType2Adapter();
			}
			@Override
			public Adapter caseUnitType3(UnitType3 object) {
				return createUnitType3Adapter();
			}
			@Override
			public Adapter caseUnitType4(UnitType4 object) {
				return createUnitType4Adapter();
			}
			@Override
			public Adapter caseUnitType5(UnitType5 object) {
				return createUnitType5Adapter();
			}
			@Override
			public Adapter caseUnitType6(UnitType6 object) {
				return createUnitType6Adapter();
			}
			@Override
			public Adapter caseUos(Uos object) {
				return createUosAdapter();
			}
			@Override
			public Adapter caseUpdateDateType(UpdateDateType object) {
				return createUpdateDateTypeAdapter();
			}
			@Override
			public Adapter caseUpperBoundValueType(UpperBoundValueType object) {
				return createUpperBoundValueTypeAdapter();
			}
			@Override
			public Adapter caseUpperValueType(UpperValueType object) {
				return createUpperValueTypeAdapter();
			}
			@Override
			public Adapter caseUserType(UserType object) {
				return createUserTypeAdapter();
			}
			@Override
			public Adapter caseValidFromType(ValidFromType object) {
				return createValidFromTypeAdapter();
			}
			@Override
			public Adapter caseValidUntilType(ValidUntilType object) {
				return createValidUntilTypeAdapter();
			}
			@Override
			public Adapter caseValueComponentType(ValueComponentType object) {
				return createValueComponentTypeAdapter();
			}
			@Override
			public Adapter caseValuesType(ValuesType object) {
				return createValuesTypeAdapter();
			}
			@Override
			public Adapter caseValuesType1(ValuesType1 object) {
				return createValuesType1Adapter();
			}
			@Override
			public Adapter caseVaryingAppliedLoadLocationType(VaryingAppliedLoadLocationType object) {
				return createVaryingAppliedLoadLocationTypeAdapter();
			}
			@Override
			public Adapter caseVaryingAppliedLoadLocationType1(VaryingAppliedLoadLocationType1 object) {
				return createVaryingAppliedLoadLocationType1Adapter();
			}
			@Override
			public Adapter caseVaryingThicknessLocationType(VaryingThicknessLocationType object) {
				return createVaryingThicknessLocationTypeAdapter();
			}
			@Override
			public Adapter caseVAxesType(VAxesType object) {
				return createVAxesTypeAdapter();
			}
			@Override
			public Adapter caseVelocityTimeSeriesType(VelocityTimeSeriesType object) {
				return createVelocityTimeSeriesTypeAdapter();
			}
			@Override
			public Adapter caseVersionDateType(VersionDateType object) {
				return createVersionDateTypeAdapter();
			}
			@Override
			public Adapter caseVertexGeometryType(VertexGeometryType object) {
				return createVertexGeometryTypeAdapter();
			}
			@Override
			public Adapter caseVoidsType(VoidsType object) {
				return createVoidsTypeAdapter();
			}
			@Override
			public Adapter caseWAxesType(WAxesType object) {
				return createWAxesTypeAdapter();
			}
			@Override
			public Adapter caseWeightsDataType(WeightsDataType object) {
				return createWeightsDataTypeAdapter();
			}
			@Override
			public Adapter caseWetBulbTemperatureTimeSeriesType(WetBulbTemperatureTimeSeriesType object) {
				return createWetBulbTemperatureTimeSeriesTypeAdapter();
			}
			@Override
			public Adapter caseWordSpacingType(WordSpacingType object) {
				return createWordSpacingTypeAdapter();
			}
			@Override
			public Adapter caseWorldCoordinateSystemType(WorldCoordinateSystemType object) {
				return createWorldCoordinateSystemTypeAdapter();
			}
			@Override
			public Adapter caseZoneType(ZoneType object) {
				return createZoneTypeAdapter();
			}
			@Override
			public Adapter caseEntity(Entity object) {
				return createEntityAdapter();
			}
			@Override
			public Adapter caseCommon_Uos(org.iso.standard._10303.part._28.version._2.xmlschema.common.Uos object) {
				return createCommon_UosAdapter();
			}
			@Override
			public Adapter defaultCase(EObject object) {
				return createEObjectAdapter();
			}
		};

	/**
	 * Creates an adapter for the <code>target</code>.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @param target the object to adapt.
	 * @return the adapter for the <code>target</code>.
	 * @generated
	 */
	@Override
	public Adapter createAdapter(Notifier target) {
		return modelSwitch.doSwitch((EObject)target);
	}


	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.ActingRoleType <em>Acting Role Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.ActingRoleType
	 * @generated
	 */
	public Adapter createActingRoleTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.ActorType <em>Actor Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.ActorType
	 * @generated
	 */
	public Adapter createActorTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.ActualFinishType <em>Actual Finish Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.ActualFinishType
	 * @generated
	 */
	public Adapter createActualFinishTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.ActualStartType <em>Actual Start Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.ActualStartType
	 * @generated
	 */
	public Adapter createActualStartTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.AdditionalConditionsType <em>Additional Conditions Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.AdditionalConditionsType
	 * @generated
	 */
	public Adapter createAdditionalConditionsTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.AddressesType <em>Addresses Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.AddressesType
	 * @generated
	 */
	public Adapter createAddressesTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.AddressesType1 <em>Addresses Type1</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.AddressesType1
	 * @generated
	 */
	public Adapter createAddressesType1Adapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.AddressLinesType <em>Address Lines Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.AddressLinesType
	 * @generated
	 */
	public Adapter createAddressLinesTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.AnnotatedCurveType <em>Annotated Curve Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.AnnotatedCurveType
	 * @generated
	 */
	public Adapter createAnnotatedCurveTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.ApplicableDatesType <em>Applicable Dates Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.ApplicableDatesType
	 * @generated
	 */
	public Adapter createApplicableDatesTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.ApplicableDateType <em>Applicable Date Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.ApplicableDateType
	 * @generated
	 */
	public Adapter createApplicableDateTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.ApplicationDeveloperType <em>Application Developer Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.ApplicationDeveloperType
	 * @generated
	 */
	public Adapter createApplicationDeveloperTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.AppliedConditionType <em>Applied Condition Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.AppliedConditionType
	 * @generated
	 */
	public Adapter createAppliedConditionTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.AppliedConditionType1 <em>Applied Condition Type1</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.AppliedConditionType1
	 * @generated
	 */
	public Adapter createAppliedConditionType1Adapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.AppliedLoadType <em>Applied Load Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.AppliedLoadType
	 * @generated
	 */
	public Adapter createAppliedLoadTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.AppliedValueType <em>Applied Value Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.AppliedValueType
	 * @generated
	 */
	public Adapter createAppliedValueTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.ApprovalDateTimeType <em>Approval Date Time Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.ApprovalDateTimeType
	 * @generated
	 */
	public Adapter createApprovalDateTimeTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.ApprovalType <em>Approval Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.ApprovalType
	 * @generated
	 */
	public Adapter createApprovalTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.ApprovalType1 <em>Approval Type1</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.ApprovalType1
	 * @generated
	 */
	public Adapter createApprovalType1Adapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.ApprovedPropertiesType <em>Approved Properties Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.ApprovedPropertiesType
	 * @generated
	 */
	public Adapter createApprovedPropertiesTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.AssignedItemsType <em>Assigned Items Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.AssignedItemsType
	 * @generated
	 */
	public Adapter createAssignedItemsTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.Axis1Type <em>Axis1 Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.Axis1Type
	 * @generated
	 */
	public Adapter createAxis1TypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.Axis2Type <em>Axis2 Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.Axis2Type
	 * @generated
	 */
	public Adapter createAxis2TypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.Axis3Type <em>Axis3 Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.Axis3Type
	 * @generated
	 */
	public Adapter createAxis3TypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.AxisCurveType <em>Axis Curve Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.AxisCurveType
	 * @generated
	 */
	public Adapter createAxisCurveTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.AxisPositionType <em>Axis Position Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.AxisPositionType
	 * @generated
	 */
	public Adapter createAxisPositionTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.AxisType <em>Axis Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.AxisType
	 * @generated
	 */
	public Adapter createAxisTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.AxisType1 <em>Axis Type1</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.AxisType1
	 * @generated
	 */
	public Adapter createAxisType1Adapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.AxisType2 <em>Axis Type2</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.AxisType2
	 * @generated
	 */
	public Adapter createAxisType2Adapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.BackgroundColourType <em>Background Colour Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.BackgroundColourType
	 * @generated
	 */
	public Adapter createBackgroundColourTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.BaseQuantityType <em>Base Quantity Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.BaseQuantityType
	 * @generated
	 */
	public Adapter createBaseQuantityTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.BaseSurfaceType <em>Base Surface Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.BaseSurfaceType
	 * @generated
	 */
	public Adapter createBaseSurfaceTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.BasisCurveType <em>Basis Curve Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.BasisCurveType
	 * @generated
	 */
	public Adapter createBasisCurveTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.BasisCurveType1 <em>Basis Curve Type1</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.BasisCurveType1
	 * @generated
	 */
	public Adapter createBasisCurveType1Adapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.BasisCurveType2 <em>Basis Curve Type2</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.BasisCurveType2
	 * @generated
	 */
	public Adapter createBasisCurveType2Adapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.BasisCurveType3 <em>Basis Curve Type3</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.BasisCurveType3
	 * @generated
	 */
	public Adapter createBasisCurveType3Adapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.BasisSurfaceType <em>Basis Surface Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.BasisSurfaceType
	 * @generated
	 */
	public Adapter createBasisSurfaceTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.BasisSurfaceType1 <em>Basis Surface Type1</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.BasisSurfaceType1
	 * @generated
	 */
	public Adapter createBasisSurfaceType1Adapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.BasisSurfaceType2 <em>Basis Surface Type2</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.BasisSurfaceType2
	 * @generated
	 */
	public Adapter createBasisSurfaceType2Adapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.BenchmarkValuesType <em>Benchmark Values Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.BenchmarkValuesType
	 * @generated
	 */
	public Adapter createBenchmarkValuesTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.BoundsType <em>Bounds Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.BoundsType
	 * @generated
	 */
	public Adapter createBoundsTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.BoundType <em>Bound Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.BoundType
	 * @generated
	 */
	public Adapter createBoundTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.BuildingAddressType <em>Building Address Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.BuildingAddressType
	 * @generated
	 */
	public Adapter createBuildingAddressTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.CausedByType <em>Caused By Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.CausedByType
	 * @generated
	 */
	public Adapter createCausedByTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.CfsFacesType <em>Cfs Faces Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.CfsFacesType
	 * @generated
	 */
	public Adapter createCfsFacesTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.CharacterSpacingType <em>Character Spacing Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.CharacterSpacingType
	 * @generated
	 */
	public Adapter createCharacterSpacingTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.ClassifiedConstraintType <em>Classified Constraint Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.ClassifiedConstraintType
	 * @generated
	 */
	public Adapter createClassifiedConstraintTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.ClassifiedMaterialType <em>Classified Material Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.ClassifiedMaterialType
	 * @generated
	 */
	public Adapter createClassifiedMaterialTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.ColourAppearanceType <em>Colour Appearance Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.ColourAppearanceType
	 * @generated
	 */
	public Adapter createColourAppearanceTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.ColourType <em>Colour Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.ColourType
	 * @generated
	 */
	public Adapter createColourTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.ComponentOfTotalType <em>Component Of Total Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.ComponentOfTotalType
	 * @generated
	 */
	public Adapter createComponentOfTotalTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.ComponentsType <em>Components Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.ComponentsType
	 * @generated
	 */
	public Adapter createComponentsTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.ConditionCoordinateSystemType <em>Condition Coordinate System Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.ConditionCoordinateSystemType
	 * @generated
	 */
	public Adapter createConditionCoordinateSystemTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.ConnectionConstraintType <em>Connection Constraint Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.ConnectionConstraintType
	 * @generated
	 */
	public Adapter createConnectionConstraintTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.ConnectionGeometryType <em>Connection Geometry Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.ConnectionGeometryType
	 * @generated
	 */
	public Adapter createConnectionGeometryTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.ConnectionGeometryType1 <em>Connection Geometry Type1</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.ConnectionGeometryType1
	 * @generated
	 */
	public Adapter createConnectionGeometryType1Adapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.ContentsType <em>Contents Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.ContentsType
	 * @generated
	 */
	public Adapter createContentsTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.ContextOfItemsType <em>Context Of Items Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.ContextOfItemsType
	 * @generated
	 */
	public Adapter createContextOfItemsTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.ControlPointsListType <em>Control Points List Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.ControlPointsListType
	 * @generated
	 */
	public Adapter createControlPointsListTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.ConversionFactorType <em>Conversion Factor Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.ConversionFactorType
	 * @generated
	 */
	public Adapter createConversionFactorTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.CoordinatesType <em>Coordinates Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.CoordinatesType
	 * @generated
	 */
	public Adapter createCoordinatesTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.CoordinatesType1 <em>Coordinates Type1</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.CoordinatesType1
	 * @generated
	 */
	public Adapter createCoordinatesType1Adapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.CornerType <em>Corner Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.CornerType
	 * @generated
	 */
	public Adapter createCornerTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.CreatingActorType <em>Creating Actor Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.CreatingActorType
	 * @generated
	 */
	public Adapter createCreatingActorTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.CreationDateType <em>Creation Date Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.CreationDateType
	 * @generated
	 */
	public Adapter createCreationDateTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.CreationTimeType <em>Creation Time Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.CreationTimeType
	 * @generated
	 */
	public Adapter createCreationTimeTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.CreationTimeType1 <em>Creation Time Type1</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.CreationTimeType1
	 * @generated
	 */
	public Adapter createCreationTimeType1Adapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.CreatorsType <em>Creators Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.CreatorsType
	 * @generated
	 */
	public Adapter createCreatorsTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.CriterionDateTimeType <em>Criterion Date Time Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.CriterionDateTimeType
	 * @generated
	 */
	public Adapter createCriterionDateTimeTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.CriterionType <em>Criterion Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.CriterionType
	 * @generated
	 */
	public Adapter createCriterionTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.CrossSectionPositionsType <em>Cross Section Positions Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.CrossSectionPositionsType
	 * @generated
	 */
	public Adapter createCrossSectionPositionsTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.CrossSectionReinforcementDefinitionsType <em>Cross Section Reinforcement Definitions Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.CrossSectionReinforcementDefinitionsType
	 * @generated
	 */
	public Adapter createCrossSectionReinforcementDefinitionsTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.CrossSectionsType <em>Cross Sections Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.CrossSectionsType
	 * @generated
	 */
	public Adapter createCrossSectionsTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.CurrentValueType <em>Current Value Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.CurrentValueType
	 * @generated
	 */
	public Adapter createCurrentValueTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.CurrentValueType1 <em>Current Value Type1</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.CurrentValueType1
	 * @generated
	 */
	public Adapter createCurrentValueType1Adapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.CurveColourType <em>Curve Colour Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.CurveColourType
	 * @generated
	 */
	public Adapter createCurveColourTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.CurveFontType <em>Curve Font Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.CurveFontType
	 * @generated
	 */
	public Adapter createCurveFontTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.CurveFontType1 <em>Curve Font Type1</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.CurveFontType1
	 * @generated
	 */
	public Adapter createCurveFontType1Adapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.CurveOnRelatedElementType <em>Curve On Related Element Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.CurveOnRelatedElementType
	 * @generated
	 */
	public Adapter createCurveOnRelatedElementTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.CurveOnRelatingElementType <em>Curve On Relating Element Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.CurveOnRelatingElementType
	 * @generated
	 */
	public Adapter createCurveOnRelatingElementTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.CurveType <em>Curve Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.CurveType
	 * @generated
	 */
	public Adapter createCurveTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.CurveWidthType <em>Curve Width Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.CurveWidthType
	 * @generated
	 */
	public Adapter createCurveWidthTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.DataValueType <em>Data Value Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.DataValueType
	 * @generated
	 */
	public Adapter createDataValueTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.DateComponentType <em>Date Component Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.DateComponentType
	 * @generated
	 */
	public Adapter createDateComponentTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.DefinedUnitType <em>Defined Unit Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.DefinedUnitType
	 * @generated
	 */
	public Adapter createDefinedUnitTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.DefinedValuesType <em>Defined Values Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.DefinedValuesType
	 * @generated
	 */
	public Adapter createDefinedValuesTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.DefiningUnitType <em>Defining Unit Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.DefiningUnitType
	 * @generated
	 */
	public Adapter createDefiningUnitTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.DefiningValuesType <em>Defining Values Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.DefiningValuesType
	 * @generated
	 */
	public Adapter createDefiningValuesTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.DefinitionType <em>Definition Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.DefinitionType
	 * @generated
	 */
	public Adapter createDefinitionTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.DependantPropertyType <em>Dependant Property Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.DependantPropertyType
	 * @generated
	 */
	public Adapter createDependantPropertyTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.DependingPropertyType <em>Depending Property Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.DependingPropertyType
	 * @generated
	 */
	public Adapter createDependingPropertyTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.DepreciatedValueType <em>Depreciated Value Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.DepreciatedValueType
	 * @generated
	 */
	public Adapter createDepreciatedValueTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.DiffuseColourType <em>Diffuse Colour Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.DiffuseColourType
	 * @generated
	 */
	public Adapter createDiffuseColourTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.DiffuseReflectionColourType <em>Diffuse Reflection Colour Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.DiffuseReflectionColourType
	 * @generated
	 */
	public Adapter createDiffuseReflectionColourTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.DiffuseTransmissionColourType <em>Diffuse Transmission Colour Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.DiffuseTransmissionColourType
	 * @generated
	 */
	public Adapter createDiffuseTransmissionColourTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.DiffuseTransmissionColourType1 <em>Diffuse Transmission Colour Type1</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.DiffuseTransmissionColourType1
	 * @generated
	 */
	public Adapter createDiffuseTransmissionColourType1Adapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.DimensionsType <em>Dimensions Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.DimensionsType
	 * @generated
	 */
	public Adapter createDimensionsTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.DirectionRatiosType <em>Direction Ratios Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.DirectionRatiosType
	 * @generated
	 */
	public Adapter createDirectionRatiosTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.DirectrixType <em>Directrix Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.DirectrixType
	 * @generated
	 */
	public Adapter createDirectrixTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.DirectrixType1 <em>Directrix Type1</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.DirectrixType1
	 * @generated
	 */
	public Adapter createDirectrixType1Adapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.DirType <em>Dir Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.DirType
	 * @generated
	 */
	public Adapter createDirTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.DistributionDataType <em>Distribution Data Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.DistributionDataType
	 * @generated
	 */
	public Adapter createDistributionDataTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.DocumentOwnerType <em>Document Owner Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.DocumentOwnerType
	 * @generated
	 */
	public Adapter createDocumentOwnerTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.DocumentReferencesType <em>Document References Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.DocumentReferencesType
	 * @generated
	 */
	public Adapter createDocumentReferencesTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.DocumentRoot <em>Document Root</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.DocumentRoot
	 * @generated
	 */
	public Adapter createDocumentRootAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.EarlyFinishType <em>Early Finish Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.EarlyFinishType
	 * @generated
	 */
	public Adapter createEarlyFinishTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.EarlyStartType <em>Early Start Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.EarlyStartType
	 * @generated
	 */
	public Adapter createEarlyStartTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.EdgeElementType <em>Edge Element Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.EdgeElementType
	 * @generated
	 */
	public Adapter createEdgeElementTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.EdgeEndType <em>Edge End Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.EdgeEndType
	 * @generated
	 */
	public Adapter createEdgeEndTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.EdgeGeometryType <em>Edge Geometry Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.EdgeGeometryType
	 * @generated
	 */
	public Adapter createEdgeGeometryTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.EdgeListType <em>Edge List Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.EdgeListType
	 * @generated
	 */
	public Adapter createEdgeListTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.EdgeListType1 <em>Edge List Type1</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.EdgeListType1
	 * @generated
	 */
	public Adapter createEdgeListType1Adapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.EdgeStartType <em>Edge Start Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.EdgeStartType
	 * @generated
	 */
	public Adapter createEdgeStartTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.EditionDateType <em>Edition Date Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.EditionDateType
	 * @generated
	 */
	public Adapter createEditionDateTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.EditorsType <em>Editors Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.EditorsType
	 * @generated
	 */
	public Adapter createEditorsTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.ElectronicFormatType <em>Electronic Format Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.ElectronicFormatType
	 * @generated
	 */
	public Adapter createElectronicFormatTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.ElectronicMailAddressesType <em>Electronic Mail Addresses Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.ElectronicMailAddressesType
	 * @generated
	 */
	public Adapter createElectronicMailAddressesTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.ElementsType <em>Elements Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.ElementsType
	 * @generated
	 */
	public Adapter createElementsTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.ElementsType1 <em>Elements Type1</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.ElementsType1
	 * @generated
	 */
	public Adapter createElementsType1Adapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.EnclosureType <em>Enclosure Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.EnclosureType
	 * @generated
	 */
	public Adapter createEnclosureTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.EndProfileType <em>End Profile Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.EndProfileType
	 * @generated
	 */
	public Adapter createEndProfileTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.EndTimeType <em>End Time Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.EndTimeType
	 * @generated
	 */
	public Adapter createEndTimeTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.EnumerationReferenceType <em>Enumeration Reference Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.EnumerationReferenceType
	 * @generated
	 */
	public Adapter createEnumerationReferenceTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.EnumerationValuesType <em>Enumeration Values Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.EnumerationValuesType
	 * @generated
	 */
	public Adapter createEnumerationValuesTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.EnumerationValuesType1 <em>Enumeration Values Type1</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.EnumerationValuesType1
	 * @generated
	 */
	public Adapter createEnumerationValuesType1Adapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.ExtendedPropertiesType <em>Extended Properties Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.ExtendedPropertiesType
	 * @generated
	 */
	public Adapter createExtendedPropertiesTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.ExtentType <em>Extent Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.ExtentType
	 * @generated
	 */
	public Adapter createExtentTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.ExtrudedDirectionType <em>Extruded Direction Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.ExtrudedDirectionType
	 * @generated
	 */
	public Adapter createExtrudedDirectionTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.ExtrudedDirectionType1 <em>Extruded Direction Type1</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.ExtrudedDirectionType1
	 * @generated
	 */
	public Adapter createExtrudedDirectionType1Adapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.FaceSurfaceType <em>Face Surface Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.FaceSurfaceType
	 * @generated
	 */
	public Adapter createFaceSurfaceTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.FacsimileNumbersType <em>Facsimile Numbers Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.FacsimileNumbersType
	 * @generated
	 */
	public Adapter createFacsimileNumbersTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.FbsmFacesType <em>Fbsm Faces Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.FbsmFacesType
	 * @generated
	 */
	public Adapter createFbsmFacesTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.FillStylesType <em>Fill Styles Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.FillStylesType
	 * @generated
	 */
	public Adapter createFillStylesTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.FillStyleTargetType <em>Fill Style Target Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.FillStyleTargetType
	 * @generated
	 */
	public Adapter createFillStyleTargetTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.FinishTimeType <em>Finish Time Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.FinishTimeType
	 * @generated
	 */
	public Adapter createFinishTimeTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.FirstOperandType <em>First Operand Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.FirstOperandType
	 * @generated
	 */
	public Adapter createFirstOperandTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.FixedUntilDateType <em>Fixed Until Date Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.FixedUntilDateType
	 * @generated
	 */
	public Adapter createFixedUntilDateTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.FlowConditionTimeSeriesType <em>Flow Condition Time Series Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.FlowConditionTimeSeriesType
	 * @generated
	 */
	public Adapter createFlowConditionTimeSeriesTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.FlowrateSingleValueType <em>Flowrate Single Value Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.FlowrateSingleValueType
	 * @generated
	 */
	public Adapter createFlowrateSingleValueTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.FlowrateTimeSeriesType <em>Flowrate Time Series Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.FlowrateTimeSeriesType
	 * @generated
	 */
	public Adapter createFlowrateTimeSeriesTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.FluidType <em>Fluid Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.FluidType
	 * @generated
	 */
	public Adapter createFluidTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.FontFamilyType <em>Font Family Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.FontFamilyType
	 * @generated
	 */
	public Adapter createFontFamilyTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.FontSizeType <em>Font Size Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.FontSizeType
	 * @generated
	 */
	public Adapter createFontSizeTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.ForLayerSetType <em>For Layer Set Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.ForLayerSetType
	 * @generated
	 */
	public Adapter createForLayerSetTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.HasPropertiesType <em>Has Properties Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.HasPropertiesType
	 * @generated
	 */
	public Adapter createHasPropertiesTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.HasPropertiesType1 <em>Has Properties Type1</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.HasPropertiesType1
	 * @generated
	 */
	public Adapter createHasPropertiesType1Adapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.HasPropertySetsType <em>Has Property Sets Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.HasPropertySetsType
	 * @generated
	 */
	public Adapter createHasPropertySetsTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.HasQuantitiesType <em>Has Quantities Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.HasQuantitiesType
	 * @generated
	 */
	public Adapter createHasQuantitiesTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.HasResultsType <em>Has Results Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.HasResultsType
	 * @generated
	 */
	public Adapter createHasResultsTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.HatchLineAppearanceType <em>Hatch Line Appearance Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.HatchLineAppearanceType
	 * @generated
	 */
	public Adapter createHatchLineAppearanceTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.Ifc2DCompositeCurve <em>Ifc2 DComposite Curve</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.Ifc2DCompositeCurve
	 * @generated
	 */
	public Adapter createIfc2DCompositeCurveAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcAbsorbedDoseMeasureType <em>Ifc Absorbed Dose Measure Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcAbsorbedDoseMeasureType
	 * @generated
	 */
	public Adapter createIfcAbsorbedDoseMeasureTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcAccelerationMeasureType <em>Ifc Acceleration Measure Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcAccelerationMeasureType
	 * @generated
	 */
	public Adapter createIfcAccelerationMeasureTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcActionRequest <em>Ifc Action Request</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcActionRequest
	 * @generated
	 */
	public Adapter createIfcActionRequestAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcActionSourceTypeEnumType <em>Ifc Action Source Type Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcActionSourceTypeEnumType
	 * @generated
	 */
	public Adapter createIfcActionSourceTypeEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcActionTypeEnumType <em>Ifc Action Type Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcActionTypeEnumType
	 * @generated
	 */
	public Adapter createIfcActionTypeEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcActor <em>Ifc Actor</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcActor
	 * @generated
	 */
	public Adapter createIfcActorAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcActorRole <em>Ifc Actor Role</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcActorRole
	 * @generated
	 */
	public Adapter createIfcActorRoleAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcActorSelect <em>Ifc Actor Select</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcActorSelect
	 * @generated
	 */
	public Adapter createIfcActorSelectAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcActuatorType <em>Ifc Actuator Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcActuatorType
	 * @generated
	 */
	public Adapter createIfcActuatorTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcActuatorTypeEnumType <em>Ifc Actuator Type Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcActuatorTypeEnumType
	 * @generated
	 */
	public Adapter createIfcActuatorTypeEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcAddress <em>Ifc Address</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcAddress
	 * @generated
	 */
	public Adapter createIfcAddressAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcAddressTypeEnumType <em>Ifc Address Type Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcAddressTypeEnumType
	 * @generated
	 */
	public Adapter createIfcAddressTypeEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcAheadOrBehindType <em>Ifc Ahead Or Behind Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcAheadOrBehindType
	 * @generated
	 */
	public Adapter createIfcAheadOrBehindTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcAirTerminalBoxType <em>Ifc Air Terminal Box Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcAirTerminalBoxType
	 * @generated
	 */
	public Adapter createIfcAirTerminalBoxTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcAirTerminalBoxTypeEnumType <em>Ifc Air Terminal Box Type Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcAirTerminalBoxTypeEnumType
	 * @generated
	 */
	public Adapter createIfcAirTerminalBoxTypeEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcAirTerminalType <em>Ifc Air Terminal Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcAirTerminalType
	 * @generated
	 */
	public Adapter createIfcAirTerminalTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcAirTerminalTypeEnumType <em>Ifc Air Terminal Type Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcAirTerminalTypeEnumType
	 * @generated
	 */
	public Adapter createIfcAirTerminalTypeEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcAirToAirHeatRecoveryType <em>Ifc Air To Air Heat Recovery Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcAirToAirHeatRecoveryType
	 * @generated
	 */
	public Adapter createIfcAirToAirHeatRecoveryTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcAirToAirHeatRecoveryTypeEnumType <em>Ifc Air To Air Heat Recovery Type Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcAirToAirHeatRecoveryTypeEnumType
	 * @generated
	 */
	public Adapter createIfcAirToAirHeatRecoveryTypeEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcAlarmType <em>Ifc Alarm Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcAlarmType
	 * @generated
	 */
	public Adapter createIfcAlarmTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcAlarmTypeEnumType <em>Ifc Alarm Type Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcAlarmTypeEnumType
	 * @generated
	 */
	public Adapter createIfcAlarmTypeEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcAmountOfSubstanceMeasureType <em>Ifc Amount Of Substance Measure Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcAmountOfSubstanceMeasureType
	 * @generated
	 */
	public Adapter createIfcAmountOfSubstanceMeasureTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcAnalysisModelTypeEnumType <em>Ifc Analysis Model Type Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcAnalysisModelTypeEnumType
	 * @generated
	 */
	public Adapter createIfcAnalysisModelTypeEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcAnalysisTheoryTypeEnumType <em>Ifc Analysis Theory Type Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcAnalysisTheoryTypeEnumType
	 * @generated
	 */
	public Adapter createIfcAnalysisTheoryTypeEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcAngularDimension <em>Ifc Angular Dimension</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcAngularDimension
	 * @generated
	 */
	public Adapter createIfcAngularDimensionAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcAngularVelocityMeasureType <em>Ifc Angular Velocity Measure Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcAngularVelocityMeasureType
	 * @generated
	 */
	public Adapter createIfcAngularVelocityMeasureTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcAnnotation <em>Ifc Annotation</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcAnnotation
	 * @generated
	 */
	public Adapter createIfcAnnotationAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcAnnotationCurveOccurrence <em>Ifc Annotation Curve Occurrence</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcAnnotationCurveOccurrence
	 * @generated
	 */
	public Adapter createIfcAnnotationCurveOccurrenceAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcAnnotationFillArea <em>Ifc Annotation Fill Area</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcAnnotationFillArea
	 * @generated
	 */
	public Adapter createIfcAnnotationFillAreaAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcAnnotationFillAreaOccurrence <em>Ifc Annotation Fill Area Occurrence</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcAnnotationFillAreaOccurrence
	 * @generated
	 */
	public Adapter createIfcAnnotationFillAreaOccurrenceAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcAnnotationOccurrence <em>Ifc Annotation Occurrence</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcAnnotationOccurrence
	 * @generated
	 */
	public Adapter createIfcAnnotationOccurrenceAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcAnnotationSurface <em>Ifc Annotation Surface</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcAnnotationSurface
	 * @generated
	 */
	public Adapter createIfcAnnotationSurfaceAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcAnnotationSurfaceOccurrence <em>Ifc Annotation Surface Occurrence</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcAnnotationSurfaceOccurrence
	 * @generated
	 */
	public Adapter createIfcAnnotationSurfaceOccurrenceAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcAnnotationSymbolOccurrence <em>Ifc Annotation Symbol Occurrence</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcAnnotationSymbolOccurrence
	 * @generated
	 */
	public Adapter createIfcAnnotationSymbolOccurrenceAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcAnnotationTextOccurrence <em>Ifc Annotation Text Occurrence</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcAnnotationTextOccurrence
	 * @generated
	 */
	public Adapter createIfcAnnotationTextOccurrenceAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcApplication <em>Ifc Application</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcApplication
	 * @generated
	 */
	public Adapter createIfcApplicationAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcAppliedValue <em>Ifc Applied Value</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcAppliedValue
	 * @generated
	 */
	public Adapter createIfcAppliedValueAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcAppliedValueRelationship <em>Ifc Applied Value Relationship</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcAppliedValueRelationship
	 * @generated
	 */
	public Adapter createIfcAppliedValueRelationshipAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcAppliedValueSelect <em>Ifc Applied Value Select</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcAppliedValueSelect
	 * @generated
	 */
	public Adapter createIfcAppliedValueSelectAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcApproval <em>Ifc Approval</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcApproval
	 * @generated
	 */
	public Adapter createIfcApprovalAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcApprovalActorRelationship <em>Ifc Approval Actor Relationship</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcApprovalActorRelationship
	 * @generated
	 */
	public Adapter createIfcApprovalActorRelationshipAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcApprovalPropertyRelationship <em>Ifc Approval Property Relationship</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcApprovalPropertyRelationship
	 * @generated
	 */
	public Adapter createIfcApprovalPropertyRelationshipAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcApprovalRelationship <em>Ifc Approval Relationship</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcApprovalRelationship
	 * @generated
	 */
	public Adapter createIfcApprovalRelationshipAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcArbitraryClosedProfileDef <em>Ifc Arbitrary Closed Profile Def</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcArbitraryClosedProfileDef
	 * @generated
	 */
	public Adapter createIfcArbitraryClosedProfileDefAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcArbitraryOpenProfileDef <em>Ifc Arbitrary Open Profile Def</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcArbitraryOpenProfileDef
	 * @generated
	 */
	public Adapter createIfcArbitraryOpenProfileDefAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcArbitraryProfileDefWithVoids <em>Ifc Arbitrary Profile Def With Voids</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcArbitraryProfileDefWithVoids
	 * @generated
	 */
	public Adapter createIfcArbitraryProfileDefWithVoidsAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcAreaMeasureType <em>Ifc Area Measure Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcAreaMeasureType
	 * @generated
	 */
	public Adapter createIfcAreaMeasureTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcArithmeticOperatorEnumType <em>Ifc Arithmetic Operator Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcArithmeticOperatorEnumType
	 * @generated
	 */
	public Adapter createIfcArithmeticOperatorEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcAssemblyPlaceEnumType <em>Ifc Assembly Place Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcAssemblyPlaceEnumType
	 * @generated
	 */
	public Adapter createIfcAssemblyPlaceEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcAsset <em>Ifc Asset</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcAsset
	 * @generated
	 */
	public Adapter createIfcAssetAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcAsymmetricIShapeProfileDef <em>Ifc Asymmetric IShape Profile Def</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcAsymmetricIShapeProfileDef
	 * @generated
	 */
	public Adapter createIfcAsymmetricIShapeProfileDefAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcAxis1Placement <em>Ifc Axis1 Placement</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcAxis1Placement
	 * @generated
	 */
	public Adapter createIfcAxis1PlacementAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcAxis2Placement <em>Ifc Axis2 Placement</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcAxis2Placement
	 * @generated
	 */
	public Adapter createIfcAxis2PlacementAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcAxis2Placement2D <em>Ifc Axis2 Placement2 D</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcAxis2Placement2D
	 * @generated
	 */
	public Adapter createIfcAxis2Placement2DAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcAxis2Placement3D <em>Ifc Axis2 Placement3 D</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcAxis2Placement3D
	 * @generated
	 */
	public Adapter createIfcAxis2Placement3DAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcBeam <em>Ifc Beam</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcBeam
	 * @generated
	 */
	public Adapter createIfcBeamAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcBeamType <em>Ifc Beam Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcBeamType
	 * @generated
	 */
	public Adapter createIfcBeamTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcBeamTypeEnumType <em>Ifc Beam Type Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcBeamTypeEnumType
	 * @generated
	 */
	public Adapter createIfcBeamTypeEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcBenchmarkEnumType <em>Ifc Benchmark Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcBenchmarkEnumType
	 * @generated
	 */
	public Adapter createIfcBenchmarkEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcBezierCurve <em>Ifc Bezier Curve</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcBezierCurve
	 * @generated
	 */
	public Adapter createIfcBezierCurveAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcBlobTexture <em>Ifc Blob Texture</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcBlobTexture
	 * @generated
	 */
	public Adapter createIfcBlobTextureAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcBlock <em>Ifc Block</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcBlock
	 * @generated
	 */
	public Adapter createIfcBlockAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcBoilerType <em>Ifc Boiler Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcBoilerType
	 * @generated
	 */
	public Adapter createIfcBoilerTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcBoilerTypeEnumType <em>Ifc Boiler Type Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcBoilerTypeEnumType
	 * @generated
	 */
	public Adapter createIfcBoilerTypeEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcBooleanClippingResult <em>Ifc Boolean Clipping Result</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcBooleanClippingResult
	 * @generated
	 */
	public Adapter createIfcBooleanClippingResultAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcBooleanOperand <em>Ifc Boolean Operand</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcBooleanOperand
	 * @generated
	 */
	public Adapter createIfcBooleanOperandAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcBooleanOperatorType <em>Ifc Boolean Operator Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcBooleanOperatorType
	 * @generated
	 */
	public Adapter createIfcBooleanOperatorTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcBooleanResult <em>Ifc Boolean Result</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcBooleanResult
	 * @generated
	 */
	public Adapter createIfcBooleanResultAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcBooleanType <em>Ifc Boolean Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcBooleanType
	 * @generated
	 */
	public Adapter createIfcBooleanTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcBoundaryCondition <em>Ifc Boundary Condition</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcBoundaryCondition
	 * @generated
	 */
	public Adapter createIfcBoundaryConditionAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcBoundaryEdgeCondition <em>Ifc Boundary Edge Condition</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcBoundaryEdgeCondition
	 * @generated
	 */
	public Adapter createIfcBoundaryEdgeConditionAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcBoundaryFaceCondition <em>Ifc Boundary Face Condition</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcBoundaryFaceCondition
	 * @generated
	 */
	public Adapter createIfcBoundaryFaceConditionAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcBoundaryNodeCondition <em>Ifc Boundary Node Condition</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcBoundaryNodeCondition
	 * @generated
	 */
	public Adapter createIfcBoundaryNodeConditionAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcBoundaryNodeConditionWarping <em>Ifc Boundary Node Condition Warping</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcBoundaryNodeConditionWarping
	 * @generated
	 */
	public Adapter createIfcBoundaryNodeConditionWarpingAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcBoundedCurve <em>Ifc Bounded Curve</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcBoundedCurve
	 * @generated
	 */
	public Adapter createIfcBoundedCurveAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcBoundedSurface <em>Ifc Bounded Surface</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcBoundedSurface
	 * @generated
	 */
	public Adapter createIfcBoundedSurfaceAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcBoundingBox <em>Ifc Bounding Box</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcBoundingBox
	 * @generated
	 */
	public Adapter createIfcBoundingBoxAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcBoxAlignmentType <em>Ifc Box Alignment Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcBoxAlignmentType
	 * @generated
	 */
	public Adapter createIfcBoxAlignmentTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcBoxedHalfSpace <em>Ifc Boxed Half Space</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcBoxedHalfSpace
	 * @generated
	 */
	public Adapter createIfcBoxedHalfSpaceAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcBSplineCurve <em>Ifc BSpline Curve</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcBSplineCurve
	 * @generated
	 */
	public Adapter createIfcBSplineCurveAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcBSplineCurveFormType <em>Ifc BSpline Curve Form Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcBSplineCurveFormType
	 * @generated
	 */
	public Adapter createIfcBSplineCurveFormTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcBuilding <em>Ifc Building</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcBuilding
	 * @generated
	 */
	public Adapter createIfcBuildingAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcBuildingElement <em>Ifc Building Element</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcBuildingElement
	 * @generated
	 */
	public Adapter createIfcBuildingElementAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcBuildingElementComponent <em>Ifc Building Element Component</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcBuildingElementComponent
	 * @generated
	 */
	public Adapter createIfcBuildingElementComponentAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcBuildingElementPart <em>Ifc Building Element Part</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcBuildingElementPart
	 * @generated
	 */
	public Adapter createIfcBuildingElementPartAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcBuildingElementProxy <em>Ifc Building Element Proxy</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcBuildingElementProxy
	 * @generated
	 */
	public Adapter createIfcBuildingElementProxyAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcBuildingElementProxyType <em>Ifc Building Element Proxy Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcBuildingElementProxyType
	 * @generated
	 */
	public Adapter createIfcBuildingElementProxyTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcBuildingElementProxyTypeEnumType <em>Ifc Building Element Proxy Type Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcBuildingElementProxyTypeEnumType
	 * @generated
	 */
	public Adapter createIfcBuildingElementProxyTypeEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcBuildingElementType <em>Ifc Building Element Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcBuildingElementType
	 * @generated
	 */
	public Adapter createIfcBuildingElementTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcBuildingStorey <em>Ifc Building Storey</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcBuildingStorey
	 * @generated
	 */
	public Adapter createIfcBuildingStoreyAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCableCarrierFittingType <em>Ifc Cable Carrier Fitting Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCableCarrierFittingType
	 * @generated
	 */
	public Adapter createIfcCableCarrierFittingTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCableCarrierFittingTypeEnumType <em>Ifc Cable Carrier Fitting Type Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCableCarrierFittingTypeEnumType
	 * @generated
	 */
	public Adapter createIfcCableCarrierFittingTypeEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCableCarrierSegmentType <em>Ifc Cable Carrier Segment Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCableCarrierSegmentType
	 * @generated
	 */
	public Adapter createIfcCableCarrierSegmentTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCableCarrierSegmentTypeEnumType <em>Ifc Cable Carrier Segment Type Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCableCarrierSegmentTypeEnumType
	 * @generated
	 */
	public Adapter createIfcCableCarrierSegmentTypeEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCableSegmentType <em>Ifc Cable Segment Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCableSegmentType
	 * @generated
	 */
	public Adapter createIfcCableSegmentTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCableSegmentTypeEnumType <em>Ifc Cable Segment Type Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCableSegmentTypeEnumType
	 * @generated
	 */
	public Adapter createIfcCableSegmentTypeEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCalendarDate <em>Ifc Calendar Date</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCalendarDate
	 * @generated
	 */
	public Adapter createIfcCalendarDateAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCartesianPoint <em>Ifc Cartesian Point</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCartesianPoint
	 * @generated
	 */
	public Adapter createIfcCartesianPointAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCartesianTransformationOperator <em>Ifc Cartesian Transformation Operator</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCartesianTransformationOperator
	 * @generated
	 */
	public Adapter createIfcCartesianTransformationOperatorAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCartesianTransformationOperator2D <em>Ifc Cartesian Transformation Operator2 D</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCartesianTransformationOperator2D
	 * @generated
	 */
	public Adapter createIfcCartesianTransformationOperator2DAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCartesianTransformationOperator2DnonUniform <em>Ifc Cartesian Transformation Operator2 Dnon Uniform</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCartesianTransformationOperator2DnonUniform
	 * @generated
	 */
	public Adapter createIfcCartesianTransformationOperator2DnonUniformAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCartesianTransformationOperator3D <em>Ifc Cartesian Transformation Operator3 D</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCartesianTransformationOperator3D
	 * @generated
	 */
	public Adapter createIfcCartesianTransformationOperator3DAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCartesianTransformationOperator3DnonUniform <em>Ifc Cartesian Transformation Operator3 Dnon Uniform</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCartesianTransformationOperator3DnonUniform
	 * @generated
	 */
	public Adapter createIfcCartesianTransformationOperator3DnonUniformAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCenterLineProfileDef <em>Ifc Center Line Profile Def</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCenterLineProfileDef
	 * @generated
	 */
	public Adapter createIfcCenterLineProfileDefAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcChamferEdgeFeature <em>Ifc Chamfer Edge Feature</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcChamferEdgeFeature
	 * @generated
	 */
	public Adapter createIfcChamferEdgeFeatureAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcChangeActionEnumType <em>Ifc Change Action Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcChangeActionEnumType
	 * @generated
	 */
	public Adapter createIfcChangeActionEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCharacterStyleSelect <em>Ifc Character Style Select</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCharacterStyleSelect
	 * @generated
	 */
	public Adapter createIfcCharacterStyleSelectAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcChillerType <em>Ifc Chiller Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcChillerType
	 * @generated
	 */
	public Adapter createIfcChillerTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcChillerTypeEnumType <em>Ifc Chiller Type Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcChillerTypeEnumType
	 * @generated
	 */
	public Adapter createIfcChillerTypeEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCircle <em>Ifc Circle</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCircle
	 * @generated
	 */
	public Adapter createIfcCircleAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCircleHollowProfileDef <em>Ifc Circle Hollow Profile Def</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCircleHollowProfileDef
	 * @generated
	 */
	public Adapter createIfcCircleHollowProfileDefAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCircleProfileDef <em>Ifc Circle Profile Def</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCircleProfileDef
	 * @generated
	 */
	public Adapter createIfcCircleProfileDefAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcClassification <em>Ifc Classification</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcClassification
	 * @generated
	 */
	public Adapter createIfcClassificationAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcClassificationItem <em>Ifc Classification Item</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcClassificationItem
	 * @generated
	 */
	public Adapter createIfcClassificationItemAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcClassificationItemRelationship <em>Ifc Classification Item Relationship</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcClassificationItemRelationship
	 * @generated
	 */
	public Adapter createIfcClassificationItemRelationshipAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcClassificationNotation <em>Ifc Classification Notation</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcClassificationNotation
	 * @generated
	 */
	public Adapter createIfcClassificationNotationAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcClassificationNotationFacet <em>Ifc Classification Notation Facet</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcClassificationNotationFacet
	 * @generated
	 */
	public Adapter createIfcClassificationNotationFacetAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcClassificationNotationSelect <em>Ifc Classification Notation Select</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcClassificationNotationSelect
	 * @generated
	 */
	public Adapter createIfcClassificationNotationSelectAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcClassificationReference <em>Ifc Classification Reference</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcClassificationReference
	 * @generated
	 */
	public Adapter createIfcClassificationReferenceAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcClosedShell <em>Ifc Closed Shell</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcClosedShell
	 * @generated
	 */
	public Adapter createIfcClosedShellAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCoilType <em>Ifc Coil Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCoilType
	 * @generated
	 */
	public Adapter createIfcCoilTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCoilTypeEnumType <em>Ifc Coil Type Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCoilTypeEnumType
	 * @generated
	 */
	public Adapter createIfcCoilTypeEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcColour <em>Ifc Colour</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcColour
	 * @generated
	 */
	public Adapter createIfcColourAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcColourOrFactor <em>Ifc Colour Or Factor</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcColourOrFactor
	 * @generated
	 */
	public Adapter createIfcColourOrFactorAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcColourRgb <em>Ifc Colour Rgb</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcColourRgb
	 * @generated
	 */
	public Adapter createIfcColourRgbAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcColourSpecification <em>Ifc Colour Specification</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcColourSpecification
	 * @generated
	 */
	public Adapter createIfcColourSpecificationAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcColumn <em>Ifc Column</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcColumn
	 * @generated
	 */
	public Adapter createIfcColumnAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcColumnType <em>Ifc Column Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcColumnType
	 * @generated
	 */
	public Adapter createIfcColumnTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcColumnTypeEnumType <em>Ifc Column Type Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcColumnTypeEnumType
	 * @generated
	 */
	public Adapter createIfcColumnTypeEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcComplexNumber <em>Ifc Complex Number</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcComplexNumber
	 * @generated
	 */
	public Adapter createIfcComplexNumberAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcComplexNumberType <em>Ifc Complex Number Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcComplexNumberType
	 * @generated
	 */
	public Adapter createIfcComplexNumberTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcComplexProperty <em>Ifc Complex Property</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcComplexProperty
	 * @generated
	 */
	public Adapter createIfcComplexPropertyAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCompositeCurve <em>Ifc Composite Curve</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCompositeCurve
	 * @generated
	 */
	public Adapter createIfcCompositeCurveAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCompositeCurveSegment <em>Ifc Composite Curve Segment</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCompositeCurveSegment
	 * @generated
	 */
	public Adapter createIfcCompositeCurveSegmentAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCompositeProfileDef <em>Ifc Composite Profile Def</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCompositeProfileDef
	 * @generated
	 */
	public Adapter createIfcCompositeProfileDefAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCompoundPlaneAngleMeasure <em>Ifc Compound Plane Angle Measure</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCompoundPlaneAngleMeasure
	 * @generated
	 */
	public Adapter createIfcCompoundPlaneAngleMeasureAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCompoundPlaneAngleMeasureType <em>Ifc Compound Plane Angle Measure Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCompoundPlaneAngleMeasureType
	 * @generated
	 */
	public Adapter createIfcCompoundPlaneAngleMeasureTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCompressorType <em>Ifc Compressor Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCompressorType
	 * @generated
	 */
	public Adapter createIfcCompressorTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCompressorTypeEnumType <em>Ifc Compressor Type Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCompressorTypeEnumType
	 * @generated
	 */
	public Adapter createIfcCompressorTypeEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCondenserType <em>Ifc Condenser Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCondenserType
	 * @generated
	 */
	public Adapter createIfcCondenserTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCondenserTypeEnumType <em>Ifc Condenser Type Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCondenserTypeEnumType
	 * @generated
	 */
	public Adapter createIfcCondenserTypeEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCondition <em>Ifc Condition</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCondition
	 * @generated
	 */
	public Adapter createIfcConditionAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcConditionCriterion <em>Ifc Condition Criterion</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcConditionCriterion
	 * @generated
	 */
	public Adapter createIfcConditionCriterionAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcConditionCriterionSelect <em>Ifc Condition Criterion Select</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcConditionCriterionSelect
	 * @generated
	 */
	public Adapter createIfcConditionCriterionSelectAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcConic <em>Ifc Conic</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcConic
	 * @generated
	 */
	public Adapter createIfcConicAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcConnectedFaceSet <em>Ifc Connected Face Set</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcConnectedFaceSet
	 * @generated
	 */
	public Adapter createIfcConnectedFaceSetAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcConnectionCurveGeometry <em>Ifc Connection Curve Geometry</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcConnectionCurveGeometry
	 * @generated
	 */
	public Adapter createIfcConnectionCurveGeometryAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcConnectionGeometry <em>Ifc Connection Geometry</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcConnectionGeometry
	 * @generated
	 */
	public Adapter createIfcConnectionGeometryAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcConnectionPointEccentricity <em>Ifc Connection Point Eccentricity</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcConnectionPointEccentricity
	 * @generated
	 */
	public Adapter createIfcConnectionPointEccentricityAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcConnectionPointGeometry <em>Ifc Connection Point Geometry</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcConnectionPointGeometry
	 * @generated
	 */
	public Adapter createIfcConnectionPointGeometryAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcConnectionPortGeometry <em>Ifc Connection Port Geometry</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcConnectionPortGeometry
	 * @generated
	 */
	public Adapter createIfcConnectionPortGeometryAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcConnectionSurfaceGeometry <em>Ifc Connection Surface Geometry</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcConnectionSurfaceGeometry
	 * @generated
	 */
	public Adapter createIfcConnectionSurfaceGeometryAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcConnectionTypeEnumType <em>Ifc Connection Type Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcConnectionTypeEnumType
	 * @generated
	 */
	public Adapter createIfcConnectionTypeEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcConstraint <em>Ifc Constraint</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcConstraint
	 * @generated
	 */
	public Adapter createIfcConstraintAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcConstraintAggregationRelationship <em>Ifc Constraint Aggregation Relationship</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcConstraintAggregationRelationship
	 * @generated
	 */
	public Adapter createIfcConstraintAggregationRelationshipAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcConstraintClassificationRelationship <em>Ifc Constraint Classification Relationship</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcConstraintClassificationRelationship
	 * @generated
	 */
	public Adapter createIfcConstraintClassificationRelationshipAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcConstraintEnumType <em>Ifc Constraint Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcConstraintEnumType
	 * @generated
	 */
	public Adapter createIfcConstraintEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcConstraintRelationship <em>Ifc Constraint Relationship</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcConstraintRelationship
	 * @generated
	 */
	public Adapter createIfcConstraintRelationshipAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcConstructionEquipmentResource <em>Ifc Construction Equipment Resource</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcConstructionEquipmentResource
	 * @generated
	 */
	public Adapter createIfcConstructionEquipmentResourceAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcConstructionMaterialResource <em>Ifc Construction Material Resource</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcConstructionMaterialResource
	 * @generated
	 */
	public Adapter createIfcConstructionMaterialResourceAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcConstructionProductResource <em>Ifc Construction Product Resource</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcConstructionProductResource
	 * @generated
	 */
	public Adapter createIfcConstructionProductResourceAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcConstructionResource <em>Ifc Construction Resource</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcConstructionResource
	 * @generated
	 */
	public Adapter createIfcConstructionResourceAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcContextDependentMeasureType <em>Ifc Context Dependent Measure Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcContextDependentMeasureType
	 * @generated
	 */
	public Adapter createIfcContextDependentMeasureTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcContextDependentUnit <em>Ifc Context Dependent Unit</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcContextDependentUnit
	 * @generated
	 */
	public Adapter createIfcContextDependentUnitAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcControl <em>Ifc Control</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcControl
	 * @generated
	 */
	public Adapter createIfcControlAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcControllerType <em>Ifc Controller Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcControllerType
	 * @generated
	 */
	public Adapter createIfcControllerTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcControllerTypeEnumType <em>Ifc Controller Type Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcControllerTypeEnumType
	 * @generated
	 */
	public Adapter createIfcControllerTypeEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcConversionBasedUnit <em>Ifc Conversion Based Unit</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcConversionBasedUnit
	 * @generated
	 */
	public Adapter createIfcConversionBasedUnitAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCooledBeamType <em>Ifc Cooled Beam Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCooledBeamType
	 * @generated
	 */
	public Adapter createIfcCooledBeamTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCooledBeamTypeEnumType <em>Ifc Cooled Beam Type Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCooledBeamTypeEnumType
	 * @generated
	 */
	public Adapter createIfcCooledBeamTypeEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCoolingTowerType <em>Ifc Cooling Tower Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCoolingTowerType
	 * @generated
	 */
	public Adapter createIfcCoolingTowerTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCoolingTowerTypeEnumType <em>Ifc Cooling Tower Type Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCoolingTowerTypeEnumType
	 * @generated
	 */
	public Adapter createIfcCoolingTowerTypeEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCoordinatedUniversalTimeOffset <em>Ifc Coordinated Universal Time Offset</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCoordinatedUniversalTimeOffset
	 * @generated
	 */
	public Adapter createIfcCoordinatedUniversalTimeOffsetAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCostItem <em>Ifc Cost Item</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCostItem
	 * @generated
	 */
	public Adapter createIfcCostItemAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCostSchedule <em>Ifc Cost Schedule</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCostSchedule
	 * @generated
	 */
	public Adapter createIfcCostScheduleAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCostScheduleTypeEnumType <em>Ifc Cost Schedule Type Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCostScheduleTypeEnumType
	 * @generated
	 */
	public Adapter createIfcCostScheduleTypeEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCostValue <em>Ifc Cost Value</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCostValue
	 * @generated
	 */
	public Adapter createIfcCostValueAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCountMeasureType <em>Ifc Count Measure Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCountMeasureType
	 * @generated
	 */
	public Adapter createIfcCountMeasureTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCovering <em>Ifc Covering</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCovering
	 * @generated
	 */
	public Adapter createIfcCoveringAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCoveringType <em>Ifc Covering Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCoveringType
	 * @generated
	 */
	public Adapter createIfcCoveringTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCoveringTypeEnumType <em>Ifc Covering Type Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCoveringTypeEnumType
	 * @generated
	 */
	public Adapter createIfcCoveringTypeEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCraneRailAShapeProfileDef <em>Ifc Crane Rail AShape Profile Def</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCraneRailAShapeProfileDef
	 * @generated
	 */
	public Adapter createIfcCraneRailAShapeProfileDefAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCraneRailFShapeProfileDef <em>Ifc Crane Rail FShape Profile Def</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCraneRailFShapeProfileDef
	 * @generated
	 */
	public Adapter createIfcCraneRailFShapeProfileDefAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCrewResource <em>Ifc Crew Resource</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCrewResource
	 * @generated
	 */
	public Adapter createIfcCrewResourceAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCsgPrimitive3D <em>Ifc Csg Primitive3 D</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCsgPrimitive3D
	 * @generated
	 */
	public Adapter createIfcCsgPrimitive3DAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCsgSelect <em>Ifc Csg Select</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCsgSelect
	 * @generated
	 */
	public Adapter createIfcCsgSelectAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCsgSolid <em>Ifc Csg Solid</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCsgSolid
	 * @generated
	 */
	public Adapter createIfcCsgSolidAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCShapeProfileDef <em>Ifc CShape Profile Def</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCShapeProfileDef
	 * @generated
	 */
	public Adapter createIfcCShapeProfileDefAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCurrencyEnumType <em>Ifc Currency Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCurrencyEnumType
	 * @generated
	 */
	public Adapter createIfcCurrencyEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCurrencyRelationship <em>Ifc Currency Relationship</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCurrencyRelationship
	 * @generated
	 */
	public Adapter createIfcCurrencyRelationshipAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCurtainWall <em>Ifc Curtain Wall</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCurtainWall
	 * @generated
	 */
	public Adapter createIfcCurtainWallAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCurtainWallType <em>Ifc Curtain Wall Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCurtainWallType
	 * @generated
	 */
	public Adapter createIfcCurtainWallTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCurtainWallTypeEnumType <em>Ifc Curtain Wall Type Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCurtainWallTypeEnumType
	 * @generated
	 */
	public Adapter createIfcCurtainWallTypeEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCurvatureMeasureType <em>Ifc Curvature Measure Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCurvatureMeasureType
	 * @generated
	 */
	public Adapter createIfcCurvatureMeasureTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCurve <em>Ifc Curve</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCurve
	 * @generated
	 */
	public Adapter createIfcCurveAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCurveBoundedPlane <em>Ifc Curve Bounded Plane</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCurveBoundedPlane
	 * @generated
	 */
	public Adapter createIfcCurveBoundedPlaneAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCurveFontOrScaledCurveFontSelect <em>Ifc Curve Font Or Scaled Curve Font Select</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCurveFontOrScaledCurveFontSelect
	 * @generated
	 */
	public Adapter createIfcCurveFontOrScaledCurveFontSelectAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCurveOrEdgeCurve <em>Ifc Curve Or Edge Curve</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCurveOrEdgeCurve
	 * @generated
	 */
	public Adapter createIfcCurveOrEdgeCurveAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCurveStyle <em>Ifc Curve Style</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCurveStyle
	 * @generated
	 */
	public Adapter createIfcCurveStyleAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCurveStyleFont <em>Ifc Curve Style Font</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCurveStyleFont
	 * @generated
	 */
	public Adapter createIfcCurveStyleFontAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCurveStyleFontAndScaling <em>Ifc Curve Style Font And Scaling</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCurveStyleFontAndScaling
	 * @generated
	 */
	public Adapter createIfcCurveStyleFontAndScalingAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCurveStyleFontPattern <em>Ifc Curve Style Font Pattern</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCurveStyleFontPattern
	 * @generated
	 */
	public Adapter createIfcCurveStyleFontPatternAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCurveStyleFontSelect <em>Ifc Curve Style Font Select</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcCurveStyleFontSelect
	 * @generated
	 */
	public Adapter createIfcCurveStyleFontSelectAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDamperType <em>Ifc Damper Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDamperType
	 * @generated
	 */
	public Adapter createIfcDamperTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDamperTypeEnumType <em>Ifc Damper Type Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDamperTypeEnumType
	 * @generated
	 */
	public Adapter createIfcDamperTypeEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDataOriginEnumType <em>Ifc Data Origin Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDataOriginEnumType
	 * @generated
	 */
	public Adapter createIfcDataOriginEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDateAndTime <em>Ifc Date And Time</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDateAndTime
	 * @generated
	 */
	public Adapter createIfcDateAndTimeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDateTimeSelect <em>Ifc Date Time Select</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDateTimeSelect
	 * @generated
	 */
	public Adapter createIfcDateTimeSelectAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDayInMonthNumberType <em>Ifc Day In Month Number Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDayInMonthNumberType
	 * @generated
	 */
	public Adapter createIfcDayInMonthNumberTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDaylightSavingHourType <em>Ifc Daylight Saving Hour Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDaylightSavingHourType
	 * @generated
	 */
	public Adapter createIfcDaylightSavingHourTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDefinedSymbol <em>Ifc Defined Symbol</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDefinedSymbol
	 * @generated
	 */
	public Adapter createIfcDefinedSymbolAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDefinedSymbolSelect <em>Ifc Defined Symbol Select</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDefinedSymbolSelect
	 * @generated
	 */
	public Adapter createIfcDefinedSymbolSelectAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDerivedMeasureValue <em>Ifc Derived Measure Value</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDerivedMeasureValue
	 * @generated
	 */
	public Adapter createIfcDerivedMeasureValueAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDerivedProfileDef <em>Ifc Derived Profile Def</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDerivedProfileDef
	 * @generated
	 */
	public Adapter createIfcDerivedProfileDefAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDerivedUnit <em>Ifc Derived Unit</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDerivedUnit
	 * @generated
	 */
	public Adapter createIfcDerivedUnitAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDerivedUnitElement <em>Ifc Derived Unit Element</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDerivedUnitElement
	 * @generated
	 */
	public Adapter createIfcDerivedUnitElementAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDerivedUnitEnumType <em>Ifc Derived Unit Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDerivedUnitEnumType
	 * @generated
	 */
	public Adapter createIfcDerivedUnitEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDescriptiveMeasureType <em>Ifc Descriptive Measure Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDescriptiveMeasureType
	 * @generated
	 */
	public Adapter createIfcDescriptiveMeasureTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDiameterDimension <em>Ifc Diameter Dimension</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDiameterDimension
	 * @generated
	 */
	public Adapter createIfcDiameterDimensionAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDimensionalExponents <em>Ifc Dimensional Exponents</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDimensionalExponents
	 * @generated
	 */
	public Adapter createIfcDimensionalExponentsAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDimensionCalloutRelationship <em>Ifc Dimension Callout Relationship</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDimensionCalloutRelationship
	 * @generated
	 */
	public Adapter createIfcDimensionCalloutRelationshipAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDimensionCountType <em>Ifc Dimension Count Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDimensionCountType
	 * @generated
	 */
	public Adapter createIfcDimensionCountTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDimensionCurve <em>Ifc Dimension Curve</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDimensionCurve
	 * @generated
	 */
	public Adapter createIfcDimensionCurveAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDimensionCurveDirectedCallout <em>Ifc Dimension Curve Directed Callout</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDimensionCurveDirectedCallout
	 * @generated
	 */
	public Adapter createIfcDimensionCurveDirectedCalloutAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDimensionCurveTerminator <em>Ifc Dimension Curve Terminator</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDimensionCurveTerminator
	 * @generated
	 */
	public Adapter createIfcDimensionCurveTerminatorAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDimensionExtentUsageType <em>Ifc Dimension Extent Usage Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDimensionExtentUsageType
	 * @generated
	 */
	public Adapter createIfcDimensionExtentUsageTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDimensionPair <em>Ifc Dimension Pair</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDimensionPair
	 * @generated
	 */
	public Adapter createIfcDimensionPairAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDirection <em>Ifc Direction</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDirection
	 * @generated
	 */
	public Adapter createIfcDirectionAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDirectionSenseEnumType <em>Ifc Direction Sense Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDirectionSenseEnumType
	 * @generated
	 */
	public Adapter createIfcDirectionSenseEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDiscreteAccessory <em>Ifc Discrete Accessory</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDiscreteAccessory
	 * @generated
	 */
	public Adapter createIfcDiscreteAccessoryAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDiscreteAccessoryType <em>Ifc Discrete Accessory Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDiscreteAccessoryType
	 * @generated
	 */
	public Adapter createIfcDiscreteAccessoryTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDistributionChamberElement <em>Ifc Distribution Chamber Element</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDistributionChamberElement
	 * @generated
	 */
	public Adapter createIfcDistributionChamberElementAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDistributionChamberElementType <em>Ifc Distribution Chamber Element Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDistributionChamberElementType
	 * @generated
	 */
	public Adapter createIfcDistributionChamberElementTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDistributionChamberElementTypeEnumType <em>Ifc Distribution Chamber Element Type Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDistributionChamberElementTypeEnumType
	 * @generated
	 */
	public Adapter createIfcDistributionChamberElementTypeEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDistributionControlElement <em>Ifc Distribution Control Element</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDistributionControlElement
	 * @generated
	 */
	public Adapter createIfcDistributionControlElementAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDistributionControlElementType <em>Ifc Distribution Control Element Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDistributionControlElementType
	 * @generated
	 */
	public Adapter createIfcDistributionControlElementTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDistributionElement <em>Ifc Distribution Element</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDistributionElement
	 * @generated
	 */
	public Adapter createIfcDistributionElementAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDistributionElementType <em>Ifc Distribution Element Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDistributionElementType
	 * @generated
	 */
	public Adapter createIfcDistributionElementTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDistributionFlowElement <em>Ifc Distribution Flow Element</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDistributionFlowElement
	 * @generated
	 */
	public Adapter createIfcDistributionFlowElementAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDistributionFlowElementType <em>Ifc Distribution Flow Element Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDistributionFlowElementType
	 * @generated
	 */
	public Adapter createIfcDistributionFlowElementTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDistributionPort <em>Ifc Distribution Port</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDistributionPort
	 * @generated
	 */
	public Adapter createIfcDistributionPortAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDocumentConfidentialityEnumType <em>Ifc Document Confidentiality Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDocumentConfidentialityEnumType
	 * @generated
	 */
	public Adapter createIfcDocumentConfidentialityEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDocumentElectronicFormat <em>Ifc Document Electronic Format</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDocumentElectronicFormat
	 * @generated
	 */
	public Adapter createIfcDocumentElectronicFormatAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDocumentInformation <em>Ifc Document Information</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDocumentInformation
	 * @generated
	 */
	public Adapter createIfcDocumentInformationAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDocumentInformationRelationship <em>Ifc Document Information Relationship</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDocumentInformationRelationship
	 * @generated
	 */
	public Adapter createIfcDocumentInformationRelationshipAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDocumentReference <em>Ifc Document Reference</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDocumentReference
	 * @generated
	 */
	public Adapter createIfcDocumentReferenceAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDocumentSelect <em>Ifc Document Select</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDocumentSelect
	 * @generated
	 */
	public Adapter createIfcDocumentSelectAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDocumentStatusEnumType <em>Ifc Document Status Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDocumentStatusEnumType
	 * @generated
	 */
	public Adapter createIfcDocumentStatusEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDoor <em>Ifc Door</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDoor
	 * @generated
	 */
	public Adapter createIfcDoorAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDoorLiningProperties <em>Ifc Door Lining Properties</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDoorLiningProperties
	 * @generated
	 */
	public Adapter createIfcDoorLiningPropertiesAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDoorPanelOperationEnumType <em>Ifc Door Panel Operation Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDoorPanelOperationEnumType
	 * @generated
	 */
	public Adapter createIfcDoorPanelOperationEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDoorPanelPositionEnumType <em>Ifc Door Panel Position Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDoorPanelPositionEnumType
	 * @generated
	 */
	public Adapter createIfcDoorPanelPositionEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDoorPanelProperties <em>Ifc Door Panel Properties</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDoorPanelProperties
	 * @generated
	 */
	public Adapter createIfcDoorPanelPropertiesAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDoorStyle <em>Ifc Door Style</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDoorStyle
	 * @generated
	 */
	public Adapter createIfcDoorStyleAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDoorStyleConstructionEnumType <em>Ifc Door Style Construction Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDoorStyleConstructionEnumType
	 * @generated
	 */
	public Adapter createIfcDoorStyleConstructionEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDoorStyleOperationEnumType <em>Ifc Door Style Operation Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDoorStyleOperationEnumType
	 * @generated
	 */
	public Adapter createIfcDoorStyleOperationEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDoseEquivalentMeasureType <em>Ifc Dose Equivalent Measure Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDoseEquivalentMeasureType
	 * @generated
	 */
	public Adapter createIfcDoseEquivalentMeasureTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDraughtingCallout <em>Ifc Draughting Callout</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDraughtingCallout
	 * @generated
	 */
	public Adapter createIfcDraughtingCalloutAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDraughtingCalloutElement <em>Ifc Draughting Callout Element</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDraughtingCalloutElement
	 * @generated
	 */
	public Adapter createIfcDraughtingCalloutElementAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDraughtingCalloutRelationship <em>Ifc Draughting Callout Relationship</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDraughtingCalloutRelationship
	 * @generated
	 */
	public Adapter createIfcDraughtingCalloutRelationshipAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDraughtingPreDefinedColour <em>Ifc Draughting Pre Defined Colour</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDraughtingPreDefinedColour
	 * @generated
	 */
	public Adapter createIfcDraughtingPreDefinedColourAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDraughtingPreDefinedCurveFont <em>Ifc Draughting Pre Defined Curve Font</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDraughtingPreDefinedCurveFont
	 * @generated
	 */
	public Adapter createIfcDraughtingPreDefinedCurveFontAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDraughtingPreDefinedTextFont <em>Ifc Draughting Pre Defined Text Font</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDraughtingPreDefinedTextFont
	 * @generated
	 */
	public Adapter createIfcDraughtingPreDefinedTextFontAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDuctFittingType <em>Ifc Duct Fitting Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDuctFittingType
	 * @generated
	 */
	public Adapter createIfcDuctFittingTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDuctFittingTypeEnumType <em>Ifc Duct Fitting Type Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDuctFittingTypeEnumType
	 * @generated
	 */
	public Adapter createIfcDuctFittingTypeEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDuctSegmentType <em>Ifc Duct Segment Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDuctSegmentType
	 * @generated
	 */
	public Adapter createIfcDuctSegmentTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDuctSegmentTypeEnumType <em>Ifc Duct Segment Type Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDuctSegmentTypeEnumType
	 * @generated
	 */
	public Adapter createIfcDuctSegmentTypeEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDuctSilencerType <em>Ifc Duct Silencer Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDuctSilencerType
	 * @generated
	 */
	public Adapter createIfcDuctSilencerTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDuctSilencerTypeEnumType <em>Ifc Duct Silencer Type Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDuctSilencerTypeEnumType
	 * @generated
	 */
	public Adapter createIfcDuctSilencerTypeEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDynamicViscosityMeasureType <em>Ifc Dynamic Viscosity Measure Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcDynamicViscosityMeasureType
	 * @generated
	 */
	public Adapter createIfcDynamicViscosityMeasureTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcEdge <em>Ifc Edge</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcEdge
	 * @generated
	 */
	public Adapter createIfcEdgeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcEdgeCurve <em>Ifc Edge Curve</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcEdgeCurve
	 * @generated
	 */
	public Adapter createIfcEdgeCurveAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcEdgeFeature <em>Ifc Edge Feature</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcEdgeFeature
	 * @generated
	 */
	public Adapter createIfcEdgeFeatureAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcEdgeLoop <em>Ifc Edge Loop</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcEdgeLoop
	 * @generated
	 */
	public Adapter createIfcEdgeLoopAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcElectricalBaseProperties <em>Ifc Electrical Base Properties</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcElectricalBaseProperties
	 * @generated
	 */
	public Adapter createIfcElectricalBasePropertiesAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcElectricalCircuit <em>Ifc Electrical Circuit</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcElectricalCircuit
	 * @generated
	 */
	public Adapter createIfcElectricalCircuitAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcElectricalElement <em>Ifc Electrical Element</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcElectricalElement
	 * @generated
	 */
	public Adapter createIfcElectricalElementAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcElectricApplianceType <em>Ifc Electric Appliance Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcElectricApplianceType
	 * @generated
	 */
	public Adapter createIfcElectricApplianceTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcElectricApplianceTypeEnumType <em>Ifc Electric Appliance Type Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcElectricApplianceTypeEnumType
	 * @generated
	 */
	public Adapter createIfcElectricApplianceTypeEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcElectricCapacitanceMeasureType <em>Ifc Electric Capacitance Measure Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcElectricCapacitanceMeasureType
	 * @generated
	 */
	public Adapter createIfcElectricCapacitanceMeasureTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcElectricChargeMeasureType <em>Ifc Electric Charge Measure Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcElectricChargeMeasureType
	 * @generated
	 */
	public Adapter createIfcElectricChargeMeasureTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcElectricConductanceMeasureType <em>Ifc Electric Conductance Measure Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcElectricConductanceMeasureType
	 * @generated
	 */
	public Adapter createIfcElectricConductanceMeasureTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcElectricCurrentEnumType <em>Ifc Electric Current Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcElectricCurrentEnumType
	 * @generated
	 */
	public Adapter createIfcElectricCurrentEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcElectricCurrentMeasureType <em>Ifc Electric Current Measure Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcElectricCurrentMeasureType
	 * @generated
	 */
	public Adapter createIfcElectricCurrentMeasureTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcElectricDistributionPoint <em>Ifc Electric Distribution Point</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcElectricDistributionPoint
	 * @generated
	 */
	public Adapter createIfcElectricDistributionPointAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcElectricDistributionPointFunctionEnumType <em>Ifc Electric Distribution Point Function Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcElectricDistributionPointFunctionEnumType
	 * @generated
	 */
	public Adapter createIfcElectricDistributionPointFunctionEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcElectricFlowStorageDeviceType <em>Ifc Electric Flow Storage Device Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcElectricFlowStorageDeviceType
	 * @generated
	 */
	public Adapter createIfcElectricFlowStorageDeviceTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcElectricFlowStorageDeviceTypeEnumType <em>Ifc Electric Flow Storage Device Type Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcElectricFlowStorageDeviceTypeEnumType
	 * @generated
	 */
	public Adapter createIfcElectricFlowStorageDeviceTypeEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcElectricGeneratorType <em>Ifc Electric Generator Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcElectricGeneratorType
	 * @generated
	 */
	public Adapter createIfcElectricGeneratorTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcElectricGeneratorTypeEnumType <em>Ifc Electric Generator Type Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcElectricGeneratorTypeEnumType
	 * @generated
	 */
	public Adapter createIfcElectricGeneratorTypeEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcElectricHeaterType <em>Ifc Electric Heater Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcElectricHeaterType
	 * @generated
	 */
	public Adapter createIfcElectricHeaterTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcElectricHeaterTypeEnumType <em>Ifc Electric Heater Type Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcElectricHeaterTypeEnumType
	 * @generated
	 */
	public Adapter createIfcElectricHeaterTypeEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcElectricMotorType <em>Ifc Electric Motor Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcElectricMotorType
	 * @generated
	 */
	public Adapter createIfcElectricMotorTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcElectricMotorTypeEnumType <em>Ifc Electric Motor Type Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcElectricMotorTypeEnumType
	 * @generated
	 */
	public Adapter createIfcElectricMotorTypeEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcElectricResistanceMeasureType <em>Ifc Electric Resistance Measure Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcElectricResistanceMeasureType
	 * @generated
	 */
	public Adapter createIfcElectricResistanceMeasureTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcElectricTimeControlType <em>Ifc Electric Time Control Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcElectricTimeControlType
	 * @generated
	 */
	public Adapter createIfcElectricTimeControlTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcElectricTimeControlTypeEnumType <em>Ifc Electric Time Control Type Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcElectricTimeControlTypeEnumType
	 * @generated
	 */
	public Adapter createIfcElectricTimeControlTypeEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcElectricVoltageMeasureType <em>Ifc Electric Voltage Measure Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcElectricVoltageMeasureType
	 * @generated
	 */
	public Adapter createIfcElectricVoltageMeasureTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcElement <em>Ifc Element</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcElement
	 * @generated
	 */
	public Adapter createIfcElementAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcElementarySurface <em>Ifc Elementary Surface</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcElementarySurface
	 * @generated
	 */
	public Adapter createIfcElementarySurfaceAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcElementAssembly <em>Ifc Element Assembly</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcElementAssembly
	 * @generated
	 */
	public Adapter createIfcElementAssemblyAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcElementAssemblyTypeEnumType <em>Ifc Element Assembly Type Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcElementAssemblyTypeEnumType
	 * @generated
	 */
	public Adapter createIfcElementAssemblyTypeEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcElementComponent <em>Ifc Element Component</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcElementComponent
	 * @generated
	 */
	public Adapter createIfcElementComponentAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcElementComponentType <em>Ifc Element Component Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcElementComponentType
	 * @generated
	 */
	public Adapter createIfcElementComponentTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcElementCompositionEnumType <em>Ifc Element Composition Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcElementCompositionEnumType
	 * @generated
	 */
	public Adapter createIfcElementCompositionEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcElementQuantity <em>Ifc Element Quantity</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcElementQuantity
	 * @generated
	 */
	public Adapter createIfcElementQuantityAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcElementType <em>Ifc Element Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcElementType
	 * @generated
	 */
	public Adapter createIfcElementTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcEllipse <em>Ifc Ellipse</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcEllipse
	 * @generated
	 */
	public Adapter createIfcEllipseAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcEllipseProfileDef <em>Ifc Ellipse Profile Def</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcEllipseProfileDef
	 * @generated
	 */
	public Adapter createIfcEllipseProfileDefAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcEnergyConversionDevice <em>Ifc Energy Conversion Device</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcEnergyConversionDevice
	 * @generated
	 */
	public Adapter createIfcEnergyConversionDeviceAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcEnergyConversionDeviceType <em>Ifc Energy Conversion Device Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcEnergyConversionDeviceType
	 * @generated
	 */
	public Adapter createIfcEnergyConversionDeviceTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcEnergyMeasureType <em>Ifc Energy Measure Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcEnergyMeasureType
	 * @generated
	 */
	public Adapter createIfcEnergyMeasureTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcEnergyProperties <em>Ifc Energy Properties</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcEnergyProperties
	 * @generated
	 */
	public Adapter createIfcEnergyPropertiesAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcEnergySequenceEnumType <em>Ifc Energy Sequence Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcEnergySequenceEnumType
	 * @generated
	 */
	public Adapter createIfcEnergySequenceEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcEnvironmentalImpactCategoryEnumType <em>Ifc Environmental Impact Category Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcEnvironmentalImpactCategoryEnumType
	 * @generated
	 */
	public Adapter createIfcEnvironmentalImpactCategoryEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcEnvironmentalImpactValue <em>Ifc Environmental Impact Value</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcEnvironmentalImpactValue
	 * @generated
	 */
	public Adapter createIfcEnvironmentalImpactValueAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcEquipmentElement <em>Ifc Equipment Element</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcEquipmentElement
	 * @generated
	 */
	public Adapter createIfcEquipmentElementAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcEquipmentStandard <em>Ifc Equipment Standard</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcEquipmentStandard
	 * @generated
	 */
	public Adapter createIfcEquipmentStandardAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcEvaporativeCoolerType <em>Ifc Evaporative Cooler Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcEvaporativeCoolerType
	 * @generated
	 */
	public Adapter createIfcEvaporativeCoolerTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcEvaporativeCoolerTypeEnumType <em>Ifc Evaporative Cooler Type Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcEvaporativeCoolerTypeEnumType
	 * @generated
	 */
	public Adapter createIfcEvaporativeCoolerTypeEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcEvaporatorType <em>Ifc Evaporator Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcEvaporatorType
	 * @generated
	 */
	public Adapter createIfcEvaporatorTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcEvaporatorTypeEnumType <em>Ifc Evaporator Type Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcEvaporatorTypeEnumType
	 * @generated
	 */
	public Adapter createIfcEvaporatorTypeEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcExtendedMaterialProperties <em>Ifc Extended Material Properties</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcExtendedMaterialProperties
	 * @generated
	 */
	public Adapter createIfcExtendedMaterialPropertiesAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcExternallyDefinedHatchStyle <em>Ifc Externally Defined Hatch Style</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcExternallyDefinedHatchStyle
	 * @generated
	 */
	public Adapter createIfcExternallyDefinedHatchStyleAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcExternallyDefinedSurfaceStyle <em>Ifc Externally Defined Surface Style</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcExternallyDefinedSurfaceStyle
	 * @generated
	 */
	public Adapter createIfcExternallyDefinedSurfaceStyleAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcExternallyDefinedSymbol <em>Ifc Externally Defined Symbol</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcExternallyDefinedSymbol
	 * @generated
	 */
	public Adapter createIfcExternallyDefinedSymbolAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcExternallyDefinedTextFont <em>Ifc Externally Defined Text Font</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcExternallyDefinedTextFont
	 * @generated
	 */
	public Adapter createIfcExternallyDefinedTextFontAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcExternalReference <em>Ifc External Reference</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcExternalReference
	 * @generated
	 */
	public Adapter createIfcExternalReferenceAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcExtrudedAreaSolid <em>Ifc Extruded Area Solid</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcExtrudedAreaSolid
	 * @generated
	 */
	public Adapter createIfcExtrudedAreaSolidAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcFace <em>Ifc Face</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcFace
	 * @generated
	 */
	public Adapter createIfcFaceAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcFaceBasedSurfaceModel <em>Ifc Face Based Surface Model</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcFaceBasedSurfaceModel
	 * @generated
	 */
	public Adapter createIfcFaceBasedSurfaceModelAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcFaceBound <em>Ifc Face Bound</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcFaceBound
	 * @generated
	 */
	public Adapter createIfcFaceBoundAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcFaceOuterBound <em>Ifc Face Outer Bound</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcFaceOuterBound
	 * @generated
	 */
	public Adapter createIfcFaceOuterBoundAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcFaceSurface <em>Ifc Face Surface</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcFaceSurface
	 * @generated
	 */
	public Adapter createIfcFaceSurfaceAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcFacetedBrep <em>Ifc Faceted Brep</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcFacetedBrep
	 * @generated
	 */
	public Adapter createIfcFacetedBrepAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcFacetedBrepWithVoids <em>Ifc Faceted Brep With Voids</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcFacetedBrepWithVoids
	 * @generated
	 */
	public Adapter createIfcFacetedBrepWithVoidsAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcFailureConnectionCondition <em>Ifc Failure Connection Condition</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcFailureConnectionCondition
	 * @generated
	 */
	public Adapter createIfcFailureConnectionConditionAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcFanType <em>Ifc Fan Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcFanType
	 * @generated
	 */
	public Adapter createIfcFanTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcFanTypeEnumType <em>Ifc Fan Type Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcFanTypeEnumType
	 * @generated
	 */
	public Adapter createIfcFanTypeEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcFastener <em>Ifc Fastener</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcFastener
	 * @generated
	 */
	public Adapter createIfcFastenerAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcFastenerType <em>Ifc Fastener Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcFastenerType
	 * @generated
	 */
	public Adapter createIfcFastenerTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcFeatureElement <em>Ifc Feature Element</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcFeatureElement
	 * @generated
	 */
	public Adapter createIfcFeatureElementAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcFeatureElementAddition <em>Ifc Feature Element Addition</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcFeatureElementAddition
	 * @generated
	 */
	public Adapter createIfcFeatureElementAdditionAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcFeatureElementSubtraction <em>Ifc Feature Element Subtraction</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcFeatureElementSubtraction
	 * @generated
	 */
	public Adapter createIfcFeatureElementSubtractionAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcFillAreaStyle <em>Ifc Fill Area Style</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcFillAreaStyle
	 * @generated
	 */
	public Adapter createIfcFillAreaStyleAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcFillAreaStyleHatching <em>Ifc Fill Area Style Hatching</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcFillAreaStyleHatching
	 * @generated
	 */
	public Adapter createIfcFillAreaStyleHatchingAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcFillAreaStyleTiles <em>Ifc Fill Area Style Tiles</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcFillAreaStyleTiles
	 * @generated
	 */
	public Adapter createIfcFillAreaStyleTilesAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcFillAreaStyleTileShapeSelect <em>Ifc Fill Area Style Tile Shape Select</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcFillAreaStyleTileShapeSelect
	 * @generated
	 */
	public Adapter createIfcFillAreaStyleTileShapeSelectAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcFillAreaStyleTileSymbolWithStyle <em>Ifc Fill Area Style Tile Symbol With Style</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcFillAreaStyleTileSymbolWithStyle
	 * @generated
	 */
	public Adapter createIfcFillAreaStyleTileSymbolWithStyleAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcFillStyleSelect <em>Ifc Fill Style Select</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcFillStyleSelect
	 * @generated
	 */
	public Adapter createIfcFillStyleSelectAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcFilterType <em>Ifc Filter Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcFilterType
	 * @generated
	 */
	public Adapter createIfcFilterTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcFilterTypeEnumType <em>Ifc Filter Type Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcFilterTypeEnumType
	 * @generated
	 */
	public Adapter createIfcFilterTypeEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcFireSuppressionTerminalType <em>Ifc Fire Suppression Terminal Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcFireSuppressionTerminalType
	 * @generated
	 */
	public Adapter createIfcFireSuppressionTerminalTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcFireSuppressionTerminalTypeEnumType <em>Ifc Fire Suppression Terminal Type Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcFireSuppressionTerminalTypeEnumType
	 * @generated
	 */
	public Adapter createIfcFireSuppressionTerminalTypeEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcFlowController <em>Ifc Flow Controller</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcFlowController
	 * @generated
	 */
	public Adapter createIfcFlowControllerAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcFlowControllerType <em>Ifc Flow Controller Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcFlowControllerType
	 * @generated
	 */
	public Adapter createIfcFlowControllerTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcFlowDirectionEnumType <em>Ifc Flow Direction Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcFlowDirectionEnumType
	 * @generated
	 */
	public Adapter createIfcFlowDirectionEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcFlowFitting <em>Ifc Flow Fitting</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcFlowFitting
	 * @generated
	 */
	public Adapter createIfcFlowFittingAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcFlowFittingType <em>Ifc Flow Fitting Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcFlowFittingType
	 * @generated
	 */
	public Adapter createIfcFlowFittingTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcFlowInstrumentType <em>Ifc Flow Instrument Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcFlowInstrumentType
	 * @generated
	 */
	public Adapter createIfcFlowInstrumentTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcFlowInstrumentTypeEnumType <em>Ifc Flow Instrument Type Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcFlowInstrumentTypeEnumType
	 * @generated
	 */
	public Adapter createIfcFlowInstrumentTypeEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcFlowMeterType <em>Ifc Flow Meter Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcFlowMeterType
	 * @generated
	 */
	public Adapter createIfcFlowMeterTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcFlowMeterTypeEnumType <em>Ifc Flow Meter Type Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcFlowMeterTypeEnumType
	 * @generated
	 */
	public Adapter createIfcFlowMeterTypeEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcFlowMovingDevice <em>Ifc Flow Moving Device</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcFlowMovingDevice
	 * @generated
	 */
	public Adapter createIfcFlowMovingDeviceAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcFlowMovingDeviceType <em>Ifc Flow Moving Device Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcFlowMovingDeviceType
	 * @generated
	 */
	public Adapter createIfcFlowMovingDeviceTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcFlowSegment <em>Ifc Flow Segment</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcFlowSegment
	 * @generated
	 */
	public Adapter createIfcFlowSegmentAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcFlowSegmentType <em>Ifc Flow Segment Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcFlowSegmentType
	 * @generated
	 */
	public Adapter createIfcFlowSegmentTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcFlowStorageDevice <em>Ifc Flow Storage Device</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcFlowStorageDevice
	 * @generated
	 */
	public Adapter createIfcFlowStorageDeviceAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcFlowStorageDeviceType <em>Ifc Flow Storage Device Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcFlowStorageDeviceType
	 * @generated
	 */
	public Adapter createIfcFlowStorageDeviceTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcFlowTerminal <em>Ifc Flow Terminal</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcFlowTerminal
	 * @generated
	 */
	public Adapter createIfcFlowTerminalAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcFlowTerminalType <em>Ifc Flow Terminal Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcFlowTerminalType
	 * @generated
	 */
	public Adapter createIfcFlowTerminalTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcFlowTreatmentDevice <em>Ifc Flow Treatment Device</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcFlowTreatmentDevice
	 * @generated
	 */
	public Adapter createIfcFlowTreatmentDeviceAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcFlowTreatmentDeviceType <em>Ifc Flow Treatment Device Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcFlowTreatmentDeviceType
	 * @generated
	 */
	public Adapter createIfcFlowTreatmentDeviceTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcFluidFlowProperties <em>Ifc Fluid Flow Properties</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcFluidFlowProperties
	 * @generated
	 */
	public Adapter createIfcFluidFlowPropertiesAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcFontStyleType <em>Ifc Font Style Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcFontStyleType
	 * @generated
	 */
	public Adapter createIfcFontStyleTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcFontVariantType <em>Ifc Font Variant Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcFontVariantType
	 * @generated
	 */
	public Adapter createIfcFontVariantTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcFontWeightType <em>Ifc Font Weight Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcFontWeightType
	 * @generated
	 */
	public Adapter createIfcFontWeightTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcFooting <em>Ifc Footing</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcFooting
	 * @generated
	 */
	public Adapter createIfcFootingAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcFootingTypeEnumType <em>Ifc Footing Type Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcFootingTypeEnumType
	 * @generated
	 */
	public Adapter createIfcFootingTypeEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcForceMeasureType <em>Ifc Force Measure Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcForceMeasureType
	 * @generated
	 */
	public Adapter createIfcForceMeasureTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcFrequencyMeasureType <em>Ifc Frequency Measure Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcFrequencyMeasureType
	 * @generated
	 */
	public Adapter createIfcFrequencyMeasureTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcFuelProperties <em>Ifc Fuel Properties</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcFuelProperties
	 * @generated
	 */
	public Adapter createIfcFuelPropertiesAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcFurnishingElement <em>Ifc Furnishing Element</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcFurnishingElement
	 * @generated
	 */
	public Adapter createIfcFurnishingElementAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcFurnishingElementType <em>Ifc Furnishing Element Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcFurnishingElementType
	 * @generated
	 */
	public Adapter createIfcFurnishingElementTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcFurnitureStandard <em>Ifc Furniture Standard</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcFurnitureStandard
	 * @generated
	 */
	public Adapter createIfcFurnitureStandardAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcFurnitureType <em>Ifc Furniture Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcFurnitureType
	 * @generated
	 */
	public Adapter createIfcFurnitureTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcGasTerminalType <em>Ifc Gas Terminal Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcGasTerminalType
	 * @generated
	 */
	public Adapter createIfcGasTerminalTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcGasTerminalTypeEnumType <em>Ifc Gas Terminal Type Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcGasTerminalTypeEnumType
	 * @generated
	 */
	public Adapter createIfcGasTerminalTypeEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcGeneralMaterialProperties <em>Ifc General Material Properties</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcGeneralMaterialProperties
	 * @generated
	 */
	public Adapter createIfcGeneralMaterialPropertiesAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcGeneralProfileProperties <em>Ifc General Profile Properties</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcGeneralProfileProperties
	 * @generated
	 */
	public Adapter createIfcGeneralProfilePropertiesAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcGeometricCurveSet <em>Ifc Geometric Curve Set</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcGeometricCurveSet
	 * @generated
	 */
	public Adapter createIfcGeometricCurveSetAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcGeometricProjectionEnumType <em>Ifc Geometric Projection Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcGeometricProjectionEnumType
	 * @generated
	 */
	public Adapter createIfcGeometricProjectionEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcGeometricRepresentationContext <em>Ifc Geometric Representation Context</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcGeometricRepresentationContext
	 * @generated
	 */
	public Adapter createIfcGeometricRepresentationContextAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcGeometricRepresentationItem <em>Ifc Geometric Representation Item</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcGeometricRepresentationItem
	 * @generated
	 */
	public Adapter createIfcGeometricRepresentationItemAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcGeometricRepresentationSubContext <em>Ifc Geometric Representation Sub Context</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcGeometricRepresentationSubContext
	 * @generated
	 */
	public Adapter createIfcGeometricRepresentationSubContextAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcGeometricRepresentationSubContextTemp <em>Ifc Geometric Representation Sub Context Temp</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcGeometricRepresentationSubContextTemp
	 * @generated
	 */
	public Adapter createIfcGeometricRepresentationSubContextTempAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcGeometricSet <em>Ifc Geometric Set</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcGeometricSet
	 * @generated
	 */
	public Adapter createIfcGeometricSetAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcGeometricSetSelect <em>Ifc Geometric Set Select</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcGeometricSetSelect
	 * @generated
	 */
	public Adapter createIfcGeometricSetSelectAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcGloballyUniqueIdType <em>Ifc Globally Unique Id Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcGloballyUniqueIdType
	 * @generated
	 */
	public Adapter createIfcGloballyUniqueIdTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcGlobalOrLocalEnumType <em>Ifc Global Or Local Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcGlobalOrLocalEnumType
	 * @generated
	 */
	public Adapter createIfcGlobalOrLocalEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcGrid <em>Ifc Grid</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcGrid
	 * @generated
	 */
	public Adapter createIfcGridAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcGridAxis <em>Ifc Grid Axis</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcGridAxis
	 * @generated
	 */
	public Adapter createIfcGridAxisAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcGridPlacement <em>Ifc Grid Placement</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcGridPlacement
	 * @generated
	 */
	public Adapter createIfcGridPlacementAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcGroup <em>Ifc Group</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcGroup
	 * @generated
	 */
	public Adapter createIfcGroupAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcHalfSpaceSolid <em>Ifc Half Space Solid</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcHalfSpaceSolid
	 * @generated
	 */
	public Adapter createIfcHalfSpaceSolidAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcHatchLineDistanceSelect <em>Ifc Hatch Line Distance Select</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcHatchLineDistanceSelect
	 * @generated
	 */
	public Adapter createIfcHatchLineDistanceSelectAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcHeatExchangerType <em>Ifc Heat Exchanger Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcHeatExchangerType
	 * @generated
	 */
	public Adapter createIfcHeatExchangerTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcHeatExchangerTypeEnumType <em>Ifc Heat Exchanger Type Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcHeatExchangerTypeEnumType
	 * @generated
	 */
	public Adapter createIfcHeatExchangerTypeEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcHeatFluxDensityMeasureType <em>Ifc Heat Flux Density Measure Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcHeatFluxDensityMeasureType
	 * @generated
	 */
	public Adapter createIfcHeatFluxDensityMeasureTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcHeatingValueMeasureType <em>Ifc Heating Value Measure Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcHeatingValueMeasureType
	 * @generated
	 */
	public Adapter createIfcHeatingValueMeasureTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcHourInDayType <em>Ifc Hour In Day Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcHourInDayType
	 * @generated
	 */
	public Adapter createIfcHourInDayTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcHumidifierType <em>Ifc Humidifier Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcHumidifierType
	 * @generated
	 */
	public Adapter createIfcHumidifierTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcHumidifierTypeEnumType <em>Ifc Humidifier Type Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcHumidifierTypeEnumType
	 * @generated
	 */
	public Adapter createIfcHumidifierTypeEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcHygroscopicMaterialProperties <em>Ifc Hygroscopic Material Properties</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcHygroscopicMaterialProperties
	 * @generated
	 */
	public Adapter createIfcHygroscopicMaterialPropertiesAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcIdentifierType <em>Ifc Identifier Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcIdentifierType
	 * @generated
	 */
	public Adapter createIfcIdentifierTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcIlluminanceMeasureType <em>Ifc Illuminance Measure Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcIlluminanceMeasureType
	 * @generated
	 */
	public Adapter createIfcIlluminanceMeasureTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcImageTexture <em>Ifc Image Texture</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcImageTexture
	 * @generated
	 */
	public Adapter createIfcImageTextureAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcInductanceMeasureType <em>Ifc Inductance Measure Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcInductanceMeasureType
	 * @generated
	 */
	public Adapter createIfcInductanceMeasureTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcIntegerCountRateMeasureType <em>Ifc Integer Count Rate Measure Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcIntegerCountRateMeasureType
	 * @generated
	 */
	public Adapter createIfcIntegerCountRateMeasureTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcIntegerType <em>Ifc Integer Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcIntegerType
	 * @generated
	 */
	public Adapter createIfcIntegerTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcInternalOrExternalEnumType <em>Ifc Internal Or External Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcInternalOrExternalEnumType
	 * @generated
	 */
	public Adapter createIfcInternalOrExternalEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcInventory <em>Ifc Inventory</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcInventory
	 * @generated
	 */
	public Adapter createIfcInventoryAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcInventoryTypeEnumType <em>Ifc Inventory Type Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcInventoryTypeEnumType
	 * @generated
	 */
	public Adapter createIfcInventoryTypeEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcIonConcentrationMeasureType <em>Ifc Ion Concentration Measure Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcIonConcentrationMeasureType
	 * @generated
	 */
	public Adapter createIfcIonConcentrationMeasureTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcIrregularTimeSeries <em>Ifc Irregular Time Series</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcIrregularTimeSeries
	 * @generated
	 */
	public Adapter createIfcIrregularTimeSeriesAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcIrregularTimeSeriesValue <em>Ifc Irregular Time Series Value</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcIrregularTimeSeriesValue
	 * @generated
	 */
	public Adapter createIfcIrregularTimeSeriesValueAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcIShapeProfileDef <em>Ifc IShape Profile Def</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcIShapeProfileDef
	 * @generated
	 */
	public Adapter createIfcIShapeProfileDefAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcIsothermalMoistureCapacityMeasureType <em>Ifc Isothermal Moisture Capacity Measure Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcIsothermalMoistureCapacityMeasureType
	 * @generated
	 */
	public Adapter createIfcIsothermalMoistureCapacityMeasureTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcJunctionBoxType <em>Ifc Junction Box Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcJunctionBoxType
	 * @generated
	 */
	public Adapter createIfcJunctionBoxTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcJunctionBoxTypeEnumType <em>Ifc Junction Box Type Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcJunctionBoxTypeEnumType
	 * @generated
	 */
	public Adapter createIfcJunctionBoxTypeEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcKinematicViscosityMeasureType <em>Ifc Kinematic Viscosity Measure Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcKinematicViscosityMeasureType
	 * @generated
	 */
	public Adapter createIfcKinematicViscosityMeasureTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcLabelType <em>Ifc Label Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcLabelType
	 * @generated
	 */
	public Adapter createIfcLabelTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcLaborResource <em>Ifc Labor Resource</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcLaborResource
	 * @generated
	 */
	public Adapter createIfcLaborResourceAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcLampType <em>Ifc Lamp Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcLampType
	 * @generated
	 */
	public Adapter createIfcLampTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcLampTypeEnumType <em>Ifc Lamp Type Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcLampTypeEnumType
	 * @generated
	 */
	public Adapter createIfcLampTypeEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcLayeredItem <em>Ifc Layered Item</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcLayeredItem
	 * @generated
	 */
	public Adapter createIfcLayeredItemAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcLayerSetDirectionEnumType <em>Ifc Layer Set Direction Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcLayerSetDirectionEnumType
	 * @generated
	 */
	public Adapter createIfcLayerSetDirectionEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcLengthMeasureType <em>Ifc Length Measure Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcLengthMeasureType
	 * @generated
	 */
	public Adapter createIfcLengthMeasureTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcLibraryInformation <em>Ifc Library Information</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcLibraryInformation
	 * @generated
	 */
	public Adapter createIfcLibraryInformationAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcLibraryReference <em>Ifc Library Reference</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcLibraryReference
	 * @generated
	 */
	public Adapter createIfcLibraryReferenceAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcLibrarySelect <em>Ifc Library Select</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcLibrarySelect
	 * @generated
	 */
	public Adapter createIfcLibrarySelectAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcLightDistributionCurveEnumType <em>Ifc Light Distribution Curve Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcLightDistributionCurveEnumType
	 * @generated
	 */
	public Adapter createIfcLightDistributionCurveEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcLightDistributionData <em>Ifc Light Distribution Data</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcLightDistributionData
	 * @generated
	 */
	public Adapter createIfcLightDistributionDataAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcLightDistributionDataSourceSelect <em>Ifc Light Distribution Data Source Select</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcLightDistributionDataSourceSelect
	 * @generated
	 */
	public Adapter createIfcLightDistributionDataSourceSelectAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcLightEmissionSourceEnumType <em>Ifc Light Emission Source Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcLightEmissionSourceEnumType
	 * @generated
	 */
	public Adapter createIfcLightEmissionSourceEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcLightFixtureType <em>Ifc Light Fixture Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcLightFixtureType
	 * @generated
	 */
	public Adapter createIfcLightFixtureTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcLightFixtureTypeEnumType <em>Ifc Light Fixture Type Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcLightFixtureTypeEnumType
	 * @generated
	 */
	public Adapter createIfcLightFixtureTypeEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcLightIntensityDistribution <em>Ifc Light Intensity Distribution</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcLightIntensityDistribution
	 * @generated
	 */
	public Adapter createIfcLightIntensityDistributionAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcLightSource <em>Ifc Light Source</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcLightSource
	 * @generated
	 */
	public Adapter createIfcLightSourceAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcLightSourceAmbient <em>Ifc Light Source Ambient</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcLightSourceAmbient
	 * @generated
	 */
	public Adapter createIfcLightSourceAmbientAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcLightSourceDirectional <em>Ifc Light Source Directional</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcLightSourceDirectional
	 * @generated
	 */
	public Adapter createIfcLightSourceDirectionalAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcLightSourceGoniometric <em>Ifc Light Source Goniometric</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcLightSourceGoniometric
	 * @generated
	 */
	public Adapter createIfcLightSourceGoniometricAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcLightSourcePositional <em>Ifc Light Source Positional</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcLightSourcePositional
	 * @generated
	 */
	public Adapter createIfcLightSourcePositionalAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcLightSourceSpot <em>Ifc Light Source Spot</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcLightSourceSpot
	 * @generated
	 */
	public Adapter createIfcLightSourceSpotAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcLine <em>Ifc Line</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcLine
	 * @generated
	 */
	public Adapter createIfcLineAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcLinearDimension <em>Ifc Linear Dimension</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcLinearDimension
	 * @generated
	 */
	public Adapter createIfcLinearDimensionAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcLinearForceMeasureType <em>Ifc Linear Force Measure Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcLinearForceMeasureType
	 * @generated
	 */
	public Adapter createIfcLinearForceMeasureTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcLinearMomentMeasureType <em>Ifc Linear Moment Measure Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcLinearMomentMeasureType
	 * @generated
	 */
	public Adapter createIfcLinearMomentMeasureTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcLinearStiffnessMeasureType <em>Ifc Linear Stiffness Measure Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcLinearStiffnessMeasureType
	 * @generated
	 */
	public Adapter createIfcLinearStiffnessMeasureTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcLinearVelocityMeasureType <em>Ifc Linear Velocity Measure Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcLinearVelocityMeasureType
	 * @generated
	 */
	public Adapter createIfcLinearVelocityMeasureTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcLoadGroupTypeEnumType <em>Ifc Load Group Type Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcLoadGroupTypeEnumType
	 * @generated
	 */
	public Adapter createIfcLoadGroupTypeEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcLocalPlacement <em>Ifc Local Placement</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcLocalPlacement
	 * @generated
	 */
	public Adapter createIfcLocalPlacementAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcLocalTime <em>Ifc Local Time</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcLocalTime
	 * @generated
	 */
	public Adapter createIfcLocalTimeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcLogicalOperatorEnumType <em>Ifc Logical Operator Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcLogicalOperatorEnumType
	 * @generated
	 */
	public Adapter createIfcLogicalOperatorEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcLogicalType <em>Ifc Logical Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcLogicalType
	 * @generated
	 */
	public Adapter createIfcLogicalTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcLoop <em>Ifc Loop</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcLoop
	 * @generated
	 */
	public Adapter createIfcLoopAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcLShapeProfileDef <em>Ifc LShape Profile Def</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcLShapeProfileDef
	 * @generated
	 */
	public Adapter createIfcLShapeProfileDefAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcLuminousFluxMeasureType <em>Ifc Luminous Flux Measure Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcLuminousFluxMeasureType
	 * @generated
	 */
	public Adapter createIfcLuminousFluxMeasureTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcLuminousIntensityDistributionMeasureType <em>Ifc Luminous Intensity Distribution Measure Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcLuminousIntensityDistributionMeasureType
	 * @generated
	 */
	public Adapter createIfcLuminousIntensityDistributionMeasureTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcLuminousIntensityMeasureType <em>Ifc Luminous Intensity Measure Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcLuminousIntensityMeasureType
	 * @generated
	 */
	public Adapter createIfcLuminousIntensityMeasureTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcMagneticFluxDensityMeasureType <em>Ifc Magnetic Flux Density Measure Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcMagneticFluxDensityMeasureType
	 * @generated
	 */
	public Adapter createIfcMagneticFluxDensityMeasureTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcMagneticFluxMeasureType <em>Ifc Magnetic Flux Measure Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcMagneticFluxMeasureType
	 * @generated
	 */
	public Adapter createIfcMagneticFluxMeasureTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcManifoldSolidBrep <em>Ifc Manifold Solid Brep</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcManifoldSolidBrep
	 * @generated
	 */
	public Adapter createIfcManifoldSolidBrepAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcMappedItem <em>Ifc Mapped Item</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcMappedItem
	 * @generated
	 */
	public Adapter createIfcMappedItemAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcMassDensityMeasureType <em>Ifc Mass Density Measure Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcMassDensityMeasureType
	 * @generated
	 */
	public Adapter createIfcMassDensityMeasureTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcMassFlowRateMeasureType <em>Ifc Mass Flow Rate Measure Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcMassFlowRateMeasureType
	 * @generated
	 */
	public Adapter createIfcMassFlowRateMeasureTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcMassMeasureType <em>Ifc Mass Measure Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcMassMeasureType
	 * @generated
	 */
	public Adapter createIfcMassMeasureTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcMassPerLengthMeasureType <em>Ifc Mass Per Length Measure Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcMassPerLengthMeasureType
	 * @generated
	 */
	public Adapter createIfcMassPerLengthMeasureTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcMaterial <em>Ifc Material</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcMaterial
	 * @generated
	 */
	public Adapter createIfcMaterialAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcMaterialClassificationRelationship <em>Ifc Material Classification Relationship</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcMaterialClassificationRelationship
	 * @generated
	 */
	public Adapter createIfcMaterialClassificationRelationshipAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcMaterialDefinitionRepresentation <em>Ifc Material Definition Representation</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcMaterialDefinitionRepresentation
	 * @generated
	 */
	public Adapter createIfcMaterialDefinitionRepresentationAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcMaterialLayer <em>Ifc Material Layer</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcMaterialLayer
	 * @generated
	 */
	public Adapter createIfcMaterialLayerAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcMaterialLayerSet <em>Ifc Material Layer Set</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcMaterialLayerSet
	 * @generated
	 */
	public Adapter createIfcMaterialLayerSetAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcMaterialLayerSetUsage <em>Ifc Material Layer Set Usage</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcMaterialLayerSetUsage
	 * @generated
	 */
	public Adapter createIfcMaterialLayerSetUsageAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcMaterialList <em>Ifc Material List</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcMaterialList
	 * @generated
	 */
	public Adapter createIfcMaterialListAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcMaterialProperties <em>Ifc Material Properties</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcMaterialProperties
	 * @generated
	 */
	public Adapter createIfcMaterialPropertiesAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcMaterialSelect <em>Ifc Material Select</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcMaterialSelect
	 * @generated
	 */
	public Adapter createIfcMaterialSelectAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcMeasureValue <em>Ifc Measure Value</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcMeasureValue
	 * @generated
	 */
	public Adapter createIfcMeasureValueAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcMeasureWithUnit <em>Ifc Measure With Unit</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcMeasureWithUnit
	 * @generated
	 */
	public Adapter createIfcMeasureWithUnitAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcMechanicalConcreteMaterialProperties <em>Ifc Mechanical Concrete Material Properties</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcMechanicalConcreteMaterialProperties
	 * @generated
	 */
	public Adapter createIfcMechanicalConcreteMaterialPropertiesAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcMechanicalFastener <em>Ifc Mechanical Fastener</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcMechanicalFastener
	 * @generated
	 */
	public Adapter createIfcMechanicalFastenerAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcMechanicalFastenerType <em>Ifc Mechanical Fastener Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcMechanicalFastenerType
	 * @generated
	 */
	public Adapter createIfcMechanicalFastenerTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcMechanicalMaterialProperties <em>Ifc Mechanical Material Properties</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcMechanicalMaterialProperties
	 * @generated
	 */
	public Adapter createIfcMechanicalMaterialPropertiesAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcMechanicalSteelMaterialProperties <em>Ifc Mechanical Steel Material Properties</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcMechanicalSteelMaterialProperties
	 * @generated
	 */
	public Adapter createIfcMechanicalSteelMaterialPropertiesAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcMember <em>Ifc Member</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcMember
	 * @generated
	 */
	public Adapter createIfcMemberAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcMemberType <em>Ifc Member Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcMemberType
	 * @generated
	 */
	public Adapter createIfcMemberTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcMemberTypeEnumType <em>Ifc Member Type Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcMemberTypeEnumType
	 * @generated
	 */
	public Adapter createIfcMemberTypeEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcMetric <em>Ifc Metric</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcMetric
	 * @generated
	 */
	public Adapter createIfcMetricAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcMetricValueSelect <em>Ifc Metric Value Select</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcMetricValueSelect
	 * @generated
	 */
	public Adapter createIfcMetricValueSelectAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcMinuteInHourType <em>Ifc Minute In Hour Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcMinuteInHourType
	 * @generated
	 */
	public Adapter createIfcMinuteInHourTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcModulusOfElasticityMeasureType <em>Ifc Modulus Of Elasticity Measure Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcModulusOfElasticityMeasureType
	 * @generated
	 */
	public Adapter createIfcModulusOfElasticityMeasureTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcModulusOfLinearSubgradeReactionMeasureType <em>Ifc Modulus Of Linear Subgrade Reaction Measure Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcModulusOfLinearSubgradeReactionMeasureType
	 * @generated
	 */
	public Adapter createIfcModulusOfLinearSubgradeReactionMeasureTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcModulusOfRotationalSubgradeReactionMeasureType <em>Ifc Modulus Of Rotational Subgrade Reaction Measure Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcModulusOfRotationalSubgradeReactionMeasureType
	 * @generated
	 */
	public Adapter createIfcModulusOfRotationalSubgradeReactionMeasureTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcModulusOfSubgradeReactionMeasureType <em>Ifc Modulus Of Subgrade Reaction Measure Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcModulusOfSubgradeReactionMeasureType
	 * @generated
	 */
	public Adapter createIfcModulusOfSubgradeReactionMeasureTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcMoistureDiffusivityMeasureType <em>Ifc Moisture Diffusivity Measure Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcMoistureDiffusivityMeasureType
	 * @generated
	 */
	public Adapter createIfcMoistureDiffusivityMeasureTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcMolecularWeightMeasureType <em>Ifc Molecular Weight Measure Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcMolecularWeightMeasureType
	 * @generated
	 */
	public Adapter createIfcMolecularWeightMeasureTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcMomentOfInertiaMeasureType <em>Ifc Moment Of Inertia Measure Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcMomentOfInertiaMeasureType
	 * @generated
	 */
	public Adapter createIfcMomentOfInertiaMeasureTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcMonetaryMeasureType <em>Ifc Monetary Measure Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcMonetaryMeasureType
	 * @generated
	 */
	public Adapter createIfcMonetaryMeasureTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcMonetaryUnit <em>Ifc Monetary Unit</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcMonetaryUnit
	 * @generated
	 */
	public Adapter createIfcMonetaryUnitAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcMonthInYearNumberType <em>Ifc Month In Year Number Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcMonthInYearNumberType
	 * @generated
	 */
	public Adapter createIfcMonthInYearNumberTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcMotorConnectionType <em>Ifc Motor Connection Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcMotorConnectionType
	 * @generated
	 */
	public Adapter createIfcMotorConnectionTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcMotorConnectionTypeEnumType <em>Ifc Motor Connection Type Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcMotorConnectionTypeEnumType
	 * @generated
	 */
	public Adapter createIfcMotorConnectionTypeEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcMove <em>Ifc Move</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcMove
	 * @generated
	 */
	public Adapter createIfcMoveAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcNamedUnit <em>Ifc Named Unit</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcNamedUnit
	 * @generated
	 */
	public Adapter createIfcNamedUnitAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcNormalisedRatioMeasureType <em>Ifc Normalised Ratio Measure Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcNormalisedRatioMeasureType
	 * @generated
	 */
	public Adapter createIfcNormalisedRatioMeasureTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcNullStyleType <em>Ifc Null Style Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcNullStyleType
	 * @generated
	 */
	public Adapter createIfcNullStyleTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcNumericMeasureType <em>Ifc Numeric Measure Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcNumericMeasureType
	 * @generated
	 */
	public Adapter createIfcNumericMeasureTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcObject <em>Ifc Object</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcObject
	 * @generated
	 */
	public Adapter createIfcObjectAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcObjectDefinition <em>Ifc Object Definition</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcObjectDefinition
	 * @generated
	 */
	public Adapter createIfcObjectDefinitionAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcObjective <em>Ifc Objective</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcObjective
	 * @generated
	 */
	public Adapter createIfcObjectiveAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcObjectiveEnumType <em>Ifc Objective Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcObjectiveEnumType
	 * @generated
	 */
	public Adapter createIfcObjectiveEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcObjectPlacement <em>Ifc Object Placement</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcObjectPlacement
	 * @generated
	 */
	public Adapter createIfcObjectPlacementAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcObjectReferenceSelect <em>Ifc Object Reference Select</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcObjectReferenceSelect
	 * @generated
	 */
	public Adapter createIfcObjectReferenceSelectAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcObjectTypeEnumType <em>Ifc Object Type Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcObjectTypeEnumType
	 * @generated
	 */
	public Adapter createIfcObjectTypeEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcOccupant <em>Ifc Occupant</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcOccupant
	 * @generated
	 */
	public Adapter createIfcOccupantAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcOccupantTypeEnumType <em>Ifc Occupant Type Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcOccupantTypeEnumType
	 * @generated
	 */
	public Adapter createIfcOccupantTypeEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcOffsetCurve2D <em>Ifc Offset Curve2 D</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcOffsetCurve2D
	 * @generated
	 */
	public Adapter createIfcOffsetCurve2DAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcOffsetCurve3D <em>Ifc Offset Curve3 D</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcOffsetCurve3D
	 * @generated
	 */
	public Adapter createIfcOffsetCurve3DAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcOneDirectionRepeatFactor <em>Ifc One Direction Repeat Factor</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcOneDirectionRepeatFactor
	 * @generated
	 */
	public Adapter createIfcOneDirectionRepeatFactorAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcOpeningElement <em>Ifc Opening Element</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcOpeningElement
	 * @generated
	 */
	public Adapter createIfcOpeningElementAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcOpenShell <em>Ifc Open Shell</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcOpenShell
	 * @generated
	 */
	public Adapter createIfcOpenShellAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcOpticalMaterialProperties <em>Ifc Optical Material Properties</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcOpticalMaterialProperties
	 * @generated
	 */
	public Adapter createIfcOpticalMaterialPropertiesAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcOrderAction <em>Ifc Order Action</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcOrderAction
	 * @generated
	 */
	public Adapter createIfcOrderActionAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcOrganization <em>Ifc Organization</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcOrganization
	 * @generated
	 */
	public Adapter createIfcOrganizationAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcOrganizationRelationship <em>Ifc Organization Relationship</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcOrganizationRelationship
	 * @generated
	 */
	public Adapter createIfcOrganizationRelationshipAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcOrientationSelect <em>Ifc Orientation Select</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcOrientationSelect
	 * @generated
	 */
	public Adapter createIfcOrientationSelectAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcOrientedEdge <em>Ifc Oriented Edge</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcOrientedEdge
	 * @generated
	 */
	public Adapter createIfcOrientedEdgeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcOrientedEdgeTemp <em>Ifc Oriented Edge Temp</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcOrientedEdgeTemp
	 * @generated
	 */
	public Adapter createIfcOrientedEdgeTempAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcOutletType <em>Ifc Outlet Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcOutletType
	 * @generated
	 */
	public Adapter createIfcOutletTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcOutletTypeEnumType <em>Ifc Outlet Type Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcOutletTypeEnumType
	 * @generated
	 */
	public Adapter createIfcOutletTypeEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcOwnerHistory <em>Ifc Owner History</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcOwnerHistory
	 * @generated
	 */
	public Adapter createIfcOwnerHistoryAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcParameterizedProfileDef <em>Ifc Parameterized Profile Def</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcParameterizedProfileDef
	 * @generated
	 */
	public Adapter createIfcParameterizedProfileDefAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcParameterValueType <em>Ifc Parameter Value Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcParameterValueType
	 * @generated
	 */
	public Adapter createIfcParameterValueTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPath <em>Ifc Path</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPath
	 * @generated
	 */
	public Adapter createIfcPathAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPerformanceHistory <em>Ifc Performance History</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPerformanceHistory
	 * @generated
	 */
	public Adapter createIfcPerformanceHistoryAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPermeableCoveringOperationEnumType <em>Ifc Permeable Covering Operation Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPermeableCoveringOperationEnumType
	 * @generated
	 */
	public Adapter createIfcPermeableCoveringOperationEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPermeableCoveringProperties <em>Ifc Permeable Covering Properties</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPermeableCoveringProperties
	 * @generated
	 */
	public Adapter createIfcPermeableCoveringPropertiesAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPermit <em>Ifc Permit</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPermit
	 * @generated
	 */
	public Adapter createIfcPermitAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPerson <em>Ifc Person</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPerson
	 * @generated
	 */
	public Adapter createIfcPersonAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPersonAndOrganization <em>Ifc Person And Organization</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPersonAndOrganization
	 * @generated
	 */
	public Adapter createIfcPersonAndOrganizationAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPHMeasureType <em>Ifc PH Measure Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPHMeasureType
	 * @generated
	 */
	public Adapter createIfcPHMeasureTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPhysicalComplexQuantity <em>Ifc Physical Complex Quantity</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPhysicalComplexQuantity
	 * @generated
	 */
	public Adapter createIfcPhysicalComplexQuantityAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPhysicalOrVirtualEnumType <em>Ifc Physical Or Virtual Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPhysicalOrVirtualEnumType
	 * @generated
	 */
	public Adapter createIfcPhysicalOrVirtualEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPhysicalQuantity <em>Ifc Physical Quantity</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPhysicalQuantity
	 * @generated
	 */
	public Adapter createIfcPhysicalQuantityAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPhysicalSimpleQuantity <em>Ifc Physical Simple Quantity</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPhysicalSimpleQuantity
	 * @generated
	 */
	public Adapter createIfcPhysicalSimpleQuantityAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPile <em>Ifc Pile</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPile
	 * @generated
	 */
	public Adapter createIfcPileAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPileConstructionEnumType <em>Ifc Pile Construction Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPileConstructionEnumType
	 * @generated
	 */
	public Adapter createIfcPileConstructionEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPileTypeEnumType <em>Ifc Pile Type Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPileTypeEnumType
	 * @generated
	 */
	public Adapter createIfcPileTypeEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPipeFittingType <em>Ifc Pipe Fitting Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPipeFittingType
	 * @generated
	 */
	public Adapter createIfcPipeFittingTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPipeFittingTypeEnumType <em>Ifc Pipe Fitting Type Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPipeFittingTypeEnumType
	 * @generated
	 */
	public Adapter createIfcPipeFittingTypeEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPipeSegmentType <em>Ifc Pipe Segment Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPipeSegmentType
	 * @generated
	 */
	public Adapter createIfcPipeSegmentTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPipeSegmentTypeEnumType <em>Ifc Pipe Segment Type Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPipeSegmentTypeEnumType
	 * @generated
	 */
	public Adapter createIfcPipeSegmentTypeEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPixelTexture <em>Ifc Pixel Texture</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPixelTexture
	 * @generated
	 */
	public Adapter createIfcPixelTextureAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPlacement <em>Ifc Placement</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPlacement
	 * @generated
	 */
	public Adapter createIfcPlacementAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPlanarBox <em>Ifc Planar Box</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPlanarBox
	 * @generated
	 */
	public Adapter createIfcPlanarBoxAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPlanarExtent <em>Ifc Planar Extent</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPlanarExtent
	 * @generated
	 */
	public Adapter createIfcPlanarExtentAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPlanarForceMeasureType <em>Ifc Planar Force Measure Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPlanarForceMeasureType
	 * @generated
	 */
	public Adapter createIfcPlanarForceMeasureTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPlane <em>Ifc Plane</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPlane
	 * @generated
	 */
	public Adapter createIfcPlaneAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPlaneAngleMeasureType <em>Ifc Plane Angle Measure Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPlaneAngleMeasureType
	 * @generated
	 */
	public Adapter createIfcPlaneAngleMeasureTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPlate <em>Ifc Plate</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPlate
	 * @generated
	 */
	public Adapter createIfcPlateAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPlateType <em>Ifc Plate Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPlateType
	 * @generated
	 */
	public Adapter createIfcPlateTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPlateTypeEnumType <em>Ifc Plate Type Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPlateTypeEnumType
	 * @generated
	 */
	public Adapter createIfcPlateTypeEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPoint <em>Ifc Point</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPoint
	 * @generated
	 */
	public Adapter createIfcPointAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPointOnCurve <em>Ifc Point On Curve</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPointOnCurve
	 * @generated
	 */
	public Adapter createIfcPointOnCurveAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPointOnSurface <em>Ifc Point On Surface</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPointOnSurface
	 * @generated
	 */
	public Adapter createIfcPointOnSurfaceAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPointOrVertexPoint <em>Ifc Point Or Vertex Point</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPointOrVertexPoint
	 * @generated
	 */
	public Adapter createIfcPointOrVertexPointAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPolygonalBoundedHalfSpace <em>Ifc Polygonal Bounded Half Space</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPolygonalBoundedHalfSpace
	 * @generated
	 */
	public Adapter createIfcPolygonalBoundedHalfSpaceAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPolyline <em>Ifc Polyline</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPolyline
	 * @generated
	 */
	public Adapter createIfcPolylineAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPolyLoop <em>Ifc Poly Loop</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPolyLoop
	 * @generated
	 */
	public Adapter createIfcPolyLoopAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPort <em>Ifc Port</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPort
	 * @generated
	 */
	public Adapter createIfcPortAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPositiveLengthMeasureType <em>Ifc Positive Length Measure Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPositiveLengthMeasureType
	 * @generated
	 */
	public Adapter createIfcPositiveLengthMeasureTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPositivePlaneAngleMeasureType <em>Ifc Positive Plane Angle Measure Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPositivePlaneAngleMeasureType
	 * @generated
	 */
	public Adapter createIfcPositivePlaneAngleMeasureTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPositiveRatioMeasureType <em>Ifc Positive Ratio Measure Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPositiveRatioMeasureType
	 * @generated
	 */
	public Adapter createIfcPositiveRatioMeasureTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPostalAddress <em>Ifc Postal Address</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPostalAddress
	 * @generated
	 */
	public Adapter createIfcPostalAddressAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPowerMeasureType <em>Ifc Power Measure Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPowerMeasureType
	 * @generated
	 */
	public Adapter createIfcPowerMeasureTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPreDefinedColour <em>Ifc Pre Defined Colour</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPreDefinedColour
	 * @generated
	 */
	public Adapter createIfcPreDefinedColourAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPreDefinedCurveFont <em>Ifc Pre Defined Curve Font</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPreDefinedCurveFont
	 * @generated
	 */
	public Adapter createIfcPreDefinedCurveFontAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPreDefinedDimensionSymbol <em>Ifc Pre Defined Dimension Symbol</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPreDefinedDimensionSymbol
	 * @generated
	 */
	public Adapter createIfcPreDefinedDimensionSymbolAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPreDefinedItem <em>Ifc Pre Defined Item</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPreDefinedItem
	 * @generated
	 */
	public Adapter createIfcPreDefinedItemAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPreDefinedPointMarkerSymbol <em>Ifc Pre Defined Point Marker Symbol</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPreDefinedPointMarkerSymbol
	 * @generated
	 */
	public Adapter createIfcPreDefinedPointMarkerSymbolAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPreDefinedSymbol <em>Ifc Pre Defined Symbol</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPreDefinedSymbol
	 * @generated
	 */
	public Adapter createIfcPreDefinedSymbolAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPreDefinedTerminatorSymbol <em>Ifc Pre Defined Terminator Symbol</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPreDefinedTerminatorSymbol
	 * @generated
	 */
	public Adapter createIfcPreDefinedTerminatorSymbolAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPreDefinedTextFont <em>Ifc Pre Defined Text Font</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPreDefinedTextFont
	 * @generated
	 */
	public Adapter createIfcPreDefinedTextFontAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPresentableTextType <em>Ifc Presentable Text Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPresentableTextType
	 * @generated
	 */
	public Adapter createIfcPresentableTextTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPresentationLayerAssignment <em>Ifc Presentation Layer Assignment</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPresentationLayerAssignment
	 * @generated
	 */
	public Adapter createIfcPresentationLayerAssignmentAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPresentationLayerWithStyle <em>Ifc Presentation Layer With Style</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPresentationLayerWithStyle
	 * @generated
	 */
	public Adapter createIfcPresentationLayerWithStyleAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPresentationStyle <em>Ifc Presentation Style</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPresentationStyle
	 * @generated
	 */
	public Adapter createIfcPresentationStyleAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPresentationStyleAssignment <em>Ifc Presentation Style Assignment</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPresentationStyleAssignment
	 * @generated
	 */
	public Adapter createIfcPresentationStyleAssignmentAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPresentationStyleSelect <em>Ifc Presentation Style Select</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPresentationStyleSelect
	 * @generated
	 */
	public Adapter createIfcPresentationStyleSelectAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPressureMeasureType <em>Ifc Pressure Measure Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPressureMeasureType
	 * @generated
	 */
	public Adapter createIfcPressureMeasureTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcProcedure <em>Ifc Procedure</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcProcedure
	 * @generated
	 */
	public Adapter createIfcProcedureAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcProcedureTypeEnumType <em>Ifc Procedure Type Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcProcedureTypeEnumType
	 * @generated
	 */
	public Adapter createIfcProcedureTypeEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcProcess <em>Ifc Process</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcProcess
	 * @generated
	 */
	public Adapter createIfcProcessAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcProduct <em>Ifc Product</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcProduct
	 * @generated
	 */
	public Adapter createIfcProductAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcProductDefinitionShape <em>Ifc Product Definition Shape</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcProductDefinitionShape
	 * @generated
	 */
	public Adapter createIfcProductDefinitionShapeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcProductRepresentation <em>Ifc Product Representation</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcProductRepresentation
	 * @generated
	 */
	public Adapter createIfcProductRepresentationAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcProductsOfCombustionProperties <em>Ifc Products Of Combustion Properties</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcProductsOfCombustionProperties
	 * @generated
	 */
	public Adapter createIfcProductsOfCombustionPropertiesAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcProfileDef <em>Ifc Profile Def</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcProfileDef
	 * @generated
	 */
	public Adapter createIfcProfileDefAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcProfileProperties <em>Ifc Profile Properties</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcProfileProperties
	 * @generated
	 */
	public Adapter createIfcProfilePropertiesAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcProfileTypeEnumType <em>Ifc Profile Type Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcProfileTypeEnumType
	 * @generated
	 */
	public Adapter createIfcProfileTypeEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcProject <em>Ifc Project</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcProject
	 * @generated
	 */
	public Adapter createIfcProjectAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcProjectedOrTrueLengthEnumType <em>Ifc Projected Or True Length Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcProjectedOrTrueLengthEnumType
	 * @generated
	 */
	public Adapter createIfcProjectedOrTrueLengthEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcProjectionCurve <em>Ifc Projection Curve</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcProjectionCurve
	 * @generated
	 */
	public Adapter createIfcProjectionCurveAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcProjectionElement <em>Ifc Projection Element</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcProjectionElement
	 * @generated
	 */
	public Adapter createIfcProjectionElementAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcProjectOrder <em>Ifc Project Order</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcProjectOrder
	 * @generated
	 */
	public Adapter createIfcProjectOrderAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcProjectOrderRecord <em>Ifc Project Order Record</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcProjectOrderRecord
	 * @generated
	 */
	public Adapter createIfcProjectOrderRecordAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcProjectOrderRecordTypeEnumType <em>Ifc Project Order Record Type Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcProjectOrderRecordTypeEnumType
	 * @generated
	 */
	public Adapter createIfcProjectOrderRecordTypeEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcProjectOrderTypeEnumType <em>Ifc Project Order Type Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcProjectOrderTypeEnumType
	 * @generated
	 */
	public Adapter createIfcProjectOrderTypeEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcProperty <em>Ifc Property</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcProperty
	 * @generated
	 */
	public Adapter createIfcPropertyAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPropertyBoundedValue <em>Ifc Property Bounded Value</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPropertyBoundedValue
	 * @generated
	 */
	public Adapter createIfcPropertyBoundedValueAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPropertyConstraintRelationship <em>Ifc Property Constraint Relationship</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPropertyConstraintRelationship
	 * @generated
	 */
	public Adapter createIfcPropertyConstraintRelationshipAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPropertyDefinition <em>Ifc Property Definition</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPropertyDefinition
	 * @generated
	 */
	public Adapter createIfcPropertyDefinitionAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPropertyDependencyRelationship <em>Ifc Property Dependency Relationship</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPropertyDependencyRelationship
	 * @generated
	 */
	public Adapter createIfcPropertyDependencyRelationshipAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPropertyEnumeratedValue <em>Ifc Property Enumerated Value</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPropertyEnumeratedValue
	 * @generated
	 */
	public Adapter createIfcPropertyEnumeratedValueAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPropertyEnumeration <em>Ifc Property Enumeration</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPropertyEnumeration
	 * @generated
	 */
	public Adapter createIfcPropertyEnumerationAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPropertyListValue <em>Ifc Property List Value</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPropertyListValue
	 * @generated
	 */
	public Adapter createIfcPropertyListValueAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPropertyReferenceValue <em>Ifc Property Reference Value</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPropertyReferenceValue
	 * @generated
	 */
	public Adapter createIfcPropertyReferenceValueAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPropertySet <em>Ifc Property Set</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPropertySet
	 * @generated
	 */
	public Adapter createIfcPropertySetAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPropertySetDefinition <em>Ifc Property Set Definition</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPropertySetDefinition
	 * @generated
	 */
	public Adapter createIfcPropertySetDefinitionAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPropertySingleValue <em>Ifc Property Single Value</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPropertySingleValue
	 * @generated
	 */
	public Adapter createIfcPropertySingleValueAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPropertySourceEnumType <em>Ifc Property Source Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPropertySourceEnumType
	 * @generated
	 */
	public Adapter createIfcPropertySourceEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPropertyTableValue <em>Ifc Property Table Value</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPropertyTableValue
	 * @generated
	 */
	public Adapter createIfcPropertyTableValueAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcProtectiveDeviceType <em>Ifc Protective Device Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcProtectiveDeviceType
	 * @generated
	 */
	public Adapter createIfcProtectiveDeviceTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcProtectiveDeviceTypeEnumType <em>Ifc Protective Device Type Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcProtectiveDeviceTypeEnumType
	 * @generated
	 */
	public Adapter createIfcProtectiveDeviceTypeEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcProxy <em>Ifc Proxy</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcProxy
	 * @generated
	 */
	public Adapter createIfcProxyAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPumpType <em>Ifc Pump Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPumpType
	 * @generated
	 */
	public Adapter createIfcPumpTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPumpTypeEnumType <em>Ifc Pump Type Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcPumpTypeEnumType
	 * @generated
	 */
	public Adapter createIfcPumpTypeEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcQuantityArea <em>Ifc Quantity Area</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcQuantityArea
	 * @generated
	 */
	public Adapter createIfcQuantityAreaAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcQuantityCount <em>Ifc Quantity Count</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcQuantityCount
	 * @generated
	 */
	public Adapter createIfcQuantityCountAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcQuantityLength <em>Ifc Quantity Length</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcQuantityLength
	 * @generated
	 */
	public Adapter createIfcQuantityLengthAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcQuantityTime <em>Ifc Quantity Time</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcQuantityTime
	 * @generated
	 */
	public Adapter createIfcQuantityTimeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcQuantityVolume <em>Ifc Quantity Volume</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcQuantityVolume
	 * @generated
	 */
	public Adapter createIfcQuantityVolumeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcQuantityWeight <em>Ifc Quantity Weight</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcQuantityWeight
	 * @generated
	 */
	public Adapter createIfcQuantityWeightAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRadioActivityMeasureType <em>Ifc Radio Activity Measure Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRadioActivityMeasureType
	 * @generated
	 */
	public Adapter createIfcRadioActivityMeasureTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRadiusDimension <em>Ifc Radius Dimension</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRadiusDimension
	 * @generated
	 */
	public Adapter createIfcRadiusDimensionAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRailing <em>Ifc Railing</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRailing
	 * @generated
	 */
	public Adapter createIfcRailingAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRailingType <em>Ifc Railing Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRailingType
	 * @generated
	 */
	public Adapter createIfcRailingTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRailingTypeEnumType <em>Ifc Railing Type Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRailingTypeEnumType
	 * @generated
	 */
	public Adapter createIfcRailingTypeEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRamp <em>Ifc Ramp</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRamp
	 * @generated
	 */
	public Adapter createIfcRampAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRampFlight <em>Ifc Ramp Flight</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRampFlight
	 * @generated
	 */
	public Adapter createIfcRampFlightAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRampFlightType <em>Ifc Ramp Flight Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRampFlightType
	 * @generated
	 */
	public Adapter createIfcRampFlightTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRampFlightTypeEnumType <em>Ifc Ramp Flight Type Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRampFlightTypeEnumType
	 * @generated
	 */
	public Adapter createIfcRampFlightTypeEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRampTypeEnumType <em>Ifc Ramp Type Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRampTypeEnumType
	 * @generated
	 */
	public Adapter createIfcRampTypeEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRatioMeasureType <em>Ifc Ratio Measure Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRatioMeasureType
	 * @generated
	 */
	public Adapter createIfcRatioMeasureTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRationalBezierCurve <em>Ifc Rational Bezier Curve</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRationalBezierCurve
	 * @generated
	 */
	public Adapter createIfcRationalBezierCurveAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRealType <em>Ifc Real Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRealType
	 * @generated
	 */
	public Adapter createIfcRealTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRectangleHollowProfileDef <em>Ifc Rectangle Hollow Profile Def</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRectangleHollowProfileDef
	 * @generated
	 */
	public Adapter createIfcRectangleHollowProfileDefAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRectangleProfileDef <em>Ifc Rectangle Profile Def</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRectangleProfileDef
	 * @generated
	 */
	public Adapter createIfcRectangleProfileDefAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRectangularPyramid <em>Ifc Rectangular Pyramid</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRectangularPyramid
	 * @generated
	 */
	public Adapter createIfcRectangularPyramidAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRectangularTrimmedSurface <em>Ifc Rectangular Trimmed Surface</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRectangularTrimmedSurface
	 * @generated
	 */
	public Adapter createIfcRectangularTrimmedSurfaceAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcReferencesValueDocument <em>Ifc References Value Document</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcReferencesValueDocument
	 * @generated
	 */
	public Adapter createIfcReferencesValueDocumentAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcReflectanceMethodEnumType <em>Ifc Reflectance Method Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcReflectanceMethodEnumType
	 * @generated
	 */
	public Adapter createIfcReflectanceMethodEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRegularTimeSeries <em>Ifc Regular Time Series</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRegularTimeSeries
	 * @generated
	 */
	public Adapter createIfcRegularTimeSeriesAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcReinforcementBarProperties <em>Ifc Reinforcement Bar Properties</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcReinforcementBarProperties
	 * @generated
	 */
	public Adapter createIfcReinforcementBarPropertiesAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcReinforcementDefinitionProperties <em>Ifc Reinforcement Definition Properties</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcReinforcementDefinitionProperties
	 * @generated
	 */
	public Adapter createIfcReinforcementDefinitionPropertiesAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcReinforcingBar <em>Ifc Reinforcing Bar</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcReinforcingBar
	 * @generated
	 */
	public Adapter createIfcReinforcingBarAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcReinforcingBarRoleEnumType <em>Ifc Reinforcing Bar Role Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcReinforcingBarRoleEnumType
	 * @generated
	 */
	public Adapter createIfcReinforcingBarRoleEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcReinforcingBarSurfaceEnumType <em>Ifc Reinforcing Bar Surface Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcReinforcingBarSurfaceEnumType
	 * @generated
	 */
	public Adapter createIfcReinforcingBarSurfaceEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcReinforcingElement <em>Ifc Reinforcing Element</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcReinforcingElement
	 * @generated
	 */
	public Adapter createIfcReinforcingElementAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcReinforcingMesh <em>Ifc Reinforcing Mesh</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcReinforcingMesh
	 * @generated
	 */
	public Adapter createIfcReinforcingMeshAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRelAggregates <em>Ifc Rel Aggregates</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRelAggregates
	 * @generated
	 */
	public Adapter createIfcRelAggregatesAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRelAssigns <em>Ifc Rel Assigns</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRelAssigns
	 * @generated
	 */
	public Adapter createIfcRelAssignsAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRelAssignsTasks <em>Ifc Rel Assigns Tasks</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRelAssignsTasks
	 * @generated
	 */
	public Adapter createIfcRelAssignsTasksAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRelAssignsToActor <em>Ifc Rel Assigns To Actor</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRelAssignsToActor
	 * @generated
	 */
	public Adapter createIfcRelAssignsToActorAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRelAssignsToControl <em>Ifc Rel Assigns To Control</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRelAssignsToControl
	 * @generated
	 */
	public Adapter createIfcRelAssignsToControlAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRelAssignsToGroup <em>Ifc Rel Assigns To Group</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRelAssignsToGroup
	 * @generated
	 */
	public Adapter createIfcRelAssignsToGroupAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRelAssignsToProcess <em>Ifc Rel Assigns To Process</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRelAssignsToProcess
	 * @generated
	 */
	public Adapter createIfcRelAssignsToProcessAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRelAssignsToProduct <em>Ifc Rel Assigns To Product</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRelAssignsToProduct
	 * @generated
	 */
	public Adapter createIfcRelAssignsToProductAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRelAssignsToProjectOrder <em>Ifc Rel Assigns To Project Order</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRelAssignsToProjectOrder
	 * @generated
	 */
	public Adapter createIfcRelAssignsToProjectOrderAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRelAssignsToResource <em>Ifc Rel Assigns To Resource</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRelAssignsToResource
	 * @generated
	 */
	public Adapter createIfcRelAssignsToResourceAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRelAssociates <em>Ifc Rel Associates</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRelAssociates
	 * @generated
	 */
	public Adapter createIfcRelAssociatesAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRelAssociatesAppliedValue <em>Ifc Rel Associates Applied Value</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRelAssociatesAppliedValue
	 * @generated
	 */
	public Adapter createIfcRelAssociatesAppliedValueAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRelAssociatesApproval <em>Ifc Rel Associates Approval</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRelAssociatesApproval
	 * @generated
	 */
	public Adapter createIfcRelAssociatesApprovalAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRelAssociatesClassification <em>Ifc Rel Associates Classification</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRelAssociatesClassification
	 * @generated
	 */
	public Adapter createIfcRelAssociatesClassificationAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRelAssociatesConstraint <em>Ifc Rel Associates Constraint</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRelAssociatesConstraint
	 * @generated
	 */
	public Adapter createIfcRelAssociatesConstraintAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRelAssociatesDocument <em>Ifc Rel Associates Document</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRelAssociatesDocument
	 * @generated
	 */
	public Adapter createIfcRelAssociatesDocumentAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRelAssociatesLibrary <em>Ifc Rel Associates Library</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRelAssociatesLibrary
	 * @generated
	 */
	public Adapter createIfcRelAssociatesLibraryAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRelAssociatesMaterial <em>Ifc Rel Associates Material</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRelAssociatesMaterial
	 * @generated
	 */
	public Adapter createIfcRelAssociatesMaterialAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRelAssociatesProfileProperties <em>Ifc Rel Associates Profile Properties</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRelAssociatesProfileProperties
	 * @generated
	 */
	public Adapter createIfcRelAssociatesProfilePropertiesAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRelationship <em>Ifc Relationship</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRelationship
	 * @generated
	 */
	public Adapter createIfcRelationshipAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRelaxation <em>Ifc Relaxation</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRelaxation
	 * @generated
	 */
	public Adapter createIfcRelaxationAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRelConnects <em>Ifc Rel Connects</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRelConnects
	 * @generated
	 */
	public Adapter createIfcRelConnectsAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRelConnectsElements <em>Ifc Rel Connects Elements</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRelConnectsElements
	 * @generated
	 */
	public Adapter createIfcRelConnectsElementsAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRelConnectsPathElements <em>Ifc Rel Connects Path Elements</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRelConnectsPathElements
	 * @generated
	 */
	public Adapter createIfcRelConnectsPathElementsAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRelConnectsPorts <em>Ifc Rel Connects Ports</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRelConnectsPorts
	 * @generated
	 */
	public Adapter createIfcRelConnectsPortsAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRelConnectsPortToElement <em>Ifc Rel Connects Port To Element</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRelConnectsPortToElement
	 * @generated
	 */
	public Adapter createIfcRelConnectsPortToElementAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRelConnectsStructuralActivity <em>Ifc Rel Connects Structural Activity</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRelConnectsStructuralActivity
	 * @generated
	 */
	public Adapter createIfcRelConnectsStructuralActivityAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRelConnectsStructuralElement <em>Ifc Rel Connects Structural Element</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRelConnectsStructuralElement
	 * @generated
	 */
	public Adapter createIfcRelConnectsStructuralElementAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRelConnectsStructuralMember <em>Ifc Rel Connects Structural Member</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRelConnectsStructuralMember
	 * @generated
	 */
	public Adapter createIfcRelConnectsStructuralMemberAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRelConnectsWithEccentricity <em>Ifc Rel Connects With Eccentricity</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRelConnectsWithEccentricity
	 * @generated
	 */
	public Adapter createIfcRelConnectsWithEccentricityAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRelConnectsWithRealizingElements <em>Ifc Rel Connects With Realizing Elements</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRelConnectsWithRealizingElements
	 * @generated
	 */
	public Adapter createIfcRelConnectsWithRealizingElementsAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRelContainedInSpatialStructure <em>Ifc Rel Contained In Spatial Structure</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRelContainedInSpatialStructure
	 * @generated
	 */
	public Adapter createIfcRelContainedInSpatialStructureAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRelCoversBldgElements <em>Ifc Rel Covers Bldg Elements</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRelCoversBldgElements
	 * @generated
	 */
	public Adapter createIfcRelCoversBldgElementsAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRelCoversSpaces <em>Ifc Rel Covers Spaces</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRelCoversSpaces
	 * @generated
	 */
	public Adapter createIfcRelCoversSpacesAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRelDecomposes <em>Ifc Rel Decomposes</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRelDecomposes
	 * @generated
	 */
	public Adapter createIfcRelDecomposesAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRelDefines <em>Ifc Rel Defines</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRelDefines
	 * @generated
	 */
	public Adapter createIfcRelDefinesAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRelDefinesByProperties <em>Ifc Rel Defines By Properties</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRelDefinesByProperties
	 * @generated
	 */
	public Adapter createIfcRelDefinesByPropertiesAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRelDefinesByType <em>Ifc Rel Defines By Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRelDefinesByType
	 * @generated
	 */
	public Adapter createIfcRelDefinesByTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRelFillsElement <em>Ifc Rel Fills Element</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRelFillsElement
	 * @generated
	 */
	public Adapter createIfcRelFillsElementAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRelFlowControlElements <em>Ifc Rel Flow Control Elements</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRelFlowControlElements
	 * @generated
	 */
	public Adapter createIfcRelFlowControlElementsAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRelInteractionRequirements <em>Ifc Rel Interaction Requirements</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRelInteractionRequirements
	 * @generated
	 */
	public Adapter createIfcRelInteractionRequirementsAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRelNests <em>Ifc Rel Nests</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRelNests
	 * @generated
	 */
	public Adapter createIfcRelNestsAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRelOccupiesSpaces <em>Ifc Rel Occupies Spaces</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRelOccupiesSpaces
	 * @generated
	 */
	public Adapter createIfcRelOccupiesSpacesAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRelOverridesProperties <em>Ifc Rel Overrides Properties</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRelOverridesProperties
	 * @generated
	 */
	public Adapter createIfcRelOverridesPropertiesAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRelProjectsElement <em>Ifc Rel Projects Element</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRelProjectsElement
	 * @generated
	 */
	public Adapter createIfcRelProjectsElementAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRelReferencedInSpatialStructure <em>Ifc Rel Referenced In Spatial Structure</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRelReferencedInSpatialStructure
	 * @generated
	 */
	public Adapter createIfcRelReferencedInSpatialStructureAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRelSchedulesCostItems <em>Ifc Rel Schedules Cost Items</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRelSchedulesCostItems
	 * @generated
	 */
	public Adapter createIfcRelSchedulesCostItemsAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRelSequence <em>Ifc Rel Sequence</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRelSequence
	 * @generated
	 */
	public Adapter createIfcRelSequenceAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRelServicesBuildings <em>Ifc Rel Services Buildings</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRelServicesBuildings
	 * @generated
	 */
	public Adapter createIfcRelServicesBuildingsAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRelSpaceBoundary <em>Ifc Rel Space Boundary</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRelSpaceBoundary
	 * @generated
	 */
	public Adapter createIfcRelSpaceBoundaryAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRelVoidsElement <em>Ifc Rel Voids Element</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRelVoidsElement
	 * @generated
	 */
	public Adapter createIfcRelVoidsElementAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRepresentation <em>Ifc Representation</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRepresentation
	 * @generated
	 */
	public Adapter createIfcRepresentationAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRepresentationContext <em>Ifc Representation Context</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRepresentationContext
	 * @generated
	 */
	public Adapter createIfcRepresentationContextAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRepresentationItem <em>Ifc Representation Item</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRepresentationItem
	 * @generated
	 */
	public Adapter createIfcRepresentationItemAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRepresentationMap <em>Ifc Representation Map</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRepresentationMap
	 * @generated
	 */
	public Adapter createIfcRepresentationMapAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcResource <em>Ifc Resource</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcResource
	 * @generated
	 */
	public Adapter createIfcResourceAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcResourceConsumptionEnumType <em>Ifc Resource Consumption Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcResourceConsumptionEnumType
	 * @generated
	 */
	public Adapter createIfcResourceConsumptionEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRevolvedAreaSolid <em>Ifc Revolved Area Solid</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRevolvedAreaSolid
	 * @generated
	 */
	public Adapter createIfcRevolvedAreaSolidAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRibPlateDirectionEnumType <em>Ifc Rib Plate Direction Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRibPlateDirectionEnumType
	 * @generated
	 */
	public Adapter createIfcRibPlateDirectionEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRibPlateProfileProperties <em>Ifc Rib Plate Profile Properties</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRibPlateProfileProperties
	 * @generated
	 */
	public Adapter createIfcRibPlateProfilePropertiesAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRightCircularCone <em>Ifc Right Circular Cone</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRightCircularCone
	 * @generated
	 */
	public Adapter createIfcRightCircularConeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRightCircularCylinder <em>Ifc Right Circular Cylinder</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRightCircularCylinder
	 * @generated
	 */
	public Adapter createIfcRightCircularCylinderAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRoleEnumType <em>Ifc Role Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRoleEnumType
	 * @generated
	 */
	public Adapter createIfcRoleEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRoof <em>Ifc Roof</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRoof
	 * @generated
	 */
	public Adapter createIfcRoofAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRoofTypeEnumType <em>Ifc Roof Type Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRoofTypeEnumType
	 * @generated
	 */
	public Adapter createIfcRoofTypeEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRoot <em>Ifc Root</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRoot
	 * @generated
	 */
	public Adapter createIfcRootAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRotationalFrequencyMeasureType <em>Ifc Rotational Frequency Measure Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRotationalFrequencyMeasureType
	 * @generated
	 */
	public Adapter createIfcRotationalFrequencyMeasureTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRotationalMassMeasureType <em>Ifc Rotational Mass Measure Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRotationalMassMeasureType
	 * @generated
	 */
	public Adapter createIfcRotationalMassMeasureTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRotationalStiffnessMeasureType <em>Ifc Rotational Stiffness Measure Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRotationalStiffnessMeasureType
	 * @generated
	 */
	public Adapter createIfcRotationalStiffnessMeasureTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRoundedEdgeFeature <em>Ifc Rounded Edge Feature</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRoundedEdgeFeature
	 * @generated
	 */
	public Adapter createIfcRoundedEdgeFeatureAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRoundedRectangleProfileDef <em>Ifc Rounded Rectangle Profile Def</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcRoundedRectangleProfileDef
	 * @generated
	 */
	public Adapter createIfcRoundedRectangleProfileDefAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSanitaryTerminalType <em>Ifc Sanitary Terminal Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSanitaryTerminalType
	 * @generated
	 */
	public Adapter createIfcSanitaryTerminalTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSanitaryTerminalTypeEnumType <em>Ifc Sanitary Terminal Type Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSanitaryTerminalTypeEnumType
	 * @generated
	 */
	public Adapter createIfcSanitaryTerminalTypeEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcScheduleTimeControl <em>Ifc Schedule Time Control</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcScheduleTimeControl
	 * @generated
	 */
	public Adapter createIfcScheduleTimeControlAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSecondInMinuteType <em>Ifc Second In Minute Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSecondInMinuteType
	 * @generated
	 */
	public Adapter createIfcSecondInMinuteTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSectionalAreaIntegralMeasureType <em>Ifc Sectional Area Integral Measure Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSectionalAreaIntegralMeasureType
	 * @generated
	 */
	public Adapter createIfcSectionalAreaIntegralMeasureTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSectionedSpine <em>Ifc Sectioned Spine</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSectionedSpine
	 * @generated
	 */
	public Adapter createIfcSectionedSpineAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSectionModulusMeasureType <em>Ifc Section Modulus Measure Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSectionModulusMeasureType
	 * @generated
	 */
	public Adapter createIfcSectionModulusMeasureTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSectionProperties <em>Ifc Section Properties</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSectionProperties
	 * @generated
	 */
	public Adapter createIfcSectionPropertiesAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSectionReinforcementProperties <em>Ifc Section Reinforcement Properties</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSectionReinforcementProperties
	 * @generated
	 */
	public Adapter createIfcSectionReinforcementPropertiesAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSectionTypeEnumType <em>Ifc Section Type Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSectionTypeEnumType
	 * @generated
	 */
	public Adapter createIfcSectionTypeEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSensorType <em>Ifc Sensor Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSensorType
	 * @generated
	 */
	public Adapter createIfcSensorTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSensorTypeEnumType <em>Ifc Sensor Type Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSensorTypeEnumType
	 * @generated
	 */
	public Adapter createIfcSensorTypeEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSequenceEnumType <em>Ifc Sequence Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSequenceEnumType
	 * @generated
	 */
	public Adapter createIfcSequenceEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcServiceLife <em>Ifc Service Life</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcServiceLife
	 * @generated
	 */
	public Adapter createIfcServiceLifeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcServiceLifeFactor <em>Ifc Service Life Factor</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcServiceLifeFactor
	 * @generated
	 */
	public Adapter createIfcServiceLifeFactorAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcServiceLifeFactorTypeEnumType <em>Ifc Service Life Factor Type Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcServiceLifeFactorTypeEnumType
	 * @generated
	 */
	public Adapter createIfcServiceLifeFactorTypeEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcServiceLifeTypeEnumType <em>Ifc Service Life Type Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcServiceLifeTypeEnumType
	 * @generated
	 */
	public Adapter createIfcServiceLifeTypeEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcShapeAspect <em>Ifc Shape Aspect</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcShapeAspect
	 * @generated
	 */
	public Adapter createIfcShapeAspectAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcShapeModel <em>Ifc Shape Model</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcShapeModel
	 * @generated
	 */
	public Adapter createIfcShapeModelAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcShapeRepresentation <em>Ifc Shape Representation</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcShapeRepresentation
	 * @generated
	 */
	public Adapter createIfcShapeRepresentationAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcShearModulusMeasureType <em>Ifc Shear Modulus Measure Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcShearModulusMeasureType
	 * @generated
	 */
	public Adapter createIfcShearModulusMeasureTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcShell <em>Ifc Shell</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcShell
	 * @generated
	 */
	public Adapter createIfcShellAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcShellBasedSurfaceModel <em>Ifc Shell Based Surface Model</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcShellBasedSurfaceModel
	 * @generated
	 */
	public Adapter createIfcShellBasedSurfaceModelAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSimpleProperty <em>Ifc Simple Property</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSimpleProperty
	 * @generated
	 */
	public Adapter createIfcSimplePropertyAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSimpleValue <em>Ifc Simple Value</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSimpleValue
	 * @generated
	 */
	public Adapter createIfcSimpleValueAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSIPrefixType <em>Ifc SI Prefix Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSIPrefixType
	 * @generated
	 */
	public Adapter createIfcSIPrefixTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSite <em>Ifc Site</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSite
	 * @generated
	 */
	public Adapter createIfcSiteAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSIUnit <em>Ifc SI Unit</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSIUnit
	 * @generated
	 */
	public Adapter createIfcSIUnitAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSIUnitNameType <em>Ifc SI Unit Name Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSIUnitNameType
	 * @generated
	 */
	public Adapter createIfcSIUnitNameTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSIUnitTemp <em>Ifc SI Unit Temp</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSIUnitTemp
	 * @generated
	 */
	public Adapter createIfcSIUnitTempAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSizeSelect <em>Ifc Size Select</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSizeSelect
	 * @generated
	 */
	public Adapter createIfcSizeSelectAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSlab <em>Ifc Slab</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSlab
	 * @generated
	 */
	public Adapter createIfcSlabAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSlabType <em>Ifc Slab Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSlabType
	 * @generated
	 */
	public Adapter createIfcSlabTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSlabTypeEnumType <em>Ifc Slab Type Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSlabTypeEnumType
	 * @generated
	 */
	public Adapter createIfcSlabTypeEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSlippageConnectionCondition <em>Ifc Slippage Connection Condition</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSlippageConnectionCondition
	 * @generated
	 */
	public Adapter createIfcSlippageConnectionConditionAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSolidAngleMeasureType <em>Ifc Solid Angle Measure Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSolidAngleMeasureType
	 * @generated
	 */
	public Adapter createIfcSolidAngleMeasureTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSolidModel <em>Ifc Solid Model</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSolidModel
	 * @generated
	 */
	public Adapter createIfcSolidModelAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSoundPowerMeasureType <em>Ifc Sound Power Measure Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSoundPowerMeasureType
	 * @generated
	 */
	public Adapter createIfcSoundPowerMeasureTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSoundPressureMeasureType <em>Ifc Sound Pressure Measure Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSoundPressureMeasureType
	 * @generated
	 */
	public Adapter createIfcSoundPressureMeasureTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSoundProperties <em>Ifc Sound Properties</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSoundProperties
	 * @generated
	 */
	public Adapter createIfcSoundPropertiesAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSoundScaleEnumType <em>Ifc Sound Scale Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSoundScaleEnumType
	 * @generated
	 */
	public Adapter createIfcSoundScaleEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSoundValue <em>Ifc Sound Value</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSoundValue
	 * @generated
	 */
	public Adapter createIfcSoundValueAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSpace <em>Ifc Space</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSpace
	 * @generated
	 */
	public Adapter createIfcSpaceAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSpaceHeaterType <em>Ifc Space Heater Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSpaceHeaterType
	 * @generated
	 */
	public Adapter createIfcSpaceHeaterTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSpaceHeaterTypeEnumType <em>Ifc Space Heater Type Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSpaceHeaterTypeEnumType
	 * @generated
	 */
	public Adapter createIfcSpaceHeaterTypeEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSpaceProgram <em>Ifc Space Program</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSpaceProgram
	 * @generated
	 */
	public Adapter createIfcSpaceProgramAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSpaceThermalLoadProperties <em>Ifc Space Thermal Load Properties</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSpaceThermalLoadProperties
	 * @generated
	 */
	public Adapter createIfcSpaceThermalLoadPropertiesAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSpaceType <em>Ifc Space Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSpaceType
	 * @generated
	 */
	public Adapter createIfcSpaceTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSpaceTypeEnumType <em>Ifc Space Type Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSpaceTypeEnumType
	 * @generated
	 */
	public Adapter createIfcSpaceTypeEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSpatialStructureElement <em>Ifc Spatial Structure Element</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSpatialStructureElement
	 * @generated
	 */
	public Adapter createIfcSpatialStructureElementAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSpatialStructureElementType <em>Ifc Spatial Structure Element Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSpatialStructureElementType
	 * @generated
	 */
	public Adapter createIfcSpatialStructureElementTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSpecificHeatCapacityMeasureType <em>Ifc Specific Heat Capacity Measure Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSpecificHeatCapacityMeasureType
	 * @generated
	 */
	public Adapter createIfcSpecificHeatCapacityMeasureTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSpecularExponentType <em>Ifc Specular Exponent Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSpecularExponentType
	 * @generated
	 */
	public Adapter createIfcSpecularExponentTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSpecularHighlightSelect <em>Ifc Specular Highlight Select</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSpecularHighlightSelect
	 * @generated
	 */
	public Adapter createIfcSpecularHighlightSelectAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSpecularRoughnessType <em>Ifc Specular Roughness Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSpecularRoughnessType
	 * @generated
	 */
	public Adapter createIfcSpecularRoughnessTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSphere <em>Ifc Sphere</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSphere
	 * @generated
	 */
	public Adapter createIfcSphereAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcStackTerminalType <em>Ifc Stack Terminal Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcStackTerminalType
	 * @generated
	 */
	public Adapter createIfcStackTerminalTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcStackTerminalTypeEnumType <em>Ifc Stack Terminal Type Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcStackTerminalTypeEnumType
	 * @generated
	 */
	public Adapter createIfcStackTerminalTypeEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcStair <em>Ifc Stair</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcStair
	 * @generated
	 */
	public Adapter createIfcStairAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcStairFlight <em>Ifc Stair Flight</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcStairFlight
	 * @generated
	 */
	public Adapter createIfcStairFlightAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcStairFlightType <em>Ifc Stair Flight Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcStairFlightType
	 * @generated
	 */
	public Adapter createIfcStairFlightTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcStairFlightTypeEnumType <em>Ifc Stair Flight Type Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcStairFlightTypeEnumType
	 * @generated
	 */
	public Adapter createIfcStairFlightTypeEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcStairTypeEnumType <em>Ifc Stair Type Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcStairTypeEnumType
	 * @generated
	 */
	public Adapter createIfcStairTypeEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcStateEnumType <em>Ifc State Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcStateEnumType
	 * @generated
	 */
	public Adapter createIfcStateEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcStructuralAction <em>Ifc Structural Action</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcStructuralAction
	 * @generated
	 */
	public Adapter createIfcStructuralActionAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcStructuralActivity <em>Ifc Structural Activity</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcStructuralActivity
	 * @generated
	 */
	public Adapter createIfcStructuralActivityAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcStructuralActivityAssignmentSelect <em>Ifc Structural Activity Assignment Select</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcStructuralActivityAssignmentSelect
	 * @generated
	 */
	public Adapter createIfcStructuralActivityAssignmentSelectAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcStructuralAnalysisModel <em>Ifc Structural Analysis Model</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcStructuralAnalysisModel
	 * @generated
	 */
	public Adapter createIfcStructuralAnalysisModelAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcStructuralConnection <em>Ifc Structural Connection</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcStructuralConnection
	 * @generated
	 */
	public Adapter createIfcStructuralConnectionAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcStructuralConnectionCondition <em>Ifc Structural Connection Condition</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcStructuralConnectionCondition
	 * @generated
	 */
	public Adapter createIfcStructuralConnectionConditionAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcStructuralCurveConnection <em>Ifc Structural Curve Connection</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcStructuralCurveConnection
	 * @generated
	 */
	public Adapter createIfcStructuralCurveConnectionAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcStructuralCurveMember <em>Ifc Structural Curve Member</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcStructuralCurveMember
	 * @generated
	 */
	public Adapter createIfcStructuralCurveMemberAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcStructuralCurveMemberVarying <em>Ifc Structural Curve Member Varying</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcStructuralCurveMemberVarying
	 * @generated
	 */
	public Adapter createIfcStructuralCurveMemberVaryingAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcStructuralCurveTypeEnumType <em>Ifc Structural Curve Type Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcStructuralCurveTypeEnumType
	 * @generated
	 */
	public Adapter createIfcStructuralCurveTypeEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcStructuralItem <em>Ifc Structural Item</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcStructuralItem
	 * @generated
	 */
	public Adapter createIfcStructuralItemAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcStructuralLinearAction <em>Ifc Structural Linear Action</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcStructuralLinearAction
	 * @generated
	 */
	public Adapter createIfcStructuralLinearActionAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcStructuralLinearActionVarying <em>Ifc Structural Linear Action Varying</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcStructuralLinearActionVarying
	 * @generated
	 */
	public Adapter createIfcStructuralLinearActionVaryingAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcStructuralLoad <em>Ifc Structural Load</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcStructuralLoad
	 * @generated
	 */
	public Adapter createIfcStructuralLoadAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcStructuralLoadGroup <em>Ifc Structural Load Group</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcStructuralLoadGroup
	 * @generated
	 */
	public Adapter createIfcStructuralLoadGroupAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcStructuralLoadLinearForce <em>Ifc Structural Load Linear Force</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcStructuralLoadLinearForce
	 * @generated
	 */
	public Adapter createIfcStructuralLoadLinearForceAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcStructuralLoadPlanarForce <em>Ifc Structural Load Planar Force</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcStructuralLoadPlanarForce
	 * @generated
	 */
	public Adapter createIfcStructuralLoadPlanarForceAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcStructuralLoadSingleDisplacement <em>Ifc Structural Load Single Displacement</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcStructuralLoadSingleDisplacement
	 * @generated
	 */
	public Adapter createIfcStructuralLoadSingleDisplacementAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcStructuralLoadSingleDisplacementDistortion <em>Ifc Structural Load Single Displacement Distortion</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcStructuralLoadSingleDisplacementDistortion
	 * @generated
	 */
	public Adapter createIfcStructuralLoadSingleDisplacementDistortionAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcStructuralLoadSingleForce <em>Ifc Structural Load Single Force</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcStructuralLoadSingleForce
	 * @generated
	 */
	public Adapter createIfcStructuralLoadSingleForceAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcStructuralLoadSingleForceWarping <em>Ifc Structural Load Single Force Warping</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcStructuralLoadSingleForceWarping
	 * @generated
	 */
	public Adapter createIfcStructuralLoadSingleForceWarpingAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcStructuralLoadStatic <em>Ifc Structural Load Static</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcStructuralLoadStatic
	 * @generated
	 */
	public Adapter createIfcStructuralLoadStaticAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcStructuralLoadTemperature <em>Ifc Structural Load Temperature</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcStructuralLoadTemperature
	 * @generated
	 */
	public Adapter createIfcStructuralLoadTemperatureAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcStructuralMember <em>Ifc Structural Member</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcStructuralMember
	 * @generated
	 */
	public Adapter createIfcStructuralMemberAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcStructuralPlanarAction <em>Ifc Structural Planar Action</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcStructuralPlanarAction
	 * @generated
	 */
	public Adapter createIfcStructuralPlanarActionAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcStructuralPlanarActionVarying <em>Ifc Structural Planar Action Varying</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcStructuralPlanarActionVarying
	 * @generated
	 */
	public Adapter createIfcStructuralPlanarActionVaryingAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcStructuralPointAction <em>Ifc Structural Point Action</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcStructuralPointAction
	 * @generated
	 */
	public Adapter createIfcStructuralPointActionAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcStructuralPointConnection <em>Ifc Structural Point Connection</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcStructuralPointConnection
	 * @generated
	 */
	public Adapter createIfcStructuralPointConnectionAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcStructuralPointReaction <em>Ifc Structural Point Reaction</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcStructuralPointReaction
	 * @generated
	 */
	public Adapter createIfcStructuralPointReactionAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcStructuralProfileProperties <em>Ifc Structural Profile Properties</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcStructuralProfileProperties
	 * @generated
	 */
	public Adapter createIfcStructuralProfilePropertiesAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcStructuralReaction <em>Ifc Structural Reaction</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcStructuralReaction
	 * @generated
	 */
	public Adapter createIfcStructuralReactionAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcStructuralResultGroup <em>Ifc Structural Result Group</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcStructuralResultGroup
	 * @generated
	 */
	public Adapter createIfcStructuralResultGroupAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcStructuralSteelProfileProperties <em>Ifc Structural Steel Profile Properties</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcStructuralSteelProfileProperties
	 * @generated
	 */
	public Adapter createIfcStructuralSteelProfilePropertiesAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcStructuralSurfaceConnection <em>Ifc Structural Surface Connection</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcStructuralSurfaceConnection
	 * @generated
	 */
	public Adapter createIfcStructuralSurfaceConnectionAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcStructuralSurfaceMember <em>Ifc Structural Surface Member</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcStructuralSurfaceMember
	 * @generated
	 */
	public Adapter createIfcStructuralSurfaceMemberAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcStructuralSurfaceMemberVarying <em>Ifc Structural Surface Member Varying</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcStructuralSurfaceMemberVarying
	 * @generated
	 */
	public Adapter createIfcStructuralSurfaceMemberVaryingAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcStructuralSurfaceTypeEnumType <em>Ifc Structural Surface Type Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcStructuralSurfaceTypeEnumType
	 * @generated
	 */
	public Adapter createIfcStructuralSurfaceTypeEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcStructuredDimensionCallout <em>Ifc Structured Dimension Callout</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcStructuredDimensionCallout
	 * @generated
	 */
	public Adapter createIfcStructuredDimensionCalloutAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcStyledItem <em>Ifc Styled Item</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcStyledItem
	 * @generated
	 */
	public Adapter createIfcStyledItemAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcStyledRepresentation <em>Ifc Styled Representation</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcStyledRepresentation
	 * @generated
	 */
	public Adapter createIfcStyledRepresentationAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcStyleModel <em>Ifc Style Model</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcStyleModel
	 * @generated
	 */
	public Adapter createIfcStyleModelAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSubContractResource <em>Ifc Sub Contract Resource</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSubContractResource
	 * @generated
	 */
	public Adapter createIfcSubContractResourceAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSubedge <em>Ifc Subedge</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSubedge
	 * @generated
	 */
	public Adapter createIfcSubedgeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSurface <em>Ifc Surface</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSurface
	 * @generated
	 */
	public Adapter createIfcSurfaceAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSurfaceCurveSweptAreaSolid <em>Ifc Surface Curve Swept Area Solid</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSurfaceCurveSweptAreaSolid
	 * @generated
	 */
	public Adapter createIfcSurfaceCurveSweptAreaSolidAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSurfaceOfLinearExtrusion <em>Ifc Surface Of Linear Extrusion</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSurfaceOfLinearExtrusion
	 * @generated
	 */
	public Adapter createIfcSurfaceOfLinearExtrusionAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSurfaceOfRevolution <em>Ifc Surface Of Revolution</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSurfaceOfRevolution
	 * @generated
	 */
	public Adapter createIfcSurfaceOfRevolutionAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSurfaceOrFaceSurface <em>Ifc Surface Or Face Surface</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSurfaceOrFaceSurface
	 * @generated
	 */
	public Adapter createIfcSurfaceOrFaceSurfaceAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSurfaceSideType <em>Ifc Surface Side Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSurfaceSideType
	 * @generated
	 */
	public Adapter createIfcSurfaceSideTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSurfaceStyle <em>Ifc Surface Style</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSurfaceStyle
	 * @generated
	 */
	public Adapter createIfcSurfaceStyleAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSurfaceStyleElementSelect <em>Ifc Surface Style Element Select</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSurfaceStyleElementSelect
	 * @generated
	 */
	public Adapter createIfcSurfaceStyleElementSelectAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSurfaceStyleLighting <em>Ifc Surface Style Lighting</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSurfaceStyleLighting
	 * @generated
	 */
	public Adapter createIfcSurfaceStyleLightingAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSurfaceStyleRefraction <em>Ifc Surface Style Refraction</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSurfaceStyleRefraction
	 * @generated
	 */
	public Adapter createIfcSurfaceStyleRefractionAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSurfaceStyleRendering <em>Ifc Surface Style Rendering</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSurfaceStyleRendering
	 * @generated
	 */
	public Adapter createIfcSurfaceStyleRenderingAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSurfaceStyleShading <em>Ifc Surface Style Shading</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSurfaceStyleShading
	 * @generated
	 */
	public Adapter createIfcSurfaceStyleShadingAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSurfaceStyleWithTextures <em>Ifc Surface Style With Textures</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSurfaceStyleWithTextures
	 * @generated
	 */
	public Adapter createIfcSurfaceStyleWithTexturesAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSurfaceTexture <em>Ifc Surface Texture</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSurfaceTexture
	 * @generated
	 */
	public Adapter createIfcSurfaceTextureAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSurfaceTextureEnumType <em>Ifc Surface Texture Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSurfaceTextureEnumType
	 * @generated
	 */
	public Adapter createIfcSurfaceTextureEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSweptAreaSolid <em>Ifc Swept Area Solid</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSweptAreaSolid
	 * @generated
	 */
	public Adapter createIfcSweptAreaSolidAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSweptDiskSolid <em>Ifc Swept Disk Solid</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSweptDiskSolid
	 * @generated
	 */
	public Adapter createIfcSweptDiskSolidAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSweptSurface <em>Ifc Swept Surface</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSweptSurface
	 * @generated
	 */
	public Adapter createIfcSweptSurfaceAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSwitchingDeviceType <em>Ifc Switching Device Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSwitchingDeviceType
	 * @generated
	 */
	public Adapter createIfcSwitchingDeviceTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSwitchingDeviceTypeEnumType <em>Ifc Switching Device Type Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSwitchingDeviceTypeEnumType
	 * @generated
	 */
	public Adapter createIfcSwitchingDeviceTypeEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSymbolStyle <em>Ifc Symbol Style</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSymbolStyle
	 * @generated
	 */
	public Adapter createIfcSymbolStyleAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSymbolStyleSelect <em>Ifc Symbol Style Select</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSymbolStyleSelect
	 * @generated
	 */
	public Adapter createIfcSymbolStyleSelectAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSystem <em>Ifc System</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSystem
	 * @generated
	 */
	public Adapter createIfcSystemAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSystemFurnitureElementType <em>Ifc System Furniture Element Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcSystemFurnitureElementType
	 * @generated
	 */
	public Adapter createIfcSystemFurnitureElementTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcTable <em>Ifc Table</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcTable
	 * @generated
	 */
	public Adapter createIfcTableAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcTableRow <em>Ifc Table Row</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcTableRow
	 * @generated
	 */
	public Adapter createIfcTableRowAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcTankType <em>Ifc Tank Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcTankType
	 * @generated
	 */
	public Adapter createIfcTankTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcTankTypeEnumType <em>Ifc Tank Type Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcTankTypeEnumType
	 * @generated
	 */
	public Adapter createIfcTankTypeEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcTask <em>Ifc Task</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcTask
	 * @generated
	 */
	public Adapter createIfcTaskAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcTelecomAddress <em>Ifc Telecom Address</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcTelecomAddress
	 * @generated
	 */
	public Adapter createIfcTelecomAddressAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcTemperatureGradientMeasureType <em>Ifc Temperature Gradient Measure Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcTemperatureGradientMeasureType
	 * @generated
	 */
	public Adapter createIfcTemperatureGradientMeasureTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcTendon <em>Ifc Tendon</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcTendon
	 * @generated
	 */
	public Adapter createIfcTendonAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcTendonAnchor <em>Ifc Tendon Anchor</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcTendonAnchor
	 * @generated
	 */
	public Adapter createIfcTendonAnchorAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcTendonTypeEnumType <em>Ifc Tendon Type Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcTendonTypeEnumType
	 * @generated
	 */
	public Adapter createIfcTendonTypeEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcTerminatorSymbol <em>Ifc Terminator Symbol</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcTerminatorSymbol
	 * @generated
	 */
	public Adapter createIfcTerminatorSymbolAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcTextAlignmentType <em>Ifc Text Alignment Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcTextAlignmentType
	 * @generated
	 */
	public Adapter createIfcTextAlignmentTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcTextDecorationType <em>Ifc Text Decoration Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcTextDecorationType
	 * @generated
	 */
	public Adapter createIfcTextDecorationTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcTextFontNameType <em>Ifc Text Font Name Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcTextFontNameType
	 * @generated
	 */
	public Adapter createIfcTextFontNameTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcTextFontSelect <em>Ifc Text Font Select</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcTextFontSelect
	 * @generated
	 */
	public Adapter createIfcTextFontSelectAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcTextLiteral <em>Ifc Text Literal</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcTextLiteral
	 * @generated
	 */
	public Adapter createIfcTextLiteralAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcTextLiteralWithExtent <em>Ifc Text Literal With Extent</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcTextLiteralWithExtent
	 * @generated
	 */
	public Adapter createIfcTextLiteralWithExtentAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcTextPathType <em>Ifc Text Path Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcTextPathType
	 * @generated
	 */
	public Adapter createIfcTextPathTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcTextStyle <em>Ifc Text Style</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcTextStyle
	 * @generated
	 */
	public Adapter createIfcTextStyleAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcTextStyleFontModel <em>Ifc Text Style Font Model</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcTextStyleFontModel
	 * @generated
	 */
	public Adapter createIfcTextStyleFontModelAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcTextStyleForDefinedFont <em>Ifc Text Style For Defined Font</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcTextStyleForDefinedFont
	 * @generated
	 */
	public Adapter createIfcTextStyleForDefinedFontAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcTextStyleSelect <em>Ifc Text Style Select</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcTextStyleSelect
	 * @generated
	 */
	public Adapter createIfcTextStyleSelectAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcTextStyleTextModel <em>Ifc Text Style Text Model</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcTextStyleTextModel
	 * @generated
	 */
	public Adapter createIfcTextStyleTextModelAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcTextStyleWithBoxCharacteristics <em>Ifc Text Style With Box Characteristics</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcTextStyleWithBoxCharacteristics
	 * @generated
	 */
	public Adapter createIfcTextStyleWithBoxCharacteristicsAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcTextTransformationType <em>Ifc Text Transformation Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcTextTransformationType
	 * @generated
	 */
	public Adapter createIfcTextTransformationTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcTextType <em>Ifc Text Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcTextType
	 * @generated
	 */
	public Adapter createIfcTextTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcTextureCoordinate <em>Ifc Texture Coordinate</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcTextureCoordinate
	 * @generated
	 */
	public Adapter createIfcTextureCoordinateAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcTextureCoordinateGenerator <em>Ifc Texture Coordinate Generator</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcTextureCoordinateGenerator
	 * @generated
	 */
	public Adapter createIfcTextureCoordinateGeneratorAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcTextureMap <em>Ifc Texture Map</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcTextureMap
	 * @generated
	 */
	public Adapter createIfcTextureMapAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcTextureVertex <em>Ifc Texture Vertex</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcTextureVertex
	 * @generated
	 */
	public Adapter createIfcTextureVertexAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcThermalAdmittanceMeasureType <em>Ifc Thermal Admittance Measure Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcThermalAdmittanceMeasureType
	 * @generated
	 */
	public Adapter createIfcThermalAdmittanceMeasureTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcThermalConductivityMeasureType <em>Ifc Thermal Conductivity Measure Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcThermalConductivityMeasureType
	 * @generated
	 */
	public Adapter createIfcThermalConductivityMeasureTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcThermalExpansionCoefficientMeasureType <em>Ifc Thermal Expansion Coefficient Measure Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcThermalExpansionCoefficientMeasureType
	 * @generated
	 */
	public Adapter createIfcThermalExpansionCoefficientMeasureTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcThermalLoadSourceEnumType <em>Ifc Thermal Load Source Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcThermalLoadSourceEnumType
	 * @generated
	 */
	public Adapter createIfcThermalLoadSourceEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcThermalLoadTypeEnumType <em>Ifc Thermal Load Type Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcThermalLoadTypeEnumType
	 * @generated
	 */
	public Adapter createIfcThermalLoadTypeEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcThermalMaterialProperties <em>Ifc Thermal Material Properties</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcThermalMaterialProperties
	 * @generated
	 */
	public Adapter createIfcThermalMaterialPropertiesAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcThermalResistanceMeasureType <em>Ifc Thermal Resistance Measure Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcThermalResistanceMeasureType
	 * @generated
	 */
	public Adapter createIfcThermalResistanceMeasureTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcThermalTransmittanceMeasureType <em>Ifc Thermal Transmittance Measure Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcThermalTransmittanceMeasureType
	 * @generated
	 */
	public Adapter createIfcThermalTransmittanceMeasureTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcThermodynamicTemperatureMeasureType <em>Ifc Thermodynamic Temperature Measure Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcThermodynamicTemperatureMeasureType
	 * @generated
	 */
	public Adapter createIfcThermodynamicTemperatureMeasureTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcTimeMeasureType <em>Ifc Time Measure Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcTimeMeasureType
	 * @generated
	 */
	public Adapter createIfcTimeMeasureTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcTimeSeries <em>Ifc Time Series</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcTimeSeries
	 * @generated
	 */
	public Adapter createIfcTimeSeriesAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcTimeSeriesDataTypeEnumType <em>Ifc Time Series Data Type Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcTimeSeriesDataTypeEnumType
	 * @generated
	 */
	public Adapter createIfcTimeSeriesDataTypeEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcTimeSeriesReferenceRelationship <em>Ifc Time Series Reference Relationship</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcTimeSeriesReferenceRelationship
	 * @generated
	 */
	public Adapter createIfcTimeSeriesReferenceRelationshipAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcTimeSeriesSchedule <em>Ifc Time Series Schedule</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcTimeSeriesSchedule
	 * @generated
	 */
	public Adapter createIfcTimeSeriesScheduleAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcTimeSeriesScheduleTypeEnumType <em>Ifc Time Series Schedule Type Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcTimeSeriesScheduleTypeEnumType
	 * @generated
	 */
	public Adapter createIfcTimeSeriesScheduleTypeEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcTimeSeriesValue <em>Ifc Time Series Value</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcTimeSeriesValue
	 * @generated
	 */
	public Adapter createIfcTimeSeriesValueAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcTimeStampType <em>Ifc Time Stamp Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcTimeStampType
	 * @generated
	 */
	public Adapter createIfcTimeStampTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcTopologicalRepresentationItem <em>Ifc Topological Representation Item</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcTopologicalRepresentationItem
	 * @generated
	 */
	public Adapter createIfcTopologicalRepresentationItemAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcTopologyRepresentation <em>Ifc Topology Representation</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcTopologyRepresentation
	 * @generated
	 */
	public Adapter createIfcTopologyRepresentationAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcTorqueMeasureType <em>Ifc Torque Measure Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcTorqueMeasureType
	 * @generated
	 */
	public Adapter createIfcTorqueMeasureTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcTransformerType <em>Ifc Transformer Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcTransformerType
	 * @generated
	 */
	public Adapter createIfcTransformerTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcTransformerTypeEnumType <em>Ifc Transformer Type Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcTransformerTypeEnumType
	 * @generated
	 */
	public Adapter createIfcTransformerTypeEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcTransitionCodeType <em>Ifc Transition Code Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcTransitionCodeType
	 * @generated
	 */
	public Adapter createIfcTransitionCodeTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcTransportElement <em>Ifc Transport Element</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcTransportElement
	 * @generated
	 */
	public Adapter createIfcTransportElementAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcTransportElementType <em>Ifc Transport Element Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcTransportElementType
	 * @generated
	 */
	public Adapter createIfcTransportElementTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcTransportElementTypeEnumType <em>Ifc Transport Element Type Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcTransportElementTypeEnumType
	 * @generated
	 */
	public Adapter createIfcTransportElementTypeEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcTrapeziumProfileDef <em>Ifc Trapezium Profile Def</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcTrapeziumProfileDef
	 * @generated
	 */
	public Adapter createIfcTrapeziumProfileDefAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcTrimmedCurve <em>Ifc Trimmed Curve</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcTrimmedCurve
	 * @generated
	 */
	public Adapter createIfcTrimmedCurveAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcTrimmingPreferenceType <em>Ifc Trimming Preference Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcTrimmingPreferenceType
	 * @generated
	 */
	public Adapter createIfcTrimmingPreferenceTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcTrimmingSelect <em>Ifc Trimming Select</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcTrimmingSelect
	 * @generated
	 */
	public Adapter createIfcTrimmingSelectAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcTShapeProfileDef <em>Ifc TShape Profile Def</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcTShapeProfileDef
	 * @generated
	 */
	public Adapter createIfcTShapeProfileDefAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcTubeBundleType <em>Ifc Tube Bundle Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcTubeBundleType
	 * @generated
	 */
	public Adapter createIfcTubeBundleTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcTubeBundleTypeEnumType <em>Ifc Tube Bundle Type Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcTubeBundleTypeEnumType
	 * @generated
	 */
	public Adapter createIfcTubeBundleTypeEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcTwoDirectionRepeatFactor <em>Ifc Two Direction Repeat Factor</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcTwoDirectionRepeatFactor
	 * @generated
	 */
	public Adapter createIfcTwoDirectionRepeatFactorAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcTypeObject <em>Ifc Type Object</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcTypeObject
	 * @generated
	 */
	public Adapter createIfcTypeObjectAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcTypeProduct <em>Ifc Type Product</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcTypeProduct
	 * @generated
	 */
	public Adapter createIfcTypeProductAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcUnit <em>Ifc Unit</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcUnit
	 * @generated
	 */
	public Adapter createIfcUnitAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcUnitaryEquipmentType <em>Ifc Unitary Equipment Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcUnitaryEquipmentType
	 * @generated
	 */
	public Adapter createIfcUnitaryEquipmentTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcUnitaryEquipmentTypeEnumType <em>Ifc Unitary Equipment Type Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcUnitaryEquipmentTypeEnumType
	 * @generated
	 */
	public Adapter createIfcUnitaryEquipmentTypeEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcUnitAssignment <em>Ifc Unit Assignment</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcUnitAssignment
	 * @generated
	 */
	public Adapter createIfcUnitAssignmentAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcUnitEnumType <em>Ifc Unit Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcUnitEnumType
	 * @generated
	 */
	public Adapter createIfcUnitEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcUShapeProfileDef <em>Ifc UShape Profile Def</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcUShapeProfileDef
	 * @generated
	 */
	public Adapter createIfcUShapeProfileDefAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcValue <em>Ifc Value</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcValue
	 * @generated
	 */
	public Adapter createIfcValueAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcValveType <em>Ifc Valve Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcValveType
	 * @generated
	 */
	public Adapter createIfcValveTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcValveTypeEnumType <em>Ifc Valve Type Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcValveTypeEnumType
	 * @generated
	 */
	public Adapter createIfcValveTypeEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcVaporPermeabilityMeasureType <em>Ifc Vapor Permeability Measure Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcVaporPermeabilityMeasureType
	 * @generated
	 */
	public Adapter createIfcVaporPermeabilityMeasureTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcVector <em>Ifc Vector</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcVector
	 * @generated
	 */
	public Adapter createIfcVectorAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcVectorOrDirection <em>Ifc Vector Or Direction</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcVectorOrDirection
	 * @generated
	 */
	public Adapter createIfcVectorOrDirectionAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcVertex <em>Ifc Vertex</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcVertex
	 * @generated
	 */
	public Adapter createIfcVertexAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcVertexBasedTextureMap <em>Ifc Vertex Based Texture Map</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcVertexBasedTextureMap
	 * @generated
	 */
	public Adapter createIfcVertexBasedTextureMapAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcVertexLoop <em>Ifc Vertex Loop</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcVertexLoop
	 * @generated
	 */
	public Adapter createIfcVertexLoopAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcVertexPoint <em>Ifc Vertex Point</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcVertexPoint
	 * @generated
	 */
	public Adapter createIfcVertexPointAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcVibrationIsolatorType <em>Ifc Vibration Isolator Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcVibrationIsolatorType
	 * @generated
	 */
	public Adapter createIfcVibrationIsolatorTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcVibrationIsolatorTypeEnumType <em>Ifc Vibration Isolator Type Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcVibrationIsolatorTypeEnumType
	 * @generated
	 */
	public Adapter createIfcVibrationIsolatorTypeEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcVirtualElement <em>Ifc Virtual Element</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcVirtualElement
	 * @generated
	 */
	public Adapter createIfcVirtualElementAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcVirtualGridIntersection <em>Ifc Virtual Grid Intersection</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcVirtualGridIntersection
	 * @generated
	 */
	public Adapter createIfcVirtualGridIntersectionAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcVolumeMeasureType <em>Ifc Volume Measure Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcVolumeMeasureType
	 * @generated
	 */
	public Adapter createIfcVolumeMeasureTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcVolumetricFlowRateMeasureType <em>Ifc Volumetric Flow Rate Measure Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcVolumetricFlowRateMeasureType
	 * @generated
	 */
	public Adapter createIfcVolumetricFlowRateMeasureTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcWall <em>Ifc Wall</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcWall
	 * @generated
	 */
	public Adapter createIfcWallAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcWallStandardCase <em>Ifc Wall Standard Case</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcWallStandardCase
	 * @generated
	 */
	public Adapter createIfcWallStandardCaseAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcWallType <em>Ifc Wall Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcWallType
	 * @generated
	 */
	public Adapter createIfcWallTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcWallTypeEnumType <em>Ifc Wall Type Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcWallTypeEnumType
	 * @generated
	 */
	public Adapter createIfcWallTypeEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcWarpingConstantMeasureType <em>Ifc Warping Constant Measure Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcWarpingConstantMeasureType
	 * @generated
	 */
	public Adapter createIfcWarpingConstantMeasureTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcWarpingMomentMeasureType <em>Ifc Warping Moment Measure Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcWarpingMomentMeasureType
	 * @generated
	 */
	public Adapter createIfcWarpingMomentMeasureTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcWasteTerminalType <em>Ifc Waste Terminal Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcWasteTerminalType
	 * @generated
	 */
	public Adapter createIfcWasteTerminalTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcWasteTerminalTypeEnumType <em>Ifc Waste Terminal Type Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcWasteTerminalTypeEnumType
	 * @generated
	 */
	public Adapter createIfcWasteTerminalTypeEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcWaterProperties <em>Ifc Water Properties</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcWaterProperties
	 * @generated
	 */
	public Adapter createIfcWaterPropertiesAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcWindow <em>Ifc Window</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcWindow
	 * @generated
	 */
	public Adapter createIfcWindowAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcWindowLiningProperties <em>Ifc Window Lining Properties</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcWindowLiningProperties
	 * @generated
	 */
	public Adapter createIfcWindowLiningPropertiesAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcWindowPanelOperationEnumType <em>Ifc Window Panel Operation Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcWindowPanelOperationEnumType
	 * @generated
	 */
	public Adapter createIfcWindowPanelOperationEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcWindowPanelPositionEnumType <em>Ifc Window Panel Position Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcWindowPanelPositionEnumType
	 * @generated
	 */
	public Adapter createIfcWindowPanelPositionEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcWindowPanelProperties <em>Ifc Window Panel Properties</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcWindowPanelProperties
	 * @generated
	 */
	public Adapter createIfcWindowPanelPropertiesAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcWindowStyle <em>Ifc Window Style</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcWindowStyle
	 * @generated
	 */
	public Adapter createIfcWindowStyleAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcWindowStyleConstructionEnumType <em>Ifc Window Style Construction Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcWindowStyleConstructionEnumType
	 * @generated
	 */
	public Adapter createIfcWindowStyleConstructionEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcWindowStyleOperationEnumType <em>Ifc Window Style Operation Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcWindowStyleOperationEnumType
	 * @generated
	 */
	public Adapter createIfcWindowStyleOperationEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcWorkControl <em>Ifc Work Control</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcWorkControl
	 * @generated
	 */
	public Adapter createIfcWorkControlAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcWorkControlTypeEnumType <em>Ifc Work Control Type Enum Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcWorkControlTypeEnumType
	 * @generated
	 */
	public Adapter createIfcWorkControlTypeEnumTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcWorkPlan <em>Ifc Work Plan</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcWorkPlan
	 * @generated
	 */
	public Adapter createIfcWorkPlanAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcWorkSchedule <em>Ifc Work Schedule</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcWorkSchedule
	 * @generated
	 */
	public Adapter createIfcWorkScheduleAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcYearNumberType <em>Ifc Year Number Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcYearNumberType
	 * @generated
	 */
	public Adapter createIfcYearNumberTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcZone <em>Ifc Zone</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcZone
	 * @generated
	 */
	public Adapter createIfcZoneAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IfcZShapeProfileDef <em>Ifc ZShape Profile Def</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IfcZShapeProfileDef
	 * @generated
	 */
	public Adapter createIfcZShapeProfileDefAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IncorporationDateType <em>Incorporation Date Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IncorporationDateType
	 * @generated
	 */
	public Adapter createIncorporationDateTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.InnerBoundariesType <em>Inner Boundaries Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.InnerBoundariesType
	 * @generated
	 */
	public Adapter createInnerBoundariesTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.InnerBoundariesType1 <em>Inner Boundaries Type1</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.InnerBoundariesType1
	 * @generated
	 */
	public Adapter createInnerBoundariesType1Adapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.InnerCurvesType <em>Inner Curves Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.InnerCurvesType
	 * @generated
	 */
	public Adapter createInnerCurvesTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.IntersectingAxesType <em>Intersecting Axes Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.IntersectingAxesType
	 * @generated
	 */
	public Adapter createIntersectingAxesTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.ItemOfType <em>Item Of Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.ItemOfType
	 * @generated
	 */
	public Adapter createItemOfTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.ItemsType <em>Items Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.ItemsType
	 * @generated
	 */
	public Adapter createItemsTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.ItemType <em>Item Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.ItemType
	 * @generated
	 */
	public Adapter createItemTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.ItemType1 <em>Item Type1</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.ItemType1
	 * @generated
	 */
	public Adapter createItemType1Adapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.JurisdictionType <em>Jurisdiction Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.JurisdictionType
	 * @generated
	 */
	public Adapter createJurisdictionTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.LastModifyingApplicationType <em>Last Modifying Application Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.LastModifyingApplicationType
	 * @generated
	 */
	public Adapter createLastModifyingApplicationTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.LastModifyingUserType <em>Last Modifying User Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.LastModifyingUserType
	 * @generated
	 */
	public Adapter createLastModifyingUserTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.LastRevisionTimeType <em>Last Revision Time Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.LastRevisionTimeType
	 * @generated
	 */
	public Adapter createLastRevisionTimeTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.LastUpdateDateType <em>Last Update Date Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.LastUpdateDateType
	 * @generated
	 */
	public Adapter createLastUpdateDateTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.LateFinishType <em>Late Finish Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.LateFinishType
	 * @generated
	 */
	public Adapter createLateFinishTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.LateStartType <em>Late Start Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.LateStartType
	 * @generated
	 */
	public Adapter createLateStartTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.LayerStylesType <em>Layer Styles Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.LayerStylesType
	 * @generated
	 */
	public Adapter createLayerStylesTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.LetterSpacingType <em>Letter Spacing Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.LetterSpacingType
	 * @generated
	 */
	public Adapter createLetterSpacingTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.LibraryReferenceType <em>Library Reference Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.LibraryReferenceType
	 * @generated
	 */
	public Adapter createLibraryReferenceTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.LightColourType <em>Light Colour Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.LightColourType
	 * @generated
	 */
	public Adapter createLightColourTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.LightDistributionDataSourceType <em>Light Distribution Data Source Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.LightDistributionDataSourceType
	 * @generated
	 */
	public Adapter createLightDistributionDataSourceTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.LineHeightType <em>Line Height Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.LineHeightType
	 * @generated
	 */
	public Adapter createLineHeightTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.ListValuesType <em>List Values Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.ListValuesType
	 * @generated
	 */
	public Adapter createListValuesTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.ListValuesType1 <em>List Values Type1</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.ListValuesType1
	 * @generated
	 */
	public Adapter createListValuesType1Adapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.ListValuesType2 <em>List Values Type2</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.ListValuesType2
	 * @generated
	 */
	public Adapter createListValuesType2Adapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.LoadedByType <em>Loaded By Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.LoadedByType
	 * @generated
	 */
	public Adapter createLoadedByTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.LocalOriginType <em>Local Origin Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.LocalOriginType
	 * @generated
	 */
	public Adapter createLocalOriginTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.LocationAtRelatedElementType <em>Location At Related Element Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.LocationAtRelatedElementType
	 * @generated
	 */
	public Adapter createLocationAtRelatedElementTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.LocationAtRelatingElementType <em>Location At Relating Element Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.LocationAtRelatingElementType
	 * @generated
	 */
	public Adapter createLocationAtRelatingElementTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.LocationOfInteractionType <em>Location Of Interaction Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.LocationOfInteractionType
	 * @generated
	 */
	public Adapter createLocationOfInteractionTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.LocationType <em>Location Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.LocationType
	 * @generated
	 */
	public Adapter createLocationTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.LoopVertexType <em>Loop Vertex Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.LoopVertexType
	 * @generated
	 */
	public Adapter createLoopVertexTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.LowerBoundValueType <em>Lower Bound Value Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.LowerBoundValueType
	 * @generated
	 */
	public Adapter createLowerBoundValueTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.LowerValueType <em>Lower Value Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.LowerValueType
	 * @generated
	 */
	public Adapter createLowerValueTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.LuminousIntensityType <em>Luminous Intensity Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.LuminousIntensityType
	 * @generated
	 */
	public Adapter createLuminousIntensityTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.MappedRepresentationType <em>Mapped Representation Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.MappedRepresentationType
	 * @generated
	 */
	public Adapter createMappedRepresentationTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.MappingOriginType <em>Mapping Origin Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.MappingOriginType
	 * @generated
	 */
	public Adapter createMappingOriginTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.MappingSourceType <em>Mapping Source Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.MappingSourceType
	 * @generated
	 */
	public Adapter createMappingSourceTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.MappingTargetType <em>Mapping Target Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.MappingTargetType
	 * @generated
	 */
	public Adapter createMappingTargetTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.MaterialClassificationsType <em>Material Classifications Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.MaterialClassificationsType
	 * @generated
	 */
	public Adapter createMaterialClassificationsTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.MaterialLayersType <em>Material Layers Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.MaterialLayersType
	 * @generated
	 */
	public Adapter createMaterialLayersTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.MaterialsType <em>Materials Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.MaterialsType
	 * @generated
	 */
	public Adapter createMaterialsTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.MaterialType <em>Material Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.MaterialType
	 * @generated
	 */
	public Adapter createMaterialTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.MaterialType1 <em>Material Type1</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.MaterialType1
	 * @generated
	 */
	public Adapter createMaterialType1Adapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.MiddleNamesType <em>Middle Names Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.MiddleNamesType
	 * @generated
	 */
	public Adapter createMiddleNamesTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.MostUsedValueType <em>Most Used Value Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.MostUsedValueType
	 * @generated
	 */
	public Adapter createMostUsedValueTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.MoveFromType <em>Move From Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.MoveFromType
	 * @generated
	 */
	public Adapter createMoveFromTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.MoveToType <em>Move To Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.MoveToType
	 * @generated
	 */
	public Adapter createMoveToTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.NominalValueType <em>Nominal Value Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.NominalValueType
	 * @generated
	 */
	public Adapter createNominalValueTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.NotationFacetsType <em>Notation Facets Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.NotationFacetsType
	 * @generated
	 */
	public Adapter createNotationFacetsTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.NotationType <em>Notation Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.NotationType
	 * @generated
	 */
	public Adapter createNotationTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.ObjectPlacementType <em>Object Placement Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.ObjectPlacementType
	 * @generated
	 */
	public Adapter createObjectPlacementTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.OffsetDistancesType <em>Offset Distances Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.OffsetDistancesType
	 * @generated
	 */
	public Adapter createOffsetDistancesTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.OperatorType <em>Operator Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.OperatorType
	 * @generated
	 */
	public Adapter createOperatorTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.OrientationOf2DPlaneType <em>Orientation Of2 DPlane Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.OrientationOf2DPlaneType
	 * @generated
	 */
	public Adapter createOrientationOf2DPlaneTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.OrientationType <em>Orientation Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.OrientationType
	 * @generated
	 */
	public Adapter createOrientationTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.OrientationType1 <em>Orientation Type1</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.OrientationType1
	 * @generated
	 */
	public Adapter createOrientationType1Adapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.OrientationType2 <em>Orientation Type2</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.OrientationType2
	 * @generated
	 */
	public Adapter createOrientationType2Adapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.OriginalValueType <em>Original Value Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.OriginalValueType
	 * @generated
	 */
	public Adapter createOriginalValueTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.OriginalValueType1 <em>Original Value Type1</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.OriginalValueType1
	 * @generated
	 */
	public Adapter createOriginalValueType1Adapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.OuterBoundaryType <em>Outer Boundary Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.OuterBoundaryType
	 * @generated
	 */
	public Adapter createOuterBoundaryTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.OuterBoundaryType1 <em>Outer Boundary Type1</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.OuterBoundaryType1
	 * @generated
	 */
	public Adapter createOuterBoundaryType1Adapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.OuterCurveType <em>Outer Curve Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.OuterCurveType
	 * @generated
	 */
	public Adapter createOuterCurveTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.OuterType <em>Outer Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.OuterType
	 * @generated
	 */
	public Adapter createOuterTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.OverridingPropertiesType <em>Overriding Properties Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.OverridingPropertiesType
	 * @generated
	 */
	public Adapter createOverridingPropertiesTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.OwnerHistoryType <em>Owner History Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.OwnerHistoryType
	 * @generated
	 */
	public Adapter createOwnerHistoryTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.OwnerType <em>Owner Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.OwnerType
	 * @generated
	 */
	public Adapter createOwnerTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.OwningApplicationType <em>Owning Application Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.OwningApplicationType
	 * @generated
	 */
	public Adapter createOwningApplicationTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.OwningUserType <em>Owning User Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.OwningUserType
	 * @generated
	 */
	public Adapter createOwningUserTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.ParameterType <em>Parameter Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.ParameterType
	 * @generated
	 */
	public Adapter createParameterTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.ParentContextType <em>Parent Context Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.ParentContextType
	 * @generated
	 */
	public Adapter createParentContextTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.ParentCurveType <em>Parent Curve Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.ParentCurveType
	 * @generated
	 */
	public Adapter createParentCurveTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.ParentEdgeType <em>Parent Edge Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.ParentEdgeType
	 * @generated
	 */
	public Adapter createParentEdgeTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.ParentProfileType <em>Parent Profile Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.ParentProfileType
	 * @generated
	 */
	public Adapter createParentProfileTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.PartOfProductDefinitionShapeType <em>Part Of Product Definition Shape Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.PartOfProductDefinitionShapeType
	 * @generated
	 */
	public Adapter createPartOfProductDefinitionShapeTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.PatternListType <em>Pattern List Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.PatternListType
	 * @generated
	 */
	public Adapter createPatternListTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.PatternStartType <em>Pattern Start Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.PatternStartType
	 * @generated
	 */
	public Adapter createPatternStartTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.PixelType <em>Pixel Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.PixelType
	 * @generated
	 */
	public Adapter createPixelTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.PlacementLocationType <em>Placement Location Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.PlacementLocationType
	 * @generated
	 */
	public Adapter createPlacementLocationTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.PlacementRefDirectionType <em>Placement Ref Direction Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.PlacementRefDirectionType
	 * @generated
	 */
	public Adapter createPlacementRefDirectionTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.PlacementRelToType <em>Placement Rel To Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.PlacementRelToType
	 * @generated
	 */
	public Adapter createPlacementRelToTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.PlacementType <em>Placement Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.PlacementType
	 * @generated
	 */
	public Adapter createPlacementTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.PlacementType1 <em>Placement Type1</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.PlacementType1
	 * @generated
	 */
	public Adapter createPlacementType1Adapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.PntType <em>Pnt Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.PntType
	 * @generated
	 */
	public Adapter createPntTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.PointOfReferenceHatchLineType <em>Point Of Reference Hatch Line Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.PointOfReferenceHatchLineType
	 * @generated
	 */
	public Adapter createPointOfReferenceHatchLineTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.PointOnRelatedElementType <em>Point On Related Element Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.PointOnRelatedElementType
	 * @generated
	 */
	public Adapter createPointOnRelatedElementTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.PointOnRelatingElementType <em>Point On Relating Element Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.PointOnRelatingElementType
	 * @generated
	 */
	public Adapter createPointOnRelatingElementTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.PointsType <em>Points Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.PointsType
	 * @generated
	 */
	public Adapter createPointsTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.PolygonalBoundaryType <em>Polygonal Boundary Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.PolygonalBoundaryType
	 * @generated
	 */
	public Adapter createPolygonalBoundaryTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.PolygonType <em>Polygon Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.PolygonType
	 * @generated
	 */
	public Adapter createPolygonTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.PositionType <em>Position Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.PositionType
	 * @generated
	 */
	public Adapter createPositionTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.PositionType1 <em>Position Type1</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.PositionType1
	 * @generated
	 */
	public Adapter createPositionType1Adapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.PositionType2 <em>Position Type2</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.PositionType2
	 * @generated
	 */
	public Adapter createPositionType2Adapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.PositionType3 <em>Position Type3</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.PositionType3
	 * @generated
	 */
	public Adapter createPositionType3Adapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.PositionType4 <em>Position Type4</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.PositionType4
	 * @generated
	 */
	public Adapter createPositionType4Adapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.PositionType5 <em>Position Type5</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.PositionType5
	 * @generated
	 */
	public Adapter createPositionType5Adapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.PositionType6 <em>Position Type6</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.PositionType6
	 * @generated
	 */
	public Adapter createPositionType6Adapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.PositionType7 <em>Position Type7</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.PositionType7
	 * @generated
	 */
	public Adapter createPositionType7Adapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.PositionType8 <em>Position Type8</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.PositionType8
	 * @generated
	 */
	public Adapter createPositionType8Adapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.PrefixTitlesType <em>Prefix Titles Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.PrefixTitlesType
	 * @generated
	 */
	public Adapter createPrefixTitlesTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.PreparedByType <em>Prepared By Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.PreparedByType
	 * @generated
	 */
	public Adapter createPreparedByTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.PressureTimeSeriesType <em>Pressure Time Series Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.PressureTimeSeriesType
	 * @generated
	 */
	public Adapter createPressureTimeSeriesTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.ProfileDefinitionType <em>Profile Definition Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.ProfileDefinitionType
	 * @generated
	 */
	public Adapter createProfileDefinitionTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.ProfileOfPortType <em>Profile Of Port Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.ProfileOfPortType
	 * @generated
	 */
	public Adapter createProfileOfPortTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.ProfileOrientationType <em>Profile Orientation Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.ProfileOrientationType
	 * @generated
	 */
	public Adapter createProfileOrientationTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.ProfileSectionLocationType <em>Profile Section Location Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.ProfileSectionLocationType
	 * @generated
	 */
	public Adapter createProfileSectionLocationTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.ProfilesType <em>Profiles Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.ProfilesType
	 * @generated
	 */
	public Adapter createProfilesTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.PropertyReferenceType <em>Property Reference Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.PropertyReferenceType
	 * @generated
	 */
	public Adapter createPropertyReferenceTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.PublisherType <em>Publisher Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.PublisherType
	 * @generated
	 */
	public Adapter createPublisherTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.PunchListType <em>Punch List Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.PunchListType
	 * @generated
	 */
	public Adapter createPunchListTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.QuantitiesType <em>Quantities Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.QuantitiesType
	 * @generated
	 */
	public Adapter createQuantitiesTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.QuantityInProcessType <em>Quantity In Process Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.QuantityInProcessType
	 * @generated
	 */
	public Adapter createQuantityInProcessTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.RateDateTimeType <em>Rate Date Time Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.RateDateTimeType
	 * @generated
	 */
	public Adapter createRateDateTimeTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.RateSourceType <em>Rate Source Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.RateSourceType
	 * @generated
	 */
	public Adapter createRateSourceTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.RealizingElementsType <em>Realizing Elements Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.RealizingElementsType
	 * @generated
	 */
	public Adapter createRealizingElementsTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.RealizingElementType <em>Realizing Element Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.RealizingElementType
	 * @generated
	 */
	public Adapter createRealizingElementTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.RecordsType <em>Records Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.RecordsType
	 * @generated
	 */
	public Adapter createRecordsTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.RefDirectionType <em>Ref Direction Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.RefDirectionType
	 * @generated
	 */
	public Adapter createRefDirectionTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.RefDirectionType1 <em>Ref Direction Type1</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.RefDirectionType1
	 * @generated
	 */
	public Adapter createRefDirectionType1Adapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.RefDirectionType2 <em>Ref Direction Type2</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.RefDirectionType2
	 * @generated
	 */
	public Adapter createRefDirectionType2Adapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.ReferencedDocumentType <em>Referenced Document Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.ReferencedDocumentType
	 * @generated
	 */
	public Adapter createReferencedDocumentTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.ReferencedSourceType <em>Referenced Source Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.ReferencedSourceType
	 * @generated
	 */
	public Adapter createReferencedSourceTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.ReferencedTimeSeriesType <em>Referenced Time Series Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.ReferencedTimeSeriesType
	 * @generated
	 */
	public Adapter createReferencedTimeSeriesTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.ReferenceSurfaceType <em>Reference Surface Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.ReferenceSurfaceType
	 * @generated
	 */
	public Adapter createReferenceSurfaceTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.ReferencingValuesType <em>Referencing Values Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.ReferencingValuesType
	 * @generated
	 */
	public Adapter createReferencingValuesTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.ReflectanceColourType <em>Reflectance Colour Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.ReflectanceColourType
	 * @generated
	 */
	public Adapter createReflectanceColourTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.ReflectionColourType <em>Reflection Colour Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.ReflectionColourType
	 * @generated
	 */
	public Adapter createReflectionColourTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.ReinforcementSectionDefinitionsType <em>Reinforcement Section Definitions Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.ReinforcementSectionDefinitionsType
	 * @generated
	 */
	public Adapter createReinforcementSectionDefinitionsTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.RelatedApprovalType <em>Related Approval Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.RelatedApprovalType
	 * @generated
	 */
	public Adapter createRelatedApprovalTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.RelatedBuildingElementType <em>Related Building Element Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.RelatedBuildingElementType
	 * @generated
	 */
	public Adapter createRelatedBuildingElementTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.RelatedBuildingElementType1 <em>Related Building Element Type1</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.RelatedBuildingElementType1
	 * @generated
	 */
	public Adapter createRelatedBuildingElementType1Adapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.RelatedBuildingsType <em>Related Buildings Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.RelatedBuildingsType
	 * @generated
	 */
	public Adapter createRelatedBuildingsTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.RelatedClassificationsType <em>Related Classifications Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.RelatedClassificationsType
	 * @generated
	 */
	public Adapter createRelatedClassificationsTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.RelatedConstraintsType <em>Related Constraints Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.RelatedConstraintsType
	 * @generated
	 */
	public Adapter createRelatedConstraintsTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.RelatedConstraintsType1 <em>Related Constraints Type1</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.RelatedConstraintsType1
	 * @generated
	 */
	public Adapter createRelatedConstraintsType1Adapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.RelatedControlElementsType <em>Related Control Elements Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.RelatedControlElementsType
	 * @generated
	 */
	public Adapter createRelatedControlElementsTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.RelatedCoveringsType <em>Related Coverings Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.RelatedCoveringsType
	 * @generated
	 */
	public Adapter createRelatedCoveringsTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.RelatedCoveringsType1 <em>Related Coverings Type1</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.RelatedCoveringsType1
	 * @generated
	 */
	public Adapter createRelatedCoveringsType1Adapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.RelatedDocumentsType <em>Related Documents Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.RelatedDocumentsType
	 * @generated
	 */
	public Adapter createRelatedDocumentsTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.RelatedDraughtingCalloutType <em>Related Draughting Callout Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.RelatedDraughtingCalloutType
	 * @generated
	 */
	public Adapter createRelatedDraughtingCalloutTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.RelatedElementsType <em>Related Elements Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.RelatedElementsType
	 * @generated
	 */
	public Adapter createRelatedElementsTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.RelatedElementsType1 <em>Related Elements Type1</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.RelatedElementsType1
	 * @generated
	 */
	public Adapter createRelatedElementsType1Adapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.RelatedElementType <em>Related Element Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.RelatedElementType
	 * @generated
	 */
	public Adapter createRelatedElementTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.RelatedElementType1 <em>Related Element Type1</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.RelatedElementType1
	 * @generated
	 */
	public Adapter createRelatedElementType1Adapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.RelatedFeatureElementType <em>Related Feature Element Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.RelatedFeatureElementType
	 * @generated
	 */
	public Adapter createRelatedFeatureElementTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.RelatedItemsType <em>Related Items Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.RelatedItemsType
	 * @generated
	 */
	public Adapter createRelatedItemsTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.RelatedMonetaryUnitType <em>Related Monetary Unit Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.RelatedMonetaryUnitType
	 * @generated
	 */
	public Adapter createRelatedMonetaryUnitTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.RelatedObjectsType <em>Related Objects Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.RelatedObjectsType
	 * @generated
	 */
	public Adapter createRelatedObjectsTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.RelatedObjectsType1 <em>Related Objects Type1</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.RelatedObjectsType1
	 * @generated
	 */
	public Adapter createRelatedObjectsType1Adapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.RelatedObjectsType2 <em>Related Objects Type2</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.RelatedObjectsType2
	 * @generated
	 */
	public Adapter createRelatedObjectsType2Adapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.RelatedObjectsType3 <em>Related Objects Type3</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.RelatedObjectsType3
	 * @generated
	 */
	public Adapter createRelatedObjectsType3Adapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.RelatedOpeningElementType <em>Related Opening Element Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.RelatedOpeningElementType
	 * @generated
	 */
	public Adapter createRelatedOpeningElementTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.RelatedOrganizationsType <em>Related Organizations Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.RelatedOrganizationsType
	 * @generated
	 */
	public Adapter createRelatedOrganizationsTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.RelatedPortType <em>Related Port Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.RelatedPortType
	 * @generated
	 */
	public Adapter createRelatedPortTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.RelatedPrioritiesType <em>Related Priorities Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.RelatedPrioritiesType
	 * @generated
	 */
	public Adapter createRelatedPrioritiesTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.RelatedProcessType <em>Related Process Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.RelatedProcessType
	 * @generated
	 */
	public Adapter createRelatedProcessTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.RelatedPropertiesType <em>Related Properties Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.RelatedPropertiesType
	 * @generated
	 */
	public Adapter createRelatedPropertiesTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.RelatedSpaceProgramType <em>Related Space Program Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.RelatedSpaceProgramType
	 * @generated
	 */
	public Adapter createRelatedSpaceProgramTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.RelatedSpaceType <em>Related Space Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.RelatedSpaceType
	 * @generated
	 */
	public Adapter createRelatedSpaceTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.RelatedStructuralActivityType <em>Related Structural Activity Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.RelatedStructuralActivityType
	 * @generated
	 */
	public Adapter createRelatedStructuralActivityTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.RelatedStructuralConnectionType <em>Related Structural Connection Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.RelatedStructuralConnectionType
	 * @generated
	 */
	public Adapter createRelatedStructuralConnectionTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.RelatedStructuralMemberType <em>Related Structural Member Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.RelatedStructuralMemberType
	 * @generated
	 */
	public Adapter createRelatedStructuralMemberTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.RelatingActorType <em>Relating Actor Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.RelatingActorType
	 * @generated
	 */
	public Adapter createRelatingActorTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.RelatingAppliedValueType <em>Relating Applied Value Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.RelatingAppliedValueType
	 * @generated
	 */
	public Adapter createRelatingAppliedValueTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.RelatingApprovalType <em>Relating Approval Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.RelatingApprovalType
	 * @generated
	 */
	public Adapter createRelatingApprovalTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.RelatingApprovalType1 <em>Relating Approval Type1</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.RelatingApprovalType1
	 * @generated
	 */
	public Adapter createRelatingApprovalType1Adapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.RelatingBuildingElementType <em>Relating Building Element Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.RelatingBuildingElementType
	 * @generated
	 */
	public Adapter createRelatingBuildingElementTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.RelatingBuildingElementType1 <em>Relating Building Element Type1</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.RelatingBuildingElementType1
	 * @generated
	 */
	public Adapter createRelatingBuildingElementType1Adapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.RelatingClassificationType <em>Relating Classification Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.RelatingClassificationType
	 * @generated
	 */
	public Adapter createRelatingClassificationTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.RelatingConstraintType <em>Relating Constraint Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.RelatingConstraintType
	 * @generated
	 */
	public Adapter createRelatingConstraintTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.RelatingConstraintType1 <em>Relating Constraint Type1</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.RelatingConstraintType1
	 * @generated
	 */
	public Adapter createRelatingConstraintType1Adapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.RelatingConstraintType2 <em>Relating Constraint Type2</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.RelatingConstraintType2
	 * @generated
	 */
	public Adapter createRelatingConstraintType2Adapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.RelatingConstraintType3 <em>Relating Constraint Type3</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.RelatingConstraintType3
	 * @generated
	 */
	public Adapter createRelatingConstraintType3Adapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.RelatingControlType <em>Relating Control Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.RelatingControlType
	 * @generated
	 */
	public Adapter createRelatingControlTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.RelatingDocumentType <em>Relating Document Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.RelatingDocumentType
	 * @generated
	 */
	public Adapter createRelatingDocumentTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.RelatingDocumentType1 <em>Relating Document Type1</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.RelatingDocumentType1
	 * @generated
	 */
	public Adapter createRelatingDocumentType1Adapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.RelatingDraughtingCalloutType <em>Relating Draughting Callout Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.RelatingDraughtingCalloutType
	 * @generated
	 */
	public Adapter createRelatingDraughtingCalloutTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.RelatingElementType <em>Relating Element Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.RelatingElementType
	 * @generated
	 */
	public Adapter createRelatingElementTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.RelatingElementType1 <em>Relating Element Type1</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.RelatingElementType1
	 * @generated
	 */
	public Adapter createRelatingElementType1Adapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.RelatingElementType2 <em>Relating Element Type2</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.RelatingElementType2
	 * @generated
	 */
	public Adapter createRelatingElementType2Adapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.RelatingElementType3 <em>Relating Element Type3</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.RelatingElementType3
	 * @generated
	 */
	public Adapter createRelatingElementType3Adapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.RelatingFlowElementType <em>Relating Flow Element Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.RelatingFlowElementType
	 * @generated
	 */
	public Adapter createRelatingFlowElementTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.RelatingGroupType <em>Relating Group Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.RelatingGroupType
	 * @generated
	 */
	public Adapter createRelatingGroupTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.RelatingItemType <em>Relating Item Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.RelatingItemType
	 * @generated
	 */
	public Adapter createRelatingItemTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.RelatingLibraryType <em>Relating Library Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.RelatingLibraryType
	 * @generated
	 */
	public Adapter createRelatingLibraryTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.RelatingMaterialType <em>Relating Material Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.RelatingMaterialType
	 * @generated
	 */
	public Adapter createRelatingMaterialTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.RelatingMonetaryUnitType <em>Relating Monetary Unit Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.RelatingMonetaryUnitType
	 * @generated
	 */
	public Adapter createRelatingMonetaryUnitTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.RelatingObjectType <em>Relating Object Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.RelatingObjectType
	 * @generated
	 */
	public Adapter createRelatingObjectTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.RelatingOpeningElementType <em>Relating Opening Element Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.RelatingOpeningElementType
	 * @generated
	 */
	public Adapter createRelatingOpeningElementTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.RelatingOrganizationType <em>Relating Organization Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.RelatingOrganizationType
	 * @generated
	 */
	public Adapter createRelatingOrganizationTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.RelatingPortType <em>Relating Port Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.RelatingPortType
	 * @generated
	 */
	public Adapter createRelatingPortTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.RelatingPortType1 <em>Relating Port Type1</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.RelatingPortType1
	 * @generated
	 */
	public Adapter createRelatingPortType1Adapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.RelatingPrioritiesType <em>Relating Priorities Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.RelatingPrioritiesType
	 * @generated
	 */
	public Adapter createRelatingPrioritiesTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.RelatingProcessType <em>Relating Process Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.RelatingProcessType
	 * @generated
	 */
	public Adapter createRelatingProcessTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.RelatingProcessType1 <em>Relating Process Type1</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.RelatingProcessType1
	 * @generated
	 */
	public Adapter createRelatingProcessType1Adapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.RelatingProductType <em>Relating Product Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.RelatingProductType
	 * @generated
	 */
	public Adapter createRelatingProductTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.RelatingProfilePropertiesType <em>Relating Profile Properties Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.RelatingProfilePropertiesType
	 * @generated
	 */
	public Adapter createRelatingProfilePropertiesTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.RelatingPropertyDefinitionType <em>Relating Property Definition Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.RelatingPropertyDefinitionType
	 * @generated
	 */
	public Adapter createRelatingPropertyDefinitionTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.RelatingResourceType <em>Relating Resource Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.RelatingResourceType
	 * @generated
	 */
	public Adapter createRelatingResourceTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.RelatingSpaceProgramType <em>Relating Space Program Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.RelatingSpaceProgramType
	 * @generated
	 */
	public Adapter createRelatingSpaceProgramTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.RelatingSpaceType <em>Relating Space Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.RelatingSpaceType
	 * @generated
	 */
	public Adapter createRelatingSpaceTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.RelatingStructuralMemberType <em>Relating Structural Member Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.RelatingStructuralMemberType
	 * @generated
	 */
	public Adapter createRelatingStructuralMemberTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.RelatingStructureType <em>Relating Structure Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.RelatingStructureType
	 * @generated
	 */
	public Adapter createRelatingStructureTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.RelatingStructureType1 <em>Relating Structure Type1</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.RelatingStructureType1
	 * @generated
	 */
	public Adapter createRelatingStructureType1Adapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.RelatingSystemType <em>Relating System Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.RelatingSystemType
	 * @generated
	 */
	public Adapter createRelatingSystemTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.RelatingTypeType <em>Relating Type Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.RelatingTypeType
	 * @generated
	 */
	public Adapter createRelatingTypeTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.RelativePlacementType <em>Relative Placement Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.RelativePlacementType
	 * @generated
	 */
	public Adapter createRelativePlacementTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.RelaxationsType <em>Relaxations Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.RelaxationsType
	 * @generated
	 */
	public Adapter createRelaxationsTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.RepeatFactorType <em>Repeat Factor Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.RepeatFactorType
	 * @generated
	 */
	public Adapter createRepeatFactorTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.RepresentationContextsType <em>Representation Contexts Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.RepresentationContextsType
	 * @generated
	 */
	public Adapter createRepresentationContextsTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.RepresentationMapsType <em>Representation Maps Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.RepresentationMapsType
	 * @generated
	 */
	public Adapter createRepresentationMapsTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.RepresentationsType <em>Representations Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.RepresentationsType
	 * @generated
	 */
	public Adapter createRepresentationsTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.RepresentationType <em>Representation Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.RepresentationType
	 * @generated
	 */
	public Adapter createRepresentationTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.RepresentedMaterialType <em>Represented Material Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.RepresentedMaterialType
	 * @generated
	 */
	public Adapter createRepresentedMaterialTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.RequestedLocationType <em>Requested Location Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.RequestedLocationType
	 * @generated
	 */
	public Adapter createRequestedLocationTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.ResponsiblePersonsType <em>Responsible Persons Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.ResponsiblePersonsType
	 * @generated
	 */
	public Adapter createResponsiblePersonsTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.ResponsiblePersonType <em>Responsible Person Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.ResponsiblePersonType
	 * @generated
	 */
	public Adapter createResponsiblePersonTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.ResultForLoadGroupType <em>Result For Load Group Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.ResultForLoadGroupType
	 * @generated
	 */
	public Adapter createResultForLoadGroupTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.ResultValuesType <em>Result Values Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.ResultValuesType
	 * @generated
	 */
	public Adapter createResultValuesTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.RolesType <em>Roles Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.RolesType
	 * @generated
	 */
	public Adapter createRolesTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.RolesType1 <em>Roles Type1</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.RolesType1
	 * @generated
	 */
	public Adapter createRolesType1Adapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.RolesType2 <em>Roles Type2</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.RolesType2
	 * @generated
	 */
	public Adapter createRolesType2Adapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.RoleType <em>Role Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.RoleType
	 * @generated
	 */
	public Adapter createRoleTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.RowCellsType <em>Row Cells Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.RowCellsType
	 * @generated
	 */
	public Adapter createRowCellsTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.RowsType <em>Rows Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.RowsType
	 * @generated
	 */
	public Adapter createRowsTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.SbsmBoundaryType <em>Sbsm Boundary Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.SbsmBoundaryType
	 * @generated
	 */
	public Adapter createSbsmBoundaryTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.ScheduleFinishType <em>Schedule Finish Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.ScheduleFinishType
	 * @generated
	 */
	public Adapter createScheduleFinishTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.ScheduleStartType <em>Schedule Start Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.ScheduleStartType
	 * @generated
	 */
	public Adapter createScheduleStartTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.SecondaryPlaneAngleType <em>Secondary Plane Angle Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.SecondaryPlaneAngleType
	 * @generated
	 */
	public Adapter createSecondaryPlaneAngleTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.SecondOperandType <em>Second Operand Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.SecondOperandType
	 * @generated
	 */
	public Adapter createSecondOperandTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.SecondRepeatFactorType <em>Second Repeat Factor Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.SecondRepeatFactorType
	 * @generated
	 */
	public Adapter createSecondRepeatFactorTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.SectionDefinitionType <em>Section Definition Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.SectionDefinitionType
	 * @generated
	 */
	public Adapter createSectionDefinitionTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.SegmentsType <em>Segments Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.SegmentsType
	 * @generated
	 */
	public Adapter createSegmentsTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.ShapeAspectStyleType <em>Shape Aspect Style Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.ShapeAspectStyleType
	 * @generated
	 */
	public Adapter createShapeAspectStyleTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.ShapeAspectStyleType1 <em>Shape Aspect Style Type1</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.ShapeAspectStyleType1
	 * @generated
	 */
	public Adapter createShapeAspectStyleType1Adapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.ShapeAspectStyleType2 <em>Shape Aspect Style Type2</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.ShapeAspectStyleType2
	 * @generated
	 */
	public Adapter createShapeAspectStyleType2Adapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.ShapeAspectStyleType3 <em>Shape Aspect Style Type3</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.ShapeAspectStyleType3
	 * @generated
	 */
	public Adapter createShapeAspectStyleType3Adapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.ShapeAspectStyleType4 <em>Shape Aspect Style Type4</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.ShapeAspectStyleType4
	 * @generated
	 */
	public Adapter createShapeAspectStyleType4Adapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.ShapeRepresentationsType <em>Shape Representations Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.ShapeRepresentationsType
	 * @generated
	 */
	public Adapter createShapeRepresentationsTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.SiteAddressType <em>Site Address Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.SiteAddressType
	 * @generated
	 */
	public Adapter createSiteAddressTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.SoundLevelSingleValueType <em>Sound Level Single Value Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.SoundLevelSingleValueType
	 * @generated
	 */
	public Adapter createSoundLevelSingleValueTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.SoundLevelTimeSeriesType <em>Sound Level Time Series Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.SoundLevelTimeSeriesType
	 * @generated
	 */
	public Adapter createSoundLevelTimeSeriesTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.SoundValuesType <em>Sound Values Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.SoundValuesType
	 * @generated
	 */
	public Adapter createSoundValuesTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.SpecularColourType <em>Specular Colour Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.SpecularColourType
	 * @generated
	 */
	public Adapter createSpecularColourTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.SpecularHighlightType <em>Specular Highlight Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.SpecularHighlightType
	 * @generated
	 */
	public Adapter createSpecularHighlightTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.SpineCurveType <em>Spine Curve Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.SpineCurveType
	 * @generated
	 */
	public Adapter createSpineCurveTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.StartOfNextHatchLineType <em>Start Of Next Hatch Line Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.StartOfNextHatchLineType
	 * @generated
	 */
	public Adapter createStartOfNextHatchLineTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.StartProfileType <em>Start Profile Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.StartProfileType
	 * @generated
	 */
	public Adapter createStartProfileTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.StartTimeType <em>Start Time Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.StartTimeType
	 * @generated
	 */
	public Adapter createStartTimeTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.StartTimeType1 <em>Start Time Type1</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.StartTimeType1
	 * @generated
	 */
	public Adapter createStartTimeType1Adapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.StatusTimeType <em>Status Time Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.StatusTimeType
	 * @generated
	 */
	public Adapter createStatusTimeTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.StyleOfSymbolType <em>Style Of Symbol Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.StyleOfSymbolType
	 * @generated
	 */
	public Adapter createStyleOfSymbolTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.StylesType <em>Styles Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.StylesType
	 * @generated
	 */
	public Adapter createStylesTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.StylesType1 <em>Styles Type1</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.StylesType1
	 * @generated
	 */
	public Adapter createStylesType1Adapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.StylesType2 <em>Styles Type2</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.StylesType2
	 * @generated
	 */
	public Adapter createStylesType2Adapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.SubContractorType <em>Sub Contractor Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.SubContractorType
	 * @generated
	 */
	public Adapter createSubContractorTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.SubmittedByType <em>Submitted By Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.SubmittedByType
	 * @generated
	 */
	public Adapter createSubmittedByTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.SubmittedOnType <em>Submitted On Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.SubmittedOnType
	 * @generated
	 */
	public Adapter createSubmittedOnTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.SubsequentAppliedLoadsType <em>Subsequent Applied Loads Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.SubsequentAppliedLoadsType
	 * @generated
	 */
	public Adapter createSubsequentAppliedLoadsTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.SubsequentAppliedLoadsType1 <em>Subsequent Applied Loads Type1</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.SubsequentAppliedLoadsType1
	 * @generated
	 */
	public Adapter createSubsequentAppliedLoadsType1Adapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.SubsequentThicknessType <em>Subsequent Thickness Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.SubsequentThicknessType
	 * @generated
	 */
	public Adapter createSubsequentThicknessTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.SuffixTitlesType <em>Suffix Titles Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.SuffixTitlesType
	 * @generated
	 */
	public Adapter createSuffixTitlesTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.SuppliersType <em>Suppliers Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.SuppliersType
	 * @generated
	 */
	public Adapter createSuppliersTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.SurfaceColourType <em>Surface Colour Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.SurfaceColourType
	 * @generated
	 */
	public Adapter createSurfaceColourTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.SurfaceOnRelatedElementType <em>Surface On Related Element Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.SurfaceOnRelatedElementType
	 * @generated
	 */
	public Adapter createSurfaceOnRelatedElementTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.SurfaceOnRelatingElementType <em>Surface On Relating Element Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.SurfaceOnRelatingElementType
	 * @generated
	 */
	public Adapter createSurfaceOnRelatingElementTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.SweptAreaType <em>Swept Area Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.SweptAreaType
	 * @generated
	 */
	public Adapter createSweptAreaTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.SweptCurveType <em>Swept Curve Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.SweptCurveType
	 * @generated
	 */
	public Adapter createSweptCurveTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.SymbolType <em>Symbol Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.SymbolType
	 * @generated
	 */
	public Adapter createSymbolTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.TargetType <em>Target Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.TargetType
	 * @generated
	 */
	public Adapter createTargetTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.TargetUsersType <em>Target Users Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.TargetUsersType
	 * @generated
	 */
	public Adapter createTargetUsersTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.TelephoneNumbersType <em>Telephone Numbers Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.TelephoneNumbersType
	 * @generated
	 */
	public Adapter createTelephoneNumbersTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.TemperatureTimeSeriesType <em>Temperature Time Series Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.TemperatureTimeSeriesType
	 * @generated
	 */
	public Adapter createTemperatureTimeSeriesTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.TextCharacterAppearanceType <em>Text Character Appearance Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.TextCharacterAppearanceType
	 * @generated
	 */
	public Adapter createTextCharacterAppearanceTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.TextFontStyleType <em>Text Font Style Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.TextFontStyleType
	 * @generated
	 */
	public Adapter createTextFontStyleTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.TextIndentType <em>Text Indent Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.TextIndentType
	 * @generated
	 */
	public Adapter createTextIndentTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.TextStyleType <em>Text Style Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.TextStyleType
	 * @generated
	 */
	public Adapter createTextStyleTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.TextureCoordinatesType <em>Texture Coordinates Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.TextureCoordinatesType
	 * @generated
	 */
	public Adapter createTextureCoordinatesTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.TextureMapsType <em>Texture Maps Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.TextureMapsType
	 * @generated
	 */
	public Adapter createTextureMapsTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.TexturePointsType <em>Texture Points Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.TexturePointsType
	 * @generated
	 */
	public Adapter createTexturePointsTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.TexturesType <em>Textures Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.TexturesType
	 * @generated
	 */
	public Adapter createTexturesTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.TextureTransformType <em>Texture Transform Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.TextureTransformType
	 * @generated
	 */
	public Adapter createTextureTransformTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.TextureVerticesType <em>Texture Vertices Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.TextureVerticesType
	 * @generated
	 */
	public Adapter createTextureVerticesTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.TheActorType <em>The Actor Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.TheActorType
	 * @generated
	 */
	public Adapter createTheActorTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.TheOrganizationType <em>The Organization Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.TheOrganizationType
	 * @generated
	 */
	public Adapter createTheOrganizationTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.ThePersonType <em>The Person Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.ThePersonType
	 * @generated
	 */
	public Adapter createThePersonTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.ThermalLoadTimeSeriesValuesType <em>Thermal Load Time Series Values Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.ThermalLoadTimeSeriesValuesType
	 * @generated
	 */
	public Adapter createThermalLoadTimeSeriesValuesTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.TilesType <em>Tiles Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.TilesType
	 * @generated
	 */
	public Adapter createTilesTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.TilingPatternType <em>Tiling Pattern Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.TilingPatternType
	 * @generated
	 */
	public Adapter createTilingPatternTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.TimeComponentType <em>Time Component Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.TimeComponentType
	 * @generated
	 */
	public Adapter createTimeComponentTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.TimeForTaskType <em>Time For Task Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.TimeForTaskType
	 * @generated
	 */
	public Adapter createTimeForTaskTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.TimeSeriesReferencesType <em>Time Series References Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.TimeSeriesReferencesType
	 * @generated
	 */
	public Adapter createTimeSeriesReferencesTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.TimeSeriesType <em>Time Series Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.TimeSeriesType
	 * @generated
	 */
	public Adapter createTimeSeriesTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.TimeStampType <em>Time Stamp Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.TimeStampType
	 * @generated
	 */
	public Adapter createTimeStampTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.TotalReplacementCostType <em>Total Replacement Cost Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.TotalReplacementCostType
	 * @generated
	 */
	public Adapter createTotalReplacementCostTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.TransmissionColourType <em>Transmission Colour Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.TransmissionColourType
	 * @generated
	 */
	public Adapter createTransmissionColourTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.TransmissionColourType1 <em>Transmission Colour Type1</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.TransmissionColourType1
	 * @generated
	 */
	public Adapter createTransmissionColourType1Adapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.TreeRootExpressionType <em>Tree Root Expression Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.TreeRootExpressionType
	 * @generated
	 */
	public Adapter createTreeRootExpressionTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.Trim1Type <em>Trim1 Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.Trim1Type
	 * @generated
	 */
	public Adapter createTrim1TypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.Trim2Type <em>Trim2 Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.Trim2Type
	 * @generated
	 */
	public Adapter createTrim2TypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.TrueNorthType <em>True North Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.TrueNorthType
	 * @generated
	 */
	public Adapter createTrueNorthTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.UAxesType <em>UAxes Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.UAxesType
	 * @generated
	 */
	public Adapter createUAxesTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.UnitBasisType <em>Unit Basis Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.UnitBasisType
	 * @generated
	 */
	public Adapter createUnitBasisTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.UnitComponentType <em>Unit Component Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.UnitComponentType
	 * @generated
	 */
	public Adapter createUnitComponentTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.UnitsInContextType <em>Units In Context Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.UnitsInContextType
	 * @generated
	 */
	public Adapter createUnitsInContextTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.UnitsType <em>Units Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.UnitsType
	 * @generated
	 */
	public Adapter createUnitsTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.UnitType <em>Unit Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.UnitType
	 * @generated
	 */
	public Adapter createUnitTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.UnitType1 <em>Unit Type1</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.UnitType1
	 * @generated
	 */
	public Adapter createUnitType1Adapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.UnitType2 <em>Unit Type2</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.UnitType2
	 * @generated
	 */
	public Adapter createUnitType2Adapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.UnitType3 <em>Unit Type3</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.UnitType3
	 * @generated
	 */
	public Adapter createUnitType3Adapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.UnitType4 <em>Unit Type4</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.UnitType4
	 * @generated
	 */
	public Adapter createUnitType4Adapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.UnitType5 <em>Unit Type5</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.UnitType5
	 * @generated
	 */
	public Adapter createUnitType5Adapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.UnitType6 <em>Unit Type6</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.UnitType6
	 * @generated
	 */
	public Adapter createUnitType6Adapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.Uos <em>Uos</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.Uos
	 * @generated
	 */
	public Adapter createUosAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.UpdateDateType <em>Update Date Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.UpdateDateType
	 * @generated
	 */
	public Adapter createUpdateDateTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.UpperBoundValueType <em>Upper Bound Value Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.UpperBoundValueType
	 * @generated
	 */
	public Adapter createUpperBoundValueTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.UpperValueType <em>Upper Value Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.UpperValueType
	 * @generated
	 */
	public Adapter createUpperValueTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.UserType <em>User Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.UserType
	 * @generated
	 */
	public Adapter createUserTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.ValidFromType <em>Valid From Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.ValidFromType
	 * @generated
	 */
	public Adapter createValidFromTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.ValidUntilType <em>Valid Until Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.ValidUntilType
	 * @generated
	 */
	public Adapter createValidUntilTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.ValueComponentType <em>Value Component Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.ValueComponentType
	 * @generated
	 */
	public Adapter createValueComponentTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.ValuesType <em>Values Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.ValuesType
	 * @generated
	 */
	public Adapter createValuesTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.ValuesType1 <em>Values Type1</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.ValuesType1
	 * @generated
	 */
	public Adapter createValuesType1Adapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.VaryingAppliedLoadLocationType <em>Varying Applied Load Location Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.VaryingAppliedLoadLocationType
	 * @generated
	 */
	public Adapter createVaryingAppliedLoadLocationTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.VaryingAppliedLoadLocationType1 <em>Varying Applied Load Location Type1</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.VaryingAppliedLoadLocationType1
	 * @generated
	 */
	public Adapter createVaryingAppliedLoadLocationType1Adapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.VaryingThicknessLocationType <em>Varying Thickness Location Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.VaryingThicknessLocationType
	 * @generated
	 */
	public Adapter createVaryingThicknessLocationTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.VAxesType <em>VAxes Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.VAxesType
	 * @generated
	 */
	public Adapter createVAxesTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.VelocityTimeSeriesType <em>Velocity Time Series Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.VelocityTimeSeriesType
	 * @generated
	 */
	public Adapter createVelocityTimeSeriesTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.VersionDateType <em>Version Date Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.VersionDateType
	 * @generated
	 */
	public Adapter createVersionDateTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.VertexGeometryType <em>Vertex Geometry Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.VertexGeometryType
	 * @generated
	 */
	public Adapter createVertexGeometryTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.VoidsType <em>Voids Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.VoidsType
	 * @generated
	 */
	public Adapter createVoidsTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.WAxesType <em>WAxes Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.WAxesType
	 * @generated
	 */
	public Adapter createWAxesTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.WeightsDataType <em>Weights Data Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.WeightsDataType
	 * @generated
	 */
	public Adapter createWeightsDataTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.WetBulbTemperatureTimeSeriesType <em>Wet Bulb Temperature Time Series Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.WetBulbTemperatureTimeSeriesType
	 * @generated
	 */
	public Adapter createWetBulbTemperatureTimeSeriesTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.WordSpacingType <em>Word Spacing Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.WordSpacingType
	 * @generated
	 */
	public Adapter createWordSpacingTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.WorldCoordinateSystemType <em>World Coordinate System Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.WorldCoordinateSystemType
	 * @generated
	 */
	public Adapter createWorldCoordinateSystemTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.tech.iai.ifc.xml.ifc._2x3.final_.ZoneType <em>Zone Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.tech.iai.ifc.xml.ifc._2x3.final_.ZoneType
	 * @generated
	 */
	public Adapter createZoneTypeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.iso.standard._10303.part._28.version._2.xmlschema.common.Entity <em>Entity</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.iso.standard._10303.part._28.version._2.xmlschema.common.Entity
	 * @generated
	 */
	public Adapter createEntityAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.iso.standard._10303.part._28.version._2.xmlschema.common.Uos <em>Uos</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.iso.standard._10303.part._28.version._2.xmlschema.common.Uos
	 * @generated
	 */
	public Adapter createCommon_UosAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for the default case.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @generated
	 */
	public Adapter createEObjectAdapter() {
		return null;
	}

} //FinalAdapterFactory
